::ERROR:: TypeError: error sending request for url (https://api.mock.com/search?query=machine+learning&sortBy=citations&limit=10): client error (Connect): dns error: failed to lookup address information: nodename nor servname provided, or not known: failed to lookup address information: nodename nor servname provided, or not known
    at Function.AxiosError.from (file:///Users/edwardalvarado/Library/Caches/deno/npm/registry.npmjs.org/axios/1.6.2/lib/core/AxiosError.js:89:14)
    at RedirectableRequest.handleRequestError (file:///Users/edwardalvarado/Library/Caches/deno/npm/registry.npmjs.org/axios/1.6.2/lib/adapters/http.js:606:25)
    at RedirectableRequest.emit (ext:deno_node/_events.mjs:393:28)
    at HttpsClientRequest.eventHandlers.<computed> (file:///Users/edwardalvarado/Library/Caches/deno/npm/registry.npmjs.org/follow-redirects/1.15.9/index.js:49:24)
    at HttpsClientRequest.emit (ext:deno_node/_events.mjs:393:28)
    at node:http:396:16
    at eventLoopTick (ext:core/01_core.js:175:7)
Caused by TypeError: error sending request for url (https://api.mock.com/search?query=machine+learning&sortBy=citations&limit=10): client error (Connect): dns error: failed to lookup address information: nodename nor servname provided, or not known: failed to lookup address information: nodename nor servname provided, or not known
    at async node:http:314:21 {
  message: "error sending request for url (https://api.mock.com/search?query=machine+learning&sortBy=citations&limit=10): client error (Connect): dns error: failed to lookup address information: nodename nor servname provided, or not known: failed to lookup address information: nodename nor servname provided, or not known",
  name: "TypeError",
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ "xhr", "http" ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] {
        LINE_BREAK: "\r\n",
        DEFAULT_CONTENT_TYPE: "application/octet-stream"
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: "application/json, text/plain, */*",
      "Content-Type": undefined,
      "User-Agent": "axios/1.6.2",
      "Accept-Encoding": "gzip, compress, deflate, br"
    },
    params: { query: "machine learning", sortBy: "citations", limit: 10 },
    method: "get",
    url: "https://api.mock.com/search",
    data: undefined
  },
  request: <ref *1> Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: "utf8",
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      buffered: [],
      bufferedIndex: 0,
      allBuffers: true,
      allNoop: true,
      pendingcb: 0,
      constructed: true,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: true,
      errored: null,
      closed: false,
      closeEmitted: false,
      [Symbol(kOnFinished)]: []
    },
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError],
      socket: [Function: handleRequestSocket]
    },
    _eventsCount: 3,
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: Infinity,
      protocol: "https:",
      path: "/search?query=machine+learning&sortBy=citations&limit=10",
      method: "GET",
      headers: [Object: null prototype] {
        Accept: "application/json, text/plain, */*",
        "User-Agent": "axios/1.6.2",
        "Accept-Encoding": "gzip, compress, deflate, br"
      },
      agents: { http: undefined, https: undefined },
      auth: undefined,
      family: undefined,
      beforeRedirect: [Function: dispatchBeforeRedirect],
      beforeRedirects: { proxy: [Function: beforeRedirect] },
      hostname: "api.mock.com",
      port: "",
      agent: undefined,
      nativeProtocols: {
        "http:": {
          Agent: [Function],
          globalAgent: [Agent],
          ClientRequest: [class ClientRequest extends OutgoingMessage],
          STATUS_CODES: [Object],
          METHODS: [Array],
          createServer: [Function: createServer],
          Server: [Function: Server],
          IncomingMessage: [class IncomingMessageForServer extends Readable],
          IncomingMessageForClient: [class IncomingMessageForClient extends Readable],
          IncomingMessageForServer: [class IncomingMessageForServer extends Readable],
          OutgoingMessage: [Function: OutgoingMessage],
          ServerResponse: [Function],
          request: [Function: request],
          get: [Function: get],
          validateHeaderName: [Function: __node_internal_],
          validateHeaderValue: [Function: __node_internal_],
          maxHeaderSize: 16384
        },
        "https:": {
          Agent: [class Agent extends Agent],
          Server: [class Server extends ServerImpl],
          createServer: [Function: createServer],
          get: [Function: get],
          globalAgent: [Agent],
          request: [Function: request]
        }
      },
      pathname: "/search",
      search: "?query=machine+learning&sortBy=citations&limit=10"
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: HttpsClientRequest {
      _events: [Object: null prototype] {
        response: [Function: bound onceWrapper] {
          listener: [Function (anonymous)]
        },
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: "",
      finished: true,
      _headerSent: true,
      _closed: false,
      socket: FakeSocket {
        _events: [Object: null prototype] {},
        _eventsCount: 0,
        _maxListeners: undefined,
        remoteAddress: undefined,
        remotePort: undefined,
        encrypted: undefined,
        reader: undefined,
        writable: true,
        readable: true,
        [Symbol(kCapture)]: false
      },
      _header: "GET /search?query=machine+learning&sortBy=citations&limit=10 HTTP/1.1\r\n" +
        "\r\n",
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      _bodyWriter: null,
      defaultProtocol: "https:",
      aborted: false,
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 443,
        protocol: "https:",
        options: [Object: null prototype] {
          keepAlive: true,
          scheduling: "lifo",
          timeout: 5000,
          path: null
        },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {},
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: "lifo",
        maxTotalSockets: Infinity,
        totalSocketCount: 0,
        maxCachedSessions: 100,
        _sessionCache: { map: {}, list: [] },
        [Symbol(kCapture)]: false
      },
      method: "GET",
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      path: "/search?query=machine+learning&sortBy=citations&limit=10",
      _req: [Object: null prototype] { requestRid: 4, cancelHandleRid: 5 },
      socketPath: undefined,
      joinDuplicateHeaders: undefined,
      _ended: false,
      res: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: "api.mock.com",
      protocol: "https:",
      port: 443,
      hash: undefined,
      search: "?query=machine+learning&sortBy=citations&limit=10",
      auth: undefined,
      _encrypted: undefined,
      _redirectable: [Circular *1],
      _client: HttpClient {},
      [Symbol(kCapture)]: false,
      [Symbol(kNeedDrain)]: false,
      [Symbol(corked)]: 0,
      [Symbol(kOutHeaders)]: [Object: null prototype] {
        accept: [ "Accept", "application/json, text/plain, */*" ],
        "user-agent": [ "User-Agent", "axios/1.6.2" ],
        "accept-encoding": [ "Accept-Encoding", "gzip, compress, deflate, br" ],
        host: [ "Host", "api.mock.com" ]
      },
      [Symbol(kUniqueHeaders)]: null
    },
    _currentUrl: "https://api.mock.com/search?query=machine+learning&sortBy=citations&limit=10",
    [Symbol(kCapture)]: false
  }
}
