{"success":true,"status":"completed","completed":1,"total":1,"creditsUsed":1,"expiresAt":"2025-03-05T23:20:39.000Z","data":[{"markdown":"On this page\n\n*   [Type Checking](https://docs.deno.com/runtime/fundamentals/typescript/#type-checking)\n    \n*   [Using with JavaScript](https://docs.deno.com/runtime/fundamentals/typescript/#using-with-javascript)\n    \n*   [Providing declaration files](https://docs.deno.com/runtime/fundamentals/typescript/#providing-declaration-files)\n    *   [Providing types in the source](https://docs.deno.com/runtime/fundamentals/typescript/#providing-types-in-the-source)\n        \n    *   [Providing types in the importer](https://docs.deno.com/runtime/fundamentals/typescript/#providing-types-in-the-importer)\n        \n    *   [Providing types for HTTP modules](https://docs.deno.com/runtime/fundamentals/typescript/#providing-types-for-http-modules)\n        \n*   [Type checking for browsers and web workers](https://docs.deno.com/runtime/fundamentals/typescript/#type-checking-for-browsers-and-web-workers)\n    \n*   [Augmenting global types](https://docs.deno.com/runtime/fundamentals/typescript/#augmenting-global-types)\n    *   [Using declare global to augment the global scope](https://docs.deno.com/runtime/fundamentals/typescript/#using-declare-global-to-augment-the-global-scope)\n        \n    *   [Using .d.ts files to augment the global scope](https://docs.deno.com/runtime/fundamentals/typescript/#using-.d.ts-files-to-augment-the-global-scope)\n        \n\nTypeScript support\n==================\n\nTypeScript is a first class language in Deno, just like JavaScript or WebAssembly. You can run or import TypeScript without installing anything more than the Deno CLI. With its built-in TypeScript compiler, Deno will compile your TypeScript code to JavaScript with no extra config needed. Deno can also type check your TypeScript code, without requiring a separate type checking tool like `tsc`.\n\nType Checking [Jump to heading#](https://docs.deno.com/runtime/fundamentals/typescript/#type-checking)\n\n-------------------------------------------------------------------------------------------------------\n\nOne of the main advantages of TypeScript is that it can make your code type safe, catching errors during development rather than runtime. TypeScript is a superset of JavaScript meaning that syntactically valid JavaScript becomes TypeScript with warnings about being \"unsafe\".\n\nNote\n\n**Deno type checks TypeScript in `strict mode` by default**, the TypeScript core team [recommends strict mode as a sensible default](https://www.typescriptlang.org/play/?#example/new-compiler-defaults)\n.\n\nDeno allows you to type-check your code (without executing it) with the [`deno check`](https://docs.deno.com/runtime/reference/cli/check/)\n subcommand:\n\n    deno check module.ts\n    # or also type check remote modules and npm packages\n    deno check --all module.ts\n    # code snippets written in JSDoc can also be type checked\n    deno check --doc module.ts\n    # or type check code snippets in markdown files\n    deno check --doc-only markdown.md\n    \n\nNote\n\nType checking can take a significant amount of time, especially if you are working on a codebase where you are making a lot of changes. Deno optimizes type checking, but it still comes at a cost. Therefore,Â **by default, TypeScript modules are not type-checked before they are executed**.\n\nWhen using the `deno run` command, Deno will skip type-checking and run the code directly. In order to perform a type check of the module before execution occurs, you can use the `--check` flag with `deno run`:\n\n    deno run --check module.ts\n    # or also type check remote modules and npm packages\n    deno run --check=all module.ts\n    \n\nWhen Deno encounters a type error when using this flag, the process will exit before executing the code.\n\nIn order to avoid this, you will either need to:\n\n*   resolve the issue\n*   use the `// @ts-ignore` or `// @ts-expect-error` pragmas to ignore the error\n*   or skip type checking all together.\n\nWhen testing your code, type checking is enabled by default. You can use the `--no-check` flag to skip type checking if preferred:\n\n    deno test --no-check\n    \n\nUsing with JavaScript [Jump to heading#](https://docs.deno.com/runtime/fundamentals/typescript/#using-with-javascript)\n\n-----------------------------------------------------------------------------------------------------------------------\n\nDeno runs JavaScript and TypeScript code. During type checking, Deno will only type check TypeScript files by default though. If you want to type check JavaScript files too, you can either add a `// @ts-check` pragma at the top of the file, or add `compilerOptions.checkJs` to your `deno.json` file.\n\nmain.js\n\n    // @ts-check\n    \n    let x = \"hello\";\n    x = 42; // Type 'number' is not assignable to type 'string'.\n    \n\ndeno.json\n\n    {\n      \"compilerOptions\": {\n        \"checkJs\": true\n      }\n    }\n    \n\nIn JavaScript files, you can not use TypeScript syntax like type annotations or importing types. You can use [TSDoc](https://tsdoc.org/)\n comments to provide type information to the TypeScript compiler though.\n\nmain.js\n\n    // @ts-check\n    \n    /**\n     * @param a {number}\n     * @param b {number}\n     * @returns {number}\n     */\n    function add(a, b) {\n      return a + b;\n    }\n    \n\nProviding declaration files [Jump to heading#](https://docs.deno.com/runtime/fundamentals/typescript/#providing-declaration-files)\n\n-----------------------------------------------------------------------------------------------------------------------------------\n\nWhen importing untyped JavaScript modules from TypeScript code, you may need to provide type information for the JavaScript module. This is not necessary if the JavaScript is annotated with TSDoc comments. Without this additional type information (in the form of a `.d.ts` declaration file), TypeScript will assume everything exported from the JavaScript module is of type `any`.\n\n`tsc` will pick up `d.ts` files that are siblings of a `js` file and have the same basename, automatically. **Deno does not do this.** You must explicitly specify either in the `.js` file (the source), or the `.ts` file (the importer) where to find the `.d.ts` file.\n\n### Providing types in the source [Jump to heading#](https://docs.deno.com/runtime/fundamentals/typescript/#providing-types-in-the-source)\n\nOne should prefer specifying the `.d.ts` file in the `.js` file, as this makes it easier to use the JavaScript module from multiple TypeScript modules: you won't have to specify the `.d.ts` file in every TypeScript module that imports the JavaScript module.\n\nadd.js\n\n    // @ts-self-types=\"./add.d.ts\"\n    \n    export function add(a, b) {\n      return a + b;\n    }\n    \n\nadd.d.ts\n\n    export function add(a: number, b: number): number;\n    \n\n### Providing types in the importer [Jump to heading#](https://docs.deno.com/runtime/fundamentals/typescript/#providing-types-in-the-importer)\n\nIf you can't modify the JavaScript source, you can specify the `.d.ts` file in the TypeScript module that imports the JavaScript module.\n\nmain.ts\n\n    // @ts-types=\"./add.d.ts\"\n    import { add } from \"./add.js\";\n    \n\nThis is also useful for NPM packages that don't provide type information:\n\nmain.ts\n\n    // @ts-types=\"npm:@types/lodash\"\n    import * as _ from \"npm:lodash\";\n    \n\n### Providing types for HTTP modules [Jump to heading#](https://docs.deno.com/runtime/fundamentals/typescript/#providing-types-for-http-modules)\n\nServers that host JavaScript modules via HTTP can also provide type information for those modules in a HTTP header. Deno will use this information when type-checking the module.\n\n    HTTP/1.1 200 OK\n    Content-Type: application/javascript; charset=UTF-8\n    Content-Length: 648\n    X-TypeScript-Types: ./add.d.ts\n    \n\nThe `X-TypeScript-Types` header specifies the location of the `.d.ts` file that provides type information for the JavaScript module. It is resolved relative to the URL of the JavaScript module, just like `Location` headers.\n\nType checking for browsers and web workers [Jump to heading#](https://docs.deno.com/runtime/fundamentals/typescript/#type-checking-for-browsers-and-web-workers)\n\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nBy default, Deno type checks TypeScript modules as if they were running in the main thread of the Deno runtime. However, Deno also supports type checking for browsers, type checking for web workers, and type checking for combination browser-Deno environments like when using SSR (Server Side Rendering) with Deno.\n\nThese environments have different global objects and APIs available to them. Deno provides type definitions for these environments in the form of library files. These library files are used by the TypeScript compiler to provide type information for the global objects and APIs available in these environments.\n\nThe loaded library files can be changed using the `compilerOptions.lib` option in a `deno.json` configuration file, or through `/// <reference lib=\"...\" />` comments in your TypeScript files. It is recommended to use the `compilerOptions.lib` option in the `deno.json` configuration file to specify the library files to use.\n\nTo enable type checking for a **browser environment**, you can specify the `dom` library file in the `compilerOptions.lib` option in a `deno.json` configuration file:\n\ndeno.json\n\n    {\n      \"compilerOptions\": {\n        \"lib\": [\"dom\"]\n      }\n    }\n    \n\nThis will enable type checking for a browser environment, providing type information for global objects like `document`. This will however disable type information for Deno-specific APIs like `Deno.readFile`.\n\nTo enable type checking for combined **browser and Deno environments**, like using SSR with Deno, you can specify both the `dom` and `deno.ns` (Deno namespace) library files in the `compilerOptions.lib` option in a `deno.json` configuration file:\n\ndeno.json\n\n    {\n      \"compilerOptions\": {\n        \"lib\": [\"dom\", \"deno.ns\"]\n      }\n    }\n    \n\nThis will enable type checking for both browser and Deno environments, providing type information for global objects like `document` and Deno-specific APIs like `Deno.readFile`.\n\nTo enable type checking for a **web worker environment in Deno**, (ie code that is run with `new Worker`), you can specify the `deno.worker` library file in the `compilerOptions.lib` option in a `deno.json`.\n\ndeno.json\n\n    {\n      \"compilerOptions\": {\n        \"lib\": [\"deno.worker\"]\n      }\n    }\n    \n\nTo specify the library files to use in a TypeScript file, you can use `/// <reference lib=\"...\" />` comments:\n\n    /// <reference no-default-lib=\"true\" />\n    /// <reference lib=\"dom\" />\n    \n\nAugmenting global types [Jump to heading#](https://docs.deno.com/runtime/fundamentals/typescript/#augmenting-global-types)\n\n---------------------------------------------------------------------------------------------------------------------------\n\nDeno supports ambient or global types in TypeScript. This is useful when polyfilling global objects or augmenting the global scope with additional properties. **You should avoid using ambient or global types when possible**, since they can lead to naming conflicts and make it harder to reason about your code. They are also not supported when publishing to JSR.\n\nTo use ambient or global types in Deno, you can use either the `declare global` syntax, or load a `.d.ts` file that augments the global scope.\n\n### Using declare global to augment the global scope [Jump to heading#](https://docs.deno.com/runtime/fundamentals/typescript/#using-declare-global-to-augment-the-global-scope)\n\nYou can use the `declare global` syntax in any of the TypeScript files that are imported in your project to augment the global scope with additional properties. For example:\n\n    declare global {\n      interface Window {\n        polyfilledAPI(): string;\n      }\n    }\n    \n\nThis makes the `polyfilledAPI` function available globally when the type definition is imported.\n\n### Using .d.ts files to augment the global scope [Jump to heading#](https://docs.deno.com/runtime/fundamentals/typescript/#using-.d.ts-files-to-augment-the-global-scope)\n\nYou can also use `.d.ts` files to augment the global scope. For example, you can create a `global.d.ts` file with the following content:\n\n    interface Window {\n      polyfilledAPI(): string;\n    }\n    \n\nThen you can load this `.d.ts` file in your TypeScript using `/// <reference types=\"./global.d.ts\" />`. This will augment the global scope with the `polyfilledAPI` function.\n\nAlternatively you can specify the `.d.ts` file in the `deno.json` configuration file, in the `compilerOptions.types` array:\n\n    {\n      \"compilerOptions\": {\n        \"types\": [\"./global.d.ts\"]\n      }\n    }\n    \n\nThis will also augment the global scope with the `polyfilledAPI` function.\n\nDid you find what you needed?\n-----------------------------\n\nYesNo[Edit this page](https://github.com/denoland/docs/edit/main/runtime/fundamentals/typescript.md)\n\nThank you! Feedback received. â\n\nAny additional comments? (_optional_)\n\nEmail address (_optional_)\n\nSend additional feedback\n\n[Privacy policy](https://docs.deno.com/deploy/manual/privacy-policy)\n\n*   [Type Checking](https://docs.deno.com/runtime/fundamentals/typescript/#type-checking)\n    \n*   [Using with JavaScript](https://docs.deno.com/runtime/fundamentals/typescript/#using-with-javascript)\n    \n*   [Providing declaration files](https://docs.deno.com/runtime/fundamentals/typescript/#providing-declaration-files)\n    *   [Providing types in the source](https://docs.deno.com/runtime/fundamentals/typescript/#providing-types-in-the-source)\n        \n    *   [Providing types in the importer](https://docs.deno.com/runtime/fundamentals/typescript/#providing-types-in-the-importer)\n        \n    *   [Providing types for HTTP modules](https://docs.deno.com/runtime/fundamentals/typescript/#providing-types-for-http-modules)\n        \n*   [Type checking for browsers and web workers](https://docs.deno.com/runtime/fundamentals/typescript/#type-checking-for-browsers-and-web-workers)\n    \n*   [Augmenting global types](https://docs.deno.com/runtime/fundamentals/typescript/#augmenting-global-types)\n    *   [Using declare global to augment the global scope](https://docs.deno.com/runtime/fundamentals/typescript/#using-declare-global-to-augment-the-global-scope)\n        \n    *   [Using .d.ts files to augment the global scope](https://docs.deno.com/runtime/fundamentals/typescript/#using-.d.ts-files-to-augment-the-global-scope)","metadata":{"ogTitle":"TypeScript support","title":"TypeScript support","description":"In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno","ogSiteName":"Deno","twitter:description":"In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno","twitter:image":"/img/og.webp","og:image":"/img/og.webp","og:site_name":"Deno","twitter:site":"@deno_land","og:locale":"en_US","ogLocale":"en_US","twitter:title":"TypeScript support","ogDescription":"In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno","favicon":"https://docs.deno.com/favicon.ico","ogImage":"/img/og.webp","og:title":"TypeScript support","twitter:image:alt":"Deno docs: Deno documentation, guides, and reference materials. docs.deno.com","viewport":"width=device-width, initial-scale=1","og:type":"article","keywords":"Deno, JavaScript, TypeScript, reference, documentation, guide, tutorial, example","og:image:alt":"Deno docs: Deno documentation, guides, and reference materials. docs.deno.com","language":"en","og:description":"In-depth documentation, guides, and reference materials for building secure, high-performance JavaScript and TypeScript applications with Deno","twitter:card":"summary_large_image","scrapeId":"c7b0caa3-1b80-439c-8109-2ca0760c31e7","sourceURL":"https://docs.deno.com/runtime/fundamentals/typescript/","url":"https://docs.deno.com/runtime/fundamentals/typescript/","statusCode":200}}]}