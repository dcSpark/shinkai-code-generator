{"success":true,"status":"completed","completed":1,"total":1,"creditsUsed":1,"expiresAt":"2025-03-05T20:55:36.000Z","data":[{"markdown":"![Python’s Requests Library (Guide)](https://realpython.com/python-requests/format=auto/https://files.realpython.com/media/Python-Requests-Library-Tutorial_Watermarked.3c9dfdc7b014.jpg)\n\nPython's Requests Library (Guide)\n=================================\n\nby [Alex Ronquillo](https://realpython.com/python-requests/#author)\n [39 Comments](https://realpython.com/python-requests/#reader-comments)\n [intermediate](https://realpython.com/tutorials/intermediate/)\n [web-dev](https://realpython.com/tutorials/web-dev/)\n\nMark as Completed Share\n\nTable of Contents\n\n*   [Getting Started With Python’s Requests Library](https://realpython.com/python-requests/#getting-started-with-pythons-requests-library)\n    \n*   [The GET Request](https://realpython.com/python-requests/#the-get-request)\n    \n*   [The Response](https://realpython.com/python-requests/#the-response)\n    *   [Status Codes](https://realpython.com/python-requests/#status-codes)\n        \n    *   [Content](https://realpython.com/python-requests/#content)\n        \n    *   [Headers](https://realpython.com/python-requests/#headers)\n        \n*   [Query String Parameters](https://realpython.com/python-requests/#query-string-parameters)\n    \n*   [Request Headers](https://realpython.com/python-requests/#request-headers)\n    \n*   [Other HTTP Methods](https://realpython.com/python-requests/#other-http-methods)\n    \n*   [The Message Body](https://realpython.com/python-requests/#the-message-body)\n    \n*   [Request Inspection](https://realpython.com/python-requests/#request-inspection)\n    \n*   [Authentication](https://realpython.com/python-requests/#authentication)\n    \n*   [SSL Certificate Verification](https://realpython.com/python-requests/#ssl-certificate-verification)\n    \n*   [Performance](https://realpython.com/python-requests/#performance)\n    *   [Timeouts](https://realpython.com/python-requests/#timeouts)\n        \n    *   [The Session Object](https://realpython.com/python-requests/#the-session-object)\n        \n    *   [Max Retries](https://realpython.com/python-requests/#max-retries)\n        \n*   [Conclusion](https://realpython.com/python-requests/#conclusion)\n    \n\n[Remove ads](https://realpython.com/account/join/)\n\nWatch Now This tutorial has a related video course created by the Real Python team. Watch it together with the written tutorial to deepen your understanding: [**Making HTTP Requests With Python**](https://realpython.com/courses/python-requests/)\n\nThe [Requests](https://requests.readthedocs.io/en/latest/)\n library is the de facto standard for making HTTP requests in Python. It abstracts the complexities of making requests behind a beautiful, simple API so that you can focus on interacting with services and consuming data in your application.\n\nThroughout this tutorial, you’ll see some of the most useful features that Requests has to offer as well as ways to customize and optimize those features for different situations that you may come across. You’ll also learn how to use Requests in an efficient way as well as how to prevent requests to external services from slowing down your application.\n\n**In this tutorial, you’ll learn how to:**\n\n*   **Make requests** using the most common HTTP methods\n*   **Customize** your requests’ headers and data using the query string and message body\n*   **Inspect** data from your requests and responses\n*   Make **authenticated** requests\n*   **Configure** your requests to help prevent your application from backing up or slowing down\n\nFor the best experience working through this tutorial, you should have [basic general knowledge of HTTP](https://www.w3schools.com/tags/ref_httpmethods.asp)\n. That said, you still may be able to follow along fine without it.\n\nIn the upcoming sections, you’ll see how you can install and use `requests` in your application. If you want to play with the code examples that you’ll see in this tutorial, as well as some additional ones, then you can download the code examples and work with them locally:\n\n**Get Your Code:** [Click here to download the free sample code](https://realpython.com/bonus/python-requests-code/)\n that shows you how to use Python’s Requests library.\n\n**Take the Quiz:** Test your knowledge with our interactive “HTTP Requests With the \"requests\" Library” quiz. You’ll receive a score upon completion to help you track your learning progress:\n\n* * *\n\n[![Python’s Requests Library (Guide)](https://realpython.com/python-requests/format=auto/https://files.realpython.com/media/Python-Requests-Library-Tutorial_Watermarked.3c9dfdc7b014.jpg)](https://realpython.com/quizzes/python-requests/)\n\n**Interactive Quiz**\n\n[HTTP Requests With the \"requests\" Library](https://realpython.com/quizzes/python-requests/)\n\nTest your understanding of the Python \"requests\" library for making HTTP requests and interacting with web services.\n\nGetting Started With Python’s Requests Library[](https://realpython.com/python-requests/#getting-started-with-pythons-requests-library \"Permanent link\")\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nEven though the Requests library is a common staple for many Python developers, it’s not included in [Python’s standard library](https://docs.python.org/3/library/index.html)\n. There are [good reasons for that decision](https://github.com/psf/requests/issues/2424)\n, primarily that the library can continue to evolve more freely as a self-standing project.\n\n**Note:** Requests doesn’t support asynchronous HTTP requests directly. If you need [async](https://realpython.com/async-io-python/)\n support in your program, you should try out [AIOHTTP](https://docs.aiohttp.org/en/stable/)\n or [HTTPX](https://www.python-httpx.org/async/)\n. The latter library is broadly compatible with Requests’ syntax.\n\nBecause Requests is a third-party library, you need to install it before you can use it in your code. As a good practice, you should install external packages into a [virtual environment](https://realpython.com/python-virtual-environments-a-primer/)\n, but you may choose to install `requests` into your global environment if you’re planning to use it across multiple projects.\n\nWhether you’re working in a virtual environment or not, you’ll need to install `requests`:\n\nShell\n\n`$ python -m pip install requests`\n\nOnce [`pip`](https://realpython.com/what-is-pip/)\n has finished installing `requests`, you can use it in your application. Importing `requests` looks like this:\n\nPython\n\n`import requests`\n\nNow that you’re all set up, it’s time to begin your journey through Requests. Your first goal will be learning how to make a `GET` request.\n\n[Remove ads](https://realpython.com/account/join/)\n\nThe GET Request[](https://realpython.com/python-requests/#the-get-request \"Permanent link\")\n\n--------------------------------------------------------------------------------------------\n\n[HTTP methods](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Request_methods)\n, such as `GET` and `POST`, determine which action you’re trying to perform when making an HTTP request. Besides `GET` and `POST`, there are several other common methods that you’ll use later in this tutorial.\n\nOne of the most common HTTP methods is `GET`. The `GET` method indicates that you’re trying to get or retrieve data from a specified resource. To make a `GET` request using Requests, you can invoke `requests.get()`.\n\nTo test this out, you can make a `GET` request to [GitHub’s REST API](https://docs.github.com/en/rest)\n by calling `get()` with the following URL:\n\nPython\n\n`>>> import requests >>> requests.get(\"https://api.github.com\") <Response [200]>`\n\nCongratulations! You’ve made your first request. Now you’ll dive a little deeper into the response of that request.\n\nThe Response[](https://realpython.com/python-requests/#the-response \"Permanent link\")\n\n--------------------------------------------------------------------------------------\n\nA `Response` is a powerful object for inspecting the results of the request. Make that same request again, but this time store the return value in a [variable](https://realpython.com/python-variables/)\n so that you can get a closer look at its attributes and behaviors:\n\nPython\n\n`>>> import requests >>> response = requests.get(\"https://api.github.com\")`\n\nIn this example, you’ve captured the return value of `get()`, which is an instance of `Response`, and stored it in a variable called `response`. You can now use `response` to see a lot of information about the results of your `GET` request.\n\n### Status Codes[](https://realpython.com/python-requests/#status-codes \"Permanent link\")\n\nThe first bit of information that you can gather from `Response` is the status code. A status code informs you of the status of the request.\n\nFor example, a `200 OK` status means that your request was successful, whereas a `404 NOT FOUND` status means that the resource you were looking for wasn’t found. There are [many other possible status codes](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes)\n as well to give you specific insights into what happened with your request.\n\nBy accessing `.status_code`, you can see the status code that the server returned:\n\nPython\n\n`>>> response.status_code 200`\n\n`.status_code` returned `200`, which means that your request was successful and the server responded with the data that you were requesting.\n\nSometimes, you might want to use this information to make decisions in your code:\n\nPython\n\n`if response.status_code == 200:     print(\"Success!\") elif response.status_code == 404:     print(\"Not Found.\")`\n\nWith this logic, if the server returns a `200` status code, then your program will [print](https://realpython.com/python-print/)\n `Success!`. If the result is a `404`, then your program will print `Not Found`.\n\nRequests goes one step further in simplifying this process for you. If you use a `Response` instance in a conditional expression, then it’ll evaluate to `True` if the status code was smaller than `400`, and `False` otherwise.\n\nTherefore, you can simplify the last example by rewriting the `if` statement:\n\nPython\n\n`if response:     print(\"Success!\") else:     raise Exception(f\"Non-success status code: {response.status_code}\")`\n\nIn the code snippet above, you implicitly check whether the `.status_code` of `response` is between `200` and `399`. If it’s not, then you [raise](https://realpython.com/python-raise-exception/)\n an [exception](https://realpython.com/python-exceptions/)\n that includes the non-success status code in an [f-string](https://realpython.com/python-f-strings/)\n.\n\n**Note:** This [truth value test](https://docs.python.org/3/library/stdtypes.html#truth-value-testing)\n is possible because [`.__bool__()` is an overloaded method](https://realpython.com/operator-function-overloading/#making-your-objects-truthy-or-falsey-using-bool)\n on `Response`. This means that the adapted default behavior of `Response` takes the status code into account when determining the truth value of the object.\n\nKeep in mind that this method is _not_ verifying that the status code is equal to `200`. The reason for this is that other status codes within the `200` to `399` range, such as `204 NO CONTENT` and `304 NOT MODIFIED`, are also considered successful in the sense that they provide some workable response.\n\nFor example, the status code `204` tells you that the response was successful, but there’s no content to return in the message body.\n\nSo, make sure you use this convenient shorthand only if you want to know if the request was generally successful. Then, if necessary, you’ll need to handle the response appropriately based on the status code.\n\nLet’s say you don’t want to check the response’s status code in an `if` statement. Instead, you want to use Request’s built-in capacities to raise an exception if the request was unsuccessful. You can do this using `.raise_for_status()`:\n\nPython `raise_error.py`\n\n`import requests from requests.exceptions import HTTPError  URLS = [\"https://api.github.com\", \"https://api.github.com/invalid\"]  for url in URLS:     try:         response = requests.get(url)         response.raise_for_status()    except HTTPError as http_err:         print(f\"HTTP error occurred: {http_err}\")     except Exception as err:         print(f\"Other error occurred: {err}\")     else:         print(\"Success!\")`\n\nIf you invoke [`.raise_for_status()`](https://docs.python-requests.org/en/latest/_modules/requests/models/#Response.raise_for_status)\n, then Requests will raise an `HTTPError` for status codes between `400` and `600`. If the status code indicates a successful request, then the program will proceed without raising that exception.\n\nNow, you know a lot about how to deal with the status code of the response that you got back from the server. However, when you make a `GET` request, you rarely only care about the status code of the response. Usually, you want to see more. Next, you’ll see how to view the actual data that the server sent back in the body of the response.\n\n[Remove ads](https://realpython.com/account/join/)\n\n### Content[](https://realpython.com/python-requests/#content \"Permanent link\")\n\nThe response of a `GET` request often has some valuable information, known as a [payload](https://en.wikipedia.org/wiki/Payload_(computing))\n, in the message body. Using the attributes and methods of `Response`, you can view the payload in a variety of different formats.\n\nTo see the response’s content in [`bytes`](https://realpython.com/python-strings/)\n, you use `.content`:\n\nPython\n\n`>>> import requests  >>> response = requests.get(\"https://api.github.com\") >>> response.content b'{\"current_user_url\":\"https://api.github.com/user\", ...}'  >>> type(response.content) <class 'bytes'>`\n\nWhile `.content` gives you access to the raw bytes of the response payload, you’ll often want to convert them into a [string](https://realpython.com/python-data-types/)\n using a [character encoding](https://realpython.com/python-encodings-guide/)\n such as [UTF-8](https://en.wikipedia.org/wiki/UTF-8)\n. `response` will do that for you when you access `.text`:\n\nPython\n\n`>>> response.text '{\"current_user_url\":\"https://api.github.com/user\", ...}'  >>> type(response.text) <class 'str'>`\n\nBecause the decoding of `bytes` to a `str` requires an encoding scheme, Requests will try to guess the [encoding](https://docs.python.org/3/howto/unicode.html#encodings)\n based on the response’s [headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers)\n if you don’t specify one. You can provide an explicit encoding by setting `.encoding` before accessing `.text`:\n\nPython\n\n`>>> response.encoding = \"utf-8\"  # Optional: Requests infers this. >>> response.text '{\"current_user_url\":\"https://api.github.com/user\", ...}'`\n\nIf you take a look at the response, then you’ll see that it’s actually serialized JSON content. To get a dictionary, you could take the `str` that you retrieved from `.text` and deserialize it using [`json.loads()`](https://realpython.com/python-json/#deserializing-json)\n. However, a simpler way to accomplish this task is to use `.json()`:\n\nPython\n\n`>>> response.json() {'current_user_url': 'https://api.github.com/user', ...}  >>> type(response.json()) <class 'dict'>`\n\nThe `type` of the return value of `.json()` is a dictionary, so you can access values in the object by key:\n\nPython\n\n`>>> response_dict = response.json() >>> response_dict[\"emojis_url\"] 'https://api.github.com/emojis'`\n\nYou can do a lot with status codes and message bodies. But, if you need more information, like [metadata](https://en.wikipedia.org/wiki/Metadata)\n about the response itself, then you’ll need to look at the response’s headers.\n\n### Headers[](https://realpython.com/python-requests/#headers \"Permanent link\")\n\nThe response headers can give you useful information, such as the content type of the response payload and a time limit on how long to cache the response. To view these headers, access `.headers`:\n\nPython\n\n`>>> import requests  >>> response = requests.get(\"https://api.github.com\") >>> response.headers {'Server': 'GitHub.com', ... 'X-GitHub-Request-Id': 'AE83:3F40:2151C46:438A840:65C38178'}`\n\n`.headers` returns a dictionary-like object, allowing you to access header values by key. For example, to see the content type of the response payload, you can access `\"Content-Type\"`:\n\nPython\n\n`>>> response.headers[\"Content-Type\"] 'application/json; charset=utf-8'`\n\nThere’s something special about this dictionary-like headers object, though. The HTTP specification defines headers as case-insensitive, which means that you’re able to access these headers without worrying about their capitalization:\n\nPython\n\n`>>> response.headers[\"content-type\"] 'application/json; charset=utf-8'`\n\nWhether you use the key `\"content-type\"` or `\"Content-Type\"`, you’ll get the same value.\n\nNow that you’ve seen the most useful attributes and methods of `Response` in action, you already have a good overview of Requests’ basic usage. You can get content from the Internet and work with the response that you receive.\n\nBut there’s more to the Internet than plain and straightforward URLs. In the next section, you’ll take a step back and see how your responses change when you customize your `GET` requests to account for query string parameters.\n\n[Remove ads](https://realpython.com/account/join/)\n\nQuery String Parameters[](https://realpython.com/python-requests/#query-string-parameters \"Permanent link\")\n\n------------------------------------------------------------------------------------------------------------\n\nOne common way to customize a `GET` request is to pass values through [query string](https://en.wikipedia.org/wiki/Query_string)\n parameters in the URL. To do this using `get()`, you pass data to `params`. For example, you can use GitHub’s [repository search](https://docs.github.com/en/rest/search/search#search-repositories)\n API to look for popular Python repositories:\n\nPython `search_popular_repos.py`\n\n`import requests  # Search GitHub's repositories for popular Python projects response = requests.get(     \"https://api.github.com/search/repositories\",     params={\"q\": \"language:python\", \"sort\": \"stars\", \"order\": \"desc\"}, )  # Inspect some attributes of the first three repositories json_response = response.json() popular_repositories = json_response[\"items\"] for repo in popular_repositories[:3]:     print(f\"Name: {repo['name']}\")     print(f\"Description: {repo['description']}\")     print(f\"Stars: {repo['stargazers_count']}\")     print()`\n\nBy passing a dictionary to the `params` parameter of `get()`, you’re able to modify the results that come back from the search API.\n\nYou can pass `params` to `get()` in the form of a dictionary, as you’ve just done, or as a list of tuples:\n\nPython\n\n`>>> import requests  >>> requests.get( ...     \"https://api.github.com/search/repositories\", ...     [(\"q\", \"language:python\"), (\"sort\", \"stars\"), (\"order\", \"desc\")], ... ) <Response [200]>`\n\nYou can even pass the values as `bytes`:\n\nPython\n\n`>>> requests.get( ...     \"https://api.github.com/search/repositories\", ...     params=b\"q=language:python&sort=stars&order=desc\", ... ) <Response [200]>`\n\nQuery strings are useful for parameterizing `GET` requests. Another way to customize your requests is by adding or modifying the headers that you send.\n\nRequest Headers[](https://realpython.com/python-requests/#request-headers \"Permanent link\")\n\n--------------------------------------------------------------------------------------------\n\nTo customize headers, you pass a dictionary of HTTP headers to `get()` using the `headers` parameter. For example, you can change your previous search request to highlight matching search terms in the results by specifying the `text-match` media type in the `Accept` header:\n\nPython `text_matches.py`\n\n``import requests  response = requests.get(     \"https://api.github.com/search/repositories\",     params={\"q\": '\"real python\"'},     headers={\"Accept\": \"application/vnd.github.text-match+json\"}, )  # View the new `text-matches` list which provides information # about your search term within the results json_response = response.json() first_repository = json_response[\"items\"][0] print(first_repository[\"text_matches\"][0][\"matches\"])``\n\nThe `Accept` header tells the server what content types your application can handle. In this case, since you’re expecting the matching search terms to be highlighted, you’re using the header value `application/vnd.github.text-match+json`, which is a proprietary GitHub `Accept` header where the content is a special JSON format.\n\nIf you run this code, then you’ll get a result similar to the one shown below:\n\nShell\n\n`$ python text_matches.py [{'text': 'Real Python', 'indices': [23, 34]}]`\n\nBefore you learn more ways to customize requests, you’ll broaden your horizons by exploring other HTTP methods.\n\nOther HTTP Methods[](https://realpython.com/python-requests/#other-http-methods \"Permanent link\")\n\n--------------------------------------------------------------------------------------------------\n\nAside from `GET`, other popular HTTP methods include `POST`, `PUT`, `DELETE`, `HEAD`, `PATCH`, and `OPTIONS`. For each of these HTTP methods, Requests provides a function, with a similar signature to `get()`.\n\n**Note:** To try out these HTTP methods, you’ll make requests to [httpbin.org](https://httpbin.org/)\n. The httpbin service is a great resource created by the original author of Requests, [Kenneth Reitz](https://realpython.com/interview-kenneth-reitz/)\n. The service accepts test requests and responds with data about the requests.\n\nYou’ll notice that Requests provides an intuitive interface to all the mentioned HTTP methods:\n\nPython\n\n`>>> import requests  >>> requests.get(\"https://httpbin.org/get\") <Response [200]> >>> requests.post(\"https://httpbin.org/post\", data={\"key\": \"value\"}) <Response [200]> >>> requests.put(\"https://httpbin.org/put\", data={\"key\": \"value\"}) <Response [200]> >>> requests.delete(\"https://httpbin.org/delete\") <Response [200]> >>> requests.head(\"https://httpbin.org/get\") <Response [200]> >>> requests.patch(\"https://httpbin.org/patch\", data={\"key\": \"value\"}) <Response [200]> >>> requests.options(\"https://httpbin.org/get\") <Response [200]>`\n\nIn the example code above, you called each function to make a request to the httpbin service using the corresponding HTTP method.\n\n**Note:** All of these functions are high-level shortcuts to [`requests.request()`](https://requests.readthedocs.io/en/latest/api/#requests.request)\n, passing the name of the relevant HTTP method:\n\nPython\n\n`>>> requests.request(\"GET\", \"https://httpbin.org/get\") <Response [200]>`\n\nYou could use the equivalent lower-level function call, but the power of Python’s Requests library lies in its human-friendly high-level interface.\n\nYou can inspect the responses in the same way as you did before:\n\nPython\n\n`>>> response = requests.head(\"https://httpbin.org/get\") >>> response.headers[\"Content-Type\"] 'application/json'  >>> response = requests.delete(\"https://httpbin.org/delete\") >>> json_response = response.json() >>> json_response[\"args\"] {}`\n\nHeaders, response bodies, status codes, and more are returned in the `Response` for each method.\n\nNext you’ll take a closer look at the `POST`, `PUT`, and `PATCH` methods and learn how they differ from the other request types.\n\n[Remove ads](https://realpython.com/account/join/)\n\nThe Message Body[](https://realpython.com/python-requests/#the-message-body \"Permanent link\")\n\n----------------------------------------------------------------------------------------------\n\nAccording to the HTTP specification, `POST`, `PUT`, and the less common `PATCH` requests pass their data through the message body rather than through parameters in the query string. Using Requests, you’ll pass the payload to the corresponding function’s `data` parameter.\n\n`data` takes a dictionary, a list of tuples, bytes, or a file-like object. You’ll want to adapt the data that send in the body of your request to the specific needs of the service that you’re interacting with.\n\nFor example, if your request’s content type is `application/x-www-form-urlencoded`, then you can send the form data as a dictionary:\n\nPython\n\n`>>> import requests  >>> requests.post(\"https://httpbin.org/post\", data={\"key\": \"value\"}) <Response [200]>`\n\nYou can also send that same data as a list of tuples:\n\nPython\n\n`>>> requests.post(\"https://httpbin.org/post\", data=[(\"key\", \"value\")]) <Response [200]>`\n\nIf, however, you need to send JSON data, then you can use the `json` parameter. When you pass JSON data via `json`, Requests will serialize your data and add the correct `Content-Type` header for you.\n\nLike you learned earlier, the httpbin service accepts test requests and responds with data about the requests. For instance, you can use it to inspect a basic `POST` request:\n\nPython\n\n`>>> response = requests.post(\"https://httpbin.org/post\", json={\"key\": \"value\"}) >>> json_response = response.json() >>> json_response[\"data\"] '{\"key\": \"value\"}' >>> json_response[\"headers\"][\"Content-Type\"] 'application/json'`\n\nYou can see from the response that the server received your request data and headers as you sent them. Requests also provides this information to you in the form of a `PreparedRequest` that you’ll inspect in more detail in the next section.\n\nRequest Inspection[](https://realpython.com/python-requests/#request-inspection \"Permanent link\")\n\n--------------------------------------------------------------------------------------------------\n\nWhen you make a request, the Requests library prepares the request before actually sending it to the destination server. Request preparation includes things like validating headers and serializing JSON content.\n\nYou can view the `PreparedRequest` object by accessing `.request` on a `Response` object:\n\nPython\n\n`>>> import requests  >>> response = requests.post(\"https://httpbin.org/post\", json={\"key\":\"value\"})  >>> response.request.headers[\"Content-Type\"] 'application/json' >>> response.request.url 'https://httpbin.org/post' >>> response.request.body b'{\"key\": \"value\"}'`\n\nInspecting `PreparedRequest` gives you access to all kinds of information about the request being made, such as payload, URL, headers, authentication, and more.\n\nSo far, you’ve made a lot of different kinds of requests, but they’ve all had one thing in common: they’re unauthenticated requests to public APIs. Many services you may come across will want you to authenticate in some way.\n\nAuthentication[](https://realpython.com/python-requests/#authentication \"Permanent link\")\n\n------------------------------------------------------------------------------------------\n\nAuthentication helps a service understand who you are. Typically, you provide your credentials to a server by passing data through the `Authorization` header or a custom header defined by the service. All the functions of Requests that you’ve seen to this point provide a parameter called `auth`, which allows you to pass your credentials:\n\nPython\n\n`>>> import requests  >>> response = requests.get( ...     \"https://httpbin.org/basic-auth/user/passwd\", ...     auth=(\"user\", \"passwd\") ... )  >>> response.status_code 200 >>> response.request.headers[\"Authorization\"] 'Basic dXNlcjpwYXNzd2Q='`\n\nThe request succeeds if the credentials that you pass in the tuple to `auth` are valid.\n\nWhen you pass your credentials in a tuple to the `auth` parameter, Requests applies the credentials using HTTP’s [Basic access authentication scheme](https://en.wikipedia.org/wiki/Basic_access_authentication)\n under the hood.\n\nThe Basic Authentication SchemeShow/Hide\n\nYou may wonder where the string `Basic dXNlcjpwYXNzd2Q=` that Requests set as the value for your `Authorization` header comes from. In short, it’s a Base64-encoded string of the username and password with the prefix `\"Basic \"`:\n\n1.  First, Requests combines the username and password that you provided, putting a colon in between them. So for the username `\"user\"` and password `\"passwd\"`, this becomes `\"user:passwd\"`.\n    \n2.  Then, Requests [encodes this string in Base64](https://github.com/psf/requests/blob/7a13c041dbef42f9f3feb14110f02626f6892e9a/src/requests/auth.py#L62-L64)\n     using `base64.b64encode()`. The encoding converts the `\"user:passwd\"` string to `\"dXNlcjpwYXNzd2Q=\"`.\n    \n3.  Finally, Requests adds `\"Basic \"` in front of this Base64 string.\n    \n\nThis is how the final value for the `Authorization` header becomes `Basic dXNlcjpwYXNzd2Q=` in the example shown above.\n\nHTTP Basic authentication isn’t very secure, because you can decode the username and password from the Base64 string. That’s why it’s important to always send these requests over [HTTPS](https://en.wikipedia.org/wiki/HTTPS)\n, which provides an additional layer of security by encrypting the entire HTTP request.\n\nYou could make the same request by passing explicit Basic authentication credentials using `HTTPBasicAuth`:\n\nPython\n\n`>>> from requests.auth import HTTPBasicAuth >>> requests.get( ...     \"https://httpbin.org/basic-auth/user/passwd\", ...     auth=HTTPBasicAuth(\"user\", \"passwd\") ... ) <Response [200]>`\n\nThough you don’t need to be explicit for Basic authentication, you may want to authenticate using another method. Requests provides [other methods of authentication](https://requests.readthedocs.io/en/latest/api/#authentication)\n out of the box, such as `HTTPDigestAuth` and `HTTPProxyAuth`.\n\nA real-world example of an API that requires authentication is GitHub’s [authenticated user](https://docs.github.com/en/rest/users/users/#get-the-authenticated-user)\n API. This endpoint provides information about the authenticated user’s profile.\n\nIf you try to make a request without credentials, then you’ll see that the status code is `401 Unauthorized`:\n\nPython\n\n`>>> requests.get(\"https://api.github.com/user\") <Response [401]>`\n\nIf you don’t provide authentication credentials when accessing a service that requires them, then you’ll get an HTTP error code as a response.\n\nTo make a request to GitHub’s authenticated user API, you first need to [generate a personal access token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens#creating-a-personal-access-token-classic)\n with the [_read:user_ scope](https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/scopes-for-oauth-apps#available-scopes)\n. Then you can pass this token as the second element in a tuple to `get()`:\n\nPython\n\n`>>> import requests  >>> token = \"<YOUR_GITHUB_PA_TOKEN>\" >>> response = requests.get( ...     \"https://api.github.com/user\", ...     auth=(\"\", token) ... ) >>> response.status_code 200`\n\nLike you learned previously, this approach passes the credentials to `HTTPBasicAuth`, which expects a username and a password and sends the credentials as a Base64-encoded string with the prefix `\"Basic \"`:\n\nPython\n\n`>>> response.request.headers[\"Authorization\"] 'Basic OmdocF92dkd...WpremM0SGRuUGY='`\n\nThis works, but it’s not the right way to [authenticate with a Bearer token](https://docs.github.com/en/rest/authentication/authenticating-to-the-rest-api?apiVersion=2022-11-28#about-authentication)\n—and using an empty string input for the superfluous username is awkward.\n\nWith Requests, you can supply your own authentication mechanism to fix that. To try this out, create a subclass of `AuthBase` and implement `.__call__()`:\n\nPython `custom_token_auth.py`\n\n`from requests.auth import AuthBase  class TokenAuth(AuthBase):     \"\"\"Implements a token authentication scheme.\"\"\"      def __init__(self, token):         self.token = token      def __call__(self, request):         \"\"\"Attach an API token to the Authorization header.\"\"\"         request.headers[\"Authorization\"] = f\"Bearer {self.token}\"         return request`\n\nHere, your custom `TokenAuth` mechanism receives a token, then includes that token in the `Authorization` header of your request, also setting the recommended `\"Bearer \"` prefix to the string.\n\nYou can now use this custom token authentication to make your call to GitHub’s authenticated user API:\n\nPython\n\n`>>> import requests >>> from custom_token_auth import TokenAuth  >>> token = \"<YOUR_GITHUB_PA_TOKEN>\" >>> response = requests.get( ...     \"https://api.github.com/user\", ...     auth=TokenAuth(token) ... )  >>> response.status_code 200 >>> response.request.headers[\"Authorization\"] 'Bearer ghp_b...Tx'`\n\nYour custom `TokenAuth` created a well-formatted string for the `Authorization` header. You can now use this more intuitive way of interacting with a token-based authentication scheme such as the one that parts of GitHub’s API require.\n\n**Note:** While you could construct the authentication string outside of a custom authentication class and pass it directly with `headers`, this appoach is [discouraged](https://github.com/psf/requests/issues/2062#issuecomment-44095986)\n because it can lead to [unexpected behavior](https://github.com/psf/requests/issues/2066)\n.\n\nWhen you attempt to set your authentication credentials directly using `headers`, then Requests may internally overwrite your input. This can happen, for example, if you have a [`.netrc` file](https://www.gnu.org/software/inetutils/manual/html_node/The-_002enetrc-file.html)\n that provides authentication credentials. Requests will attempt to [get the credentials from the `.netrc` file](https://docs.python-requests.org/en/latest/user/authentication/#netrc-authentication)\n if you don’t provide an authentication method using `auth=`.\n\nBad authentication mechanisms can lead to security vulnerabilities. Unless a service requires a custom authentication mechanism for some reason, you’ll always want to use a tried-and-true auth scheme like the built-in Basic authentication or [OAuth](https://docs.python-requests.org/en/latest/user/authentication/#oauth-1-authentication)\n, for example through [Requests-OAuthlib](https://requests-oauthlib.readthedocs.io/en/latest/)\n.\n\nWhile you’re thinking about security, consider dealing with SSL certificates using Requests.\n\n[Remove ads](https://realpython.com/account/join/)\n\nSSL Certificate Verification[](https://realpython.com/python-requests/#ssl-certificate-verification \"Permanent link\")\n\n----------------------------------------------------------------------------------------------------------------------\n\nAnytime the data that you’re trying to send or receive is sensitive, security is important. The way that you communicate with secure sites over HTTP is by establishing an encrypted connection using SSL, which means that verifying the target server’s SSL certificate is critical.\n\nThe good news is that Requests does this for you by default. However, there are some cases where you might want to change this behavior.\n\nIf you want to disable SSL certificate verification, then you pass `False` to the `verify` parameter of the request function:\n\nPython\n\n`>>> import requests  >>> requests.get(\"https://api.github.com\", verify=False) InsecureRequestWarning: Unverified HTTPS request is being made to host ⮑ 'api.github.com'. Adding certificate verification is strongly advised. ⮑ See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#tls-warnings ⮑  warnings.warn( <Response [200]>`\n\nRequests even warns you when you’re making an insecure request to help you keep your data safe!\n\n**Note:** [Requests uses a package called `certifi`](https://requests.readthedocs.io/en/latest/user/advanced/#ca-certificates)\n to provide certificate authorities. This lets Requests know which authorities it can trust. Therefore, you should update `certifi` frequently to keep your connections as secure as possible.\n\nNow that you know how to make all sorts of HTTP requests using Requests, authenticated or not, you may wonder about how you can make sure that your program works as quickly as possible.\n\nIn the next section, you’ll learn about a few ways that you can improve performance with the help of Requests.\n\nPerformance[](https://realpython.com/python-requests/#performance \"Permanent link\")\n\n------------------------------------------------------------------------------------\n\nWhen using Requests, especially in a production application environment, it’s important to consider performance implications. Features like timeout control, sessions, and retry limits can help you keep your application running smoothly.\n\n### Timeouts[](https://realpython.com/python-requests/#timeouts \"Permanent link\")\n\nWhen you make an inline request to an external service, your system will need to wait for the response before moving on. If your application waits too long for that response, requests to your service could back up, your user experience could suffer, or your background jobs could hang.\n\nBy default, Requests will wait indefinitely on the response, so you should almost always specify a timeout duration to prevent these issues from happening. To set the request’s timeout, use the `timeout` parameter. `timeout` can be an integer or float representing the number of seconds to wait on a response before timing out:\n\nPython\n\n`>>> requests.get(\"https://api.github.com\", timeout=1) <Response [200]> >>> requests.get(\"https://api.github.com\", timeout=3.05) <Response [200]>`\n\nIn the first request, the request will time out after 1 second. In the second request, the request will time out after 3.05 seconds.\n\n[You can also pass a tuple](https://requests.readthedocs.io/en/latest/user/advanced/#timeouts)\n to `timeout` with the following two elements:\n\n1.  **Connect timeout**: The time it allows for the client to establish a connection to the server\n2.  **Read timeout**: The time it’ll wait on a response once your client has established a connection\n\nBoth of these elements should be numbers, and can be of type `int` or `float`:\n\nPython\n\n`>>> requests.get(\"https://api.github.com\", timeout=(3.05, 5)) <Response [200]>`\n\nIf the request establishes a connection within 3.05 seconds and receives data within 5 seconds of the connection being established, then the response will be returned as it was before. If the request times out, then the function will raise a `Timeout` exception:\n\nPython `timeout_catcher.py`\n\n`import requests from requests.exceptions import Timeout  try:     response = requests.get(\"https://api.github.com\", timeout=(3.05, 5)) except Timeout:     print(\"The request timed out\") else:     print(\"The request did not time out\")`\n\nYour program can [catch the `Timeout` exception](https://realpython.com/python-catch-multiple-exceptions/)\n and respond accordingly.\n\n[Remove ads](https://realpython.com/account/join/)\n\n### The Session Object[](https://realpython.com/python-requests/#the-session-object \"Permanent link\")\n\nUntil now, you’ve been dealing with high-level `requests` APIs such as `get()` and `post()`. These functions are abstractions of what’s going on when you make your requests. They hide implementation details, such as how connections are managed, so that you don’t have to worry about them.\n\nUnderneath those abstractions is a class called `Session`. If you need to fine-tune your control over how requests are being made or improve the performance of your requests, you may need to use a `Session` instance directly.\n\nSessions are used to persist parameters across requests. For example, if you want to use the same authentication across multiple requests, then you can use a session:\n\nPython `persist_info_with_session.py`\n\n `1import requests  2from custom_token_auth import TokenAuth  3  4TOKEN = \"<YOUR_GITHUB_PA_TOKEN>\"  5  6with requests.Session() as session:  7    session.auth = TokenAuth(TOKEN)  8  9    first_response = session.get(\"https://api.github.com/user\") 10    second_response = session.get(\"https://api.github.com/user\") 11 12print(first_response.headers) 13print(second_response.json())`\n\nIn this code example, you use a [context manager](https://realpython.com/python-with-statement/)\n to ensure that the session releases the resources when it doesn’t need them anymore.\n\nIn line 7, you log in using your custom `TokenAuth`. You only need to log in once per session, and then you can make multiple authenticated requests. Requests will persist the credentials while the session exists.\n\nYou then make two requests to the authenticated user API in lines 9 and 10 using `session.get()` instead of `get()`.\n\nThe primary performance optimization of sessions comes in the form of persistent connections. When your app makes a connection to a server using a `Session`, it keeps that connection around in a connection pool. When your app wants to connect to the same server again, it’ll reuse a connection from the pool rather than establishing a new one.\n\n### Max Retries[](https://realpython.com/python-requests/#max-retries \"Permanent link\")\n\nWhen a request fails, you may want your application to retry the same request. However, Requests won’t do this for you by default. To apply this functionality, you need to implement a custom [transport adapter](https://requests.readthedocs.io/en/latest/user/advanced/#transport-adapters)\n.\n\nTransport adapters let you define a set of configurations for each service that you’re interacting with. For example, say you want all requests to `https://api.github.com` to retry two times before finally raising a `RetryError`. You’d build a transport adapter, set its `max_retries` parameter, and mount it to an existing `Session`:\n\nPython `retry_twice.py`\n\n`import requests from requests.adapters import HTTPAdapter from requests.exceptions import RetryError  github_adapter = HTTPAdapter(max_retries=2) session = requests.Session()  session.mount(\"https://api.github.com\", github_adapter) try:     response = session.get(\"https://api.github.com/\") except RetryError as err:     print(f\"Error: {err}\") finally:     session.close()`\n\nIn this example, you’ve set up your session so that it’ll retry a maximum of two times when your request to GitHub’s API doesn’t work as expected.\n\nWhen you mount the `HTTPAdapter`—in this case, `github_adapter`—to `session`, then `session` will adhere to its configuration for each request to `https://api.github.com`.\n\n**Note:** While the implementation shown above works, you won’t see any effect of the retry behavior unless there’s something wrong with your network connection or GitHub’s servers.\n\nIf you want to play around with code that builds on top of this example, and you’d like to inspect when the retries happen, then you’re in luck. You can download the materials of this tutorial and take a look at `retry_thrice.py`:\n\n**Get Your Code:** [Click here to download the free sample code](https://realpython.com/bonus/python-requests-code/)\n that shows you how to use Python’s Requests library.\n\nThe code in this file improves on the example shown above by using the underlying [`urllib3.util.Retry`](https://urllib3.readthedocs.io/en/stable/reference/urllib3.util.html#urllib3.util.Retry)\n to further customize the retry functionality. It also adds [logging](https://realpython.com/python-logging/)\n to display debugging output, which gives you a chance to monitor when Python attempted the retries.\n\nRequests comes packaged with intuitive implementations for timeouts, transport adapters, and sessions that can help you keep your code efficient and your application resilient.\n\n[Remove ads](https://realpython.com/account/join/)\n\nConclusion[](https://realpython.com/python-requests/#conclusion \"Permanent link\")\n\n----------------------------------------------------------------------------------\n\nNice work, you’ve made it to the end of the tutorial, and you’ve come a long way in increasing your knowledge about Python’s powerful Requests library.\n\n**In this tutorial, you’ve learned how to:**\n\n*   **Make requests** using a variety of different HTTP methods such as `GET`, `POST`, and `PUT`\n*   **Customize your requests** by modifying headers, authentication, query strings, and message bodies\n*   **Inspect the data** you send to the server and the data the server sends back to you\n*   Work with **SSL certificate verification**\n*   Use Requests effectively with `max_retries`, `timeout`, sessions, and transport adapters\n\nBecause you learned how to use Requests, you’re equipped to explore the wide world of web services and build awesome applications using the fascinating data they provide.\n\n**Take the Quiz:** Test your knowledge with our interactive “HTTP Requests With the \"requests\" Library” quiz. You’ll receive a score upon completion to help you track your learning progress:\n\n* * *\n\n[![Python’s Requests Library (Guide)](https://realpython.com/python-requests/format=auto/https://files.realpython.com/media/Python-Requests-Library-Tutorial_Watermarked.3c9dfdc7b014.jpg)](https://realpython.com/quizzes/python-requests/)\n\n**Interactive Quiz**\n\n[HTTP Requests With the \"requests\" Library](https://realpython.com/quizzes/python-requests/)\n\nTest your understanding of the Python \"requests\" library for making HTTP requests and interacting with web services.\n\nMark as Completed\n\n[](https://realpython.com/feedback/survey/article/python-requests/liked/?from=article-footer \"Liked it\")\n[](https://realpython.com/feedback/survey/article/python-requests/disliked/?from=article-footer \"Disliked it\")\n\nShare\n\nWatch Now This tutorial has a related video course created by the Real Python team. Watch it together with the written tutorial to deepen your understanding: [**Making HTTP Requests With Python**](https://realpython.com/courses/python-requests/)\n\n🐍 Python Tricks 💌\n\nGet a short & sweet **Python Trick** delivered to your inbox every couple of days. No spam ever. Unsubscribe any time. Curated by the Real Python team.\n\n![Python Tricks Dictionary Merge](https://realpython.com/static/pytrick-dict-merge.4201a0125a5e.png)\n\n \n\nSend Me Python Tricks »\n\nAbout **Alex Ronquillo**\n\n [![Alex Ronquillo](https://realpython.com/python-requests/format=auto/https://files.realpython.com/media/IMG_0116.f88cbfca15da.jpg) ![Alex Ronquillo](https://realpython.com/python-requests/format=auto/https://files.realpython.com/media/IMG_0116.f88cbfca15da.jpg)](https://realpython.com/team/aronquillo/)\n\nAlex Ronquillo is a Software Engineer at thelab. He’s an avid Pythonista who is also passionate about writing and game development.\n\n[» More about Alex](https://realpython.com/team/aronquillo/)\n\n* * *\n\n_Each tutorial at Real Python is created by a team of developers so that it meets our high quality standards. The team members who worked on this tutorial are:_\n\n[![Aldren Santos](https://realpython.com/python-requests/format=auto/https://files.realpython.com/media/PP.9b8b026f75b8.jpg)](https://realpython.com/team/asantos/)\n\n[Aldren](https://realpython.com/team/asantos/)\n\n[![Brad Solomon](https://realpython.com/python-requests/format=auto/https://files.realpython.com/media/Screen_Shot_2021-09-28_at_3.13.21_PM.3310c56e90bd.jpg)](https://realpython.com/team/bsolomon/)\n\n[Brad](https://realpython.com/team/bsolomon/)\n\n[![Geir Arne Hjelle](https://realpython.com/python-requests/format=auto/https://files.realpython.com/media/gahjelle.470149ee709e.jpg)](https://realpython.com/team/gahjelle/)\n\n[Geir Arne](https://realpython.com/team/gahjelle/)\n\n[![Joanna Jablonski](https://realpython.com/python-requests/format=auto/https://files.realpython.com/media/jjablonksi-avatar.e37c4f83308e.jpg)](https://realpython.com/team/jjablonski/)\n\n[Joanna](https://realpython.com/team/jjablonski/)\n\n[![Kate Finegan](https://realpython.com/python-requests/format=auto/https://files.realpython.com/media/VZxEtUor_400x400.7169c68e3950.jpg)](https://realpython.com/team/kfinegan/)\n\n[Kate](https://realpython.com/team/kfinegan/)\n\n[![Martin Breuss](https://realpython.com/python-requests/format=auto/https://files.realpython.com/media/martin_breuss_python_square.efb2b07faf9f.jpg)](https://realpython.com/team/mbreuss/)\n\n[Martin](https://realpython.com/team/mbreuss/)\n\nMaster Real-World Python Skills With Unlimited Access to Real Python\n\n![Locked learning resources](https://realpython.com/static/videos/lesson-locked.f5105cfd26db.svg)\n\n**Join us and get access to thousands of tutorials, hands-on video courses, and a community of expert Pythonistas:**\n\n[Level Up Your Python Skills »](https://realpython.com/account/join/?utm_source=rp_article_footer&utm_content=python-requests)\n\nMaster Real-World Python Skills  \nWith Unlimited Access to Real Python\n\n![Locked learning resources](https://realpython.com/static/videos/lesson-locked.f5105cfd26db.svg)\n\n**Join us and get access to thousands of tutorials, hands-on video courses, and a community of expert Pythonistas:**\n\n[Level Up Your Python Skills »](https://realpython.com/account/join/?utm_source=rp_article_footer&utm_content=python-requests)\n\nWhat Do You Think?\n\n**Rate this article:**\n\n[](https://realpython.com/feedback/survey/article/python-requests/liked/?from=article-comments \"Liked it\")\n[](https://realpython.com/feedback/survey/article/python-requests/disliked/?from=article-comments \"Disliked it\")\n\n[LinkedIn](https://www.linkedin.com/sharing/share-offsite/?url=https%3A%2F%2Frealpython.com%2Fpython-requests%2F)\n [Twitter](https://twitter.com/intent/tweet/?text=Interesting%20Python%20article%20on%20%40realpython%3A%20Python%27s%20Requests%20Library%20%28Guide%29&url=https%3A%2F%2Frealpython.com%2Fpython-requests%2F)\n [Bluesky](https://bsky.app/intent/compose?text=Interesting%20Python%20article%20on%20%40realpython.com%3A%20Python%27s%20Requests%20Library%20%28Guide%29%20https%3A%2F%2Frealpython.com%2Fpython-requests%2F)\n [Facebook](https://facebook.com/sharer/sharer.php?u=https%3A%2F%2Frealpython.com%2Fpython-requests%2F)\n [Email](mailto:?subject=Python%20article%20for%20you&body=Python%27s%20Requests%20Library%20%28Guide%29%20on%20Real%20Python%0A%0Ahttps%3A%2F%2Frealpython.com%2Fpython-requests%2F%0A)\n\nWhat’s your #1 takeaway or favorite thing you learned? How are you going to put your newfound skills to use? Leave a comment below and let us know.\n\n**Commenting Tips:** The most useful comments are those written with the goal of learning from or helping out other students. [Get tips for asking good questions](https://realpython.com/python-beginner-tips/#tip-9-ask-good-questions)\n and [get answers to common questions in our support portal](https://support.realpython.com/)\n.\n\n* * *\n\nLooking for a real-time conversation? Visit the [Real Python Community Chat](https://realpython.com/community/)\n or join the next [“Office Hours” Live Q&A Session](https://realpython.com/office-hours/)\n. Happy Pythoning!\n\nKeep Learning\n\nRelated Topics: [intermediate](https://realpython.com/tutorials/intermediate/)\n [web-dev](https://realpython.com/tutorials/web-dev/)\n\nRecommended Video Course: [Making HTTP Requests With Python](https://realpython.com/courses/python-requests/)\n\nRelated Tutorials:\n\n*   [Beautiful Soup: Build a Web Scraper With Python](https://realpython.com/beautiful-soup-web-scraper-python/?utm_source=realpython&utm_medium=web&utm_campaign=related-post&utm_content=python-requests)\n    \n*   [Python and REST APIs: Interacting With Web Services](https://realpython.com/api-integration-in-python/?utm_source=realpython&utm_medium=web&utm_campaign=related-post&utm_content=python-requests)\n    \n*   [Working With JSON Data in Python](https://realpython.com/python-json/?utm_source=realpython&utm_medium=web&utm_campaign=related-post&utm_content=python-requests)\n    \n*   [Logging in Python](https://realpython.com/python-logging/?utm_source=realpython&utm_medium=web&utm_campaign=related-post&utm_content=python-requests)\n    \n*   [A Practical Introduction to Web Scraping in Python](https://realpython.com/python-web-scraping-practical-introduction/?utm_source=realpython&utm_medium=web&utm_campaign=related-post&utm_content=python-requests)","metadata":{"og:title":"Python's Requests Library (Guide) – Real Python","og:description":"In this tutorial on Python's Requests library, you'll see some of the most useful features that Requests has to offer as well as ways to customize and optimize those features. You'll learn how to use requests efficiently and stop requests to external services from slowing down your application.","title":"Python's Requests Library (Guide) – Real Python","author":"Real Python","robots":"max-image-preview:large","ogUrl":"https://realpython.com/python-requests/","favicon":"https://realpython.com/static/favicon.68cbf4197b0c.png","viewport":"width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover","og:type":"article","keywords":"","ogImage":"https://files.realpython.com/media/Python-Requests-Library-Tutorial_Watermarked.3c9dfdc7b014.jpg","twitter:creator":"@realpython","twitter:card":"summary_large_image","twitter:image":"https://files.realpython.com/media/Python-Requests-Library-Tutorial_Watermarked.3c9dfdc7b014.jpg","twitter:site":"@realpython","og:url":"https://realpython.com/python-requests/","ogTitle":"Python's Requests Library (Guide) – Real Python","ogDescription":"In this tutorial on Python's Requests library, you'll see some of the most useful features that Requests has to offer as well as ways to customize and optimize those features. You'll learn how to use requests efficiently and stop requests to external services from slowing down your application.","description":"In this tutorial on Python's Requests library, you'll see some of the most useful features that Requests has to offer as well as ways to customize and optimize those features. You'll learn how to use requests efficiently and stop requests to external services from slowing down your application.","language":"en","og:image":"https://files.realpython.com/media/Python-Requests-Library-Tutorial_Watermarked.3c9dfdc7b014.jpg","scrapeId":"b1ac062c-4804-476c-86df-d284981bf0e1","sourceURL":"https://realpython.com/python-requests/","url":"https://realpython.com/python-requests/","statusCode":200}}]}