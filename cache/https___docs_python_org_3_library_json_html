{"success":true,"status":"completed","completed":1,"total":1,"creditsUsed":1,"expiresAt":"2025-03-05T20:54:50.000Z","data":[{"markdown":"### Navigation\n\n*   [index](https://docs.python.org/3/genindex.html \"General Index\")\n    \n*   [modules](https://docs.python.org/3/py-modindex.html \"Python Module Index\")\n     |\n*   [next](https://docs.python.org/3/library/mailbox.html \"mailbox — Manipulate mailboxes in various formats\")\n     |\n*   [previous](https://docs.python.org/3/library/email.iterators.html \"email.iterators: Iterators\")\n     |\n*   ![Python logo](https://docs.python.org/3/_static/py.svg)\n*   [Python](https://www.python.org/)\n     »\n*   EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文\n    \n    dev (3.14)3.13.23.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6\n    \n\n*   [3.13.2 Documentation](https://docs.python.org/3/index.html)\n     »\n*   [The Python Standard Library](https://docs.python.org/3/library/index.html)\n     »\n*   [Internet Data Handling](https://docs.python.org/3/library/netdata.html)\n     »\n*   [`json` — JSON encoder and decoder](https://docs.python.org/3/library/json.html)\n    \n*    \n    \n    |\n*   Theme Auto Light Dark |\n\n`json` — JSON encoder and decoder[¶](https://docs.python.org/3/library/json.html#module-json \"Link to this heading\")\n\n=====================================================================================================================\n\n**Source code:** [Lib/json/\\_\\_init\\_\\_.py](https://github.com/python/cpython/tree/3.13/Lib/json/__init__.py)\n\n* * *\n\n[JSON (JavaScript Object Notation)](https://json.org/)\n, specified by [**RFC 7159**](https://datatracker.ietf.org/doc/html/rfc7159.html)\n (which obsoletes [**RFC 4627**](https://datatracker.ietf.org/doc/html/rfc4627.html)\n) and by [ECMA-404](https://ecma-international.org/publications-and-standards/standards/ecma-404/)\n, is a lightweight data interchange format inspired by [JavaScript](https://en.wikipedia.org/wiki/JavaScript)\n object literal syntax (although it is not a strict subset of JavaScript [\\[1\\]](https://docs.python.org/3/library/json.html#rfc-errata)\n ).\n\nWarning\n\nBe cautious when parsing JSON data from untrusted sources. A malicious JSON string may cause the decoder to consume considerable CPU and memory resources. Limiting the size of data to be parsed is recommended.\n\n[`json`](https://docs.python.org/3/library/json.html#module-json \"json: Encode and decode the JSON format.\")\n exposes an API familiar to users of the standard library [`marshal`](https://docs.python.org/3/library/marshal.html#module-marshal \"marshal: Convert Python objects to streams of bytes and back (with different constraints).\")\n and [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle \"pickle: Convert Python objects to streams of bytes and back.\")\n modules.\n\nEncoding basic Python object hierarchies:\n\n\\>>>\n\n\\>>> import json\n\\>>> json.dumps(\\['foo', {'bar': ('baz', None, 1.0, 2)}\\])\n'\\[\"foo\", {\"bar\": \\[\"baz\", null, 1.0, 2\\]}\\]'\n\\>>> print(json.dumps(\"\\\\\"foo\\\\bar\"))\n\"\\\\\"foo\\\\bar\"\n\\>>> print(json.dumps('\\\\u1234'))\n\"\\\\u1234\"\n\\>>> print(json.dumps('\\\\\\\\'))\n\"\\\\\\\\\"\n\\>>> print(json.dumps({\"c\": 0, \"b\": 0, \"a\": 0}, sort\\_keys\\=True))\n{\"a\": 0, \"b\": 0, \"c\": 0}\n\\>>> from io import StringIO\n\\>>> io \\= StringIO()\n\\>>> json.dump(\\['streaming API'\\], io)\n\\>>> io.getvalue()\n'\\[\"streaming API\"\\]'\n\nCompact encoding:\n\n\\>>>\n\n\\>>> import json\n\\>>> json.dumps(\\[1, 2, 3, {'4': 5, '6': 7}\\], separators\\=(',', ':'))\n'\\[1,2,3,{\"4\":5,\"6\":7}\\]'\n\nPretty printing:\n\n\\>>>\n\n\\>>> import json\n\\>>> print(json.dumps({'6': 7, '4': 5}, sort\\_keys\\=True, indent\\=4))\n{\n    \"4\": 5,\n    \"6\": 7\n}\n\nSpecializing JSON object encoding:\n\n\\>>>\n\n\\>>> import json\n\\>>> def custom\\_json(obj):\n...     if isinstance(obj, complex):\n...         return {'\\_\\_complex\\_\\_': True, 'real': obj.real, 'imag': obj.imag}\n...     raise TypeError(f'Cannot serialize object of {type(obj)}')\n...\n\\>>> json.dumps(1 + 2j, default\\=custom\\_json)\n'{\"\\_\\_complex\\_\\_\": true, \"real\": 1.0, \"imag\": 2.0}'\n\nDecoding JSON:\n\n\\>>>\n\n\\>>> import json\n\\>>> json.loads('\\[\"foo\", {\"bar\":\\[\"baz\", null, 1.0, 2\\]}\\]')\n\\['foo', {'bar': \\['baz', None, 1.0, 2\\]}\\]\n\\>>> json.loads('\"\\\\\\\\\"foo\\\\\\\\bar\"')\n'\"foo\\\\x08ar'\n\\>>> from io import StringIO\n\\>>> io \\= StringIO('\\[\"streaming API\"\\]')\n\\>>> json.load(io)\n\\['streaming API'\\]\n\nSpecializing JSON object decoding:\n\n\\>>>\n\n\\>>> import json\n\\>>> def as\\_complex(dct):\n...     if '\\_\\_complex\\_\\_' in dct:\n...         return complex(dct\\['real'\\], dct\\['imag'\\])\n...     return dct\n...\n\\>>> json.loads('{\"\\_\\_complex\\_\\_\": true, \"real\": 1, \"imag\": 2}',\n...     object\\_hook\\=as\\_complex)\n(1+2j)\n\\>>> import decimal\n\\>>> json.loads('1.1', parse\\_float\\=decimal.Decimal)\nDecimal('1.1')\n\nExtending [`JSONEncoder`](https://docs.python.org/3/library/json.html#json.JSONEncoder \"json.JSONEncoder\")\n:\n\n\\>>>\n\n\\>>> import json\n\\>>> class ComplexEncoder(json.JSONEncoder):\n...     def default(self, obj):\n...         if isinstance(obj, complex):\n...             return \\[obj.real, obj.imag\\]\n...         \\# Let the base class default method raise the TypeError\n...         return super().default(obj)\n...\n\\>>> json.dumps(2 + 1j, cls\\=ComplexEncoder)\n'\\[2.0, 1.0\\]'\n\\>>> ComplexEncoder().encode(2 + 1j)\n'\\[2.0, 1.0\\]'\n\\>>> list(ComplexEncoder().iterencode(2 + 1j))\n\\['\\[2.0', ', 1.0', '\\]'\\]\n\nUsing [`json.tool`](https://docs.python.org/3/library/json.html#module-json.tool \"json.tool: A command line to validate and pretty-print JSON.\")\n from the shell to validate and pretty-print:\n\n$ echo '{\"json\":\"obj\"}' | python \\-m json.tool\n{\n    \"json\": \"obj\"\n}\n$ echo '{1.2:3.4}' | python \\-m json.tool\nExpecting property name enclosed in double quotes: line 1 column 2 (char 1)\n\nSee [Command Line Interface](https://docs.python.org/3/library/json.html#json-commandline)\n for detailed documentation.\n\nNote\n\nJSON is a subset of [YAML](https://yaml.org/)\n 1.2. The JSON produced by this module’s default settings (in particular, the default _separators_ value) is also a subset of YAML 1.0 and 1.1. This module can thus also be used as a YAML serializer.\n\nNote\n\nThis module’s encoders and decoders preserve input and output order by default. Order is only lost if the underlying containers are unordered.\n\nBasic Usage[¶](https://docs.python.org/3/library/json.html#basic-usage \"Link to this heading\")\n\n-----------------------------------------------------------------------------------------------\n\njson.dump(_obj_, _fp_, _\\*_, _skipkeys\\=False_, _ensure\\_ascii\\=True_, _check\\_circular\\=True_, _allow\\_nan\\=True_, _cls\\=None_, _indent\\=None_, _separators\\=None_, _default\\=None_, _sort\\_keys\\=False_, _\\*\\*kw_)[¶](https://docs.python.org/3/library/json.html#json.dump \"Link to this definition\")\n\nSerialize _obj_ as a JSON formatted stream to _fp_ (a `.write()`\\-supporting [file-like object](https://docs.python.org/3/glossary.html#term-file-like-object)\n) using this [Python-to-JSON conversion table](https://docs.python.org/3/library/json.html#py-to-json-table)\n.\n\nNote\n\nUnlike [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle \"pickle: Convert Python objects to streams of bytes and back.\")\n and [`marshal`](https://docs.python.org/3/library/marshal.html#module-marshal \"marshal: Convert Python objects to streams of bytes and back (with different constraints).\")\n, JSON is not a framed protocol, so trying to serialize multiple objects with repeated calls to [`dump()`](https://docs.python.org/3/library/json.html#json.dump \"json.dump\")\n using the same _fp_ will result in an invalid JSON file.\n\nParameters:\n\n*   **obj** ([_object_](https://docs.python.org/3/library/functions.html#object \"object\")\n    ) – The Python object to be serialized.\n    \n*   **fp** ([file-like object](https://docs.python.org/3/glossary.html#term-file-like-object)\n    ) – The file-like object _obj_ will be serialized to. The `json` module always produces [`str`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n     objects, not [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"bytes\")\n     objects, therefore `fp.write()` must support [`str`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n     input.\n    \n*   **skipkeys** ([_bool_](https://docs.python.org/3/library/functions.html#bool \"bool\")\n    ) – If `True`, keys that are not of a basic type ([`str`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n    , [`int`](https://docs.python.org/3/library/functions.html#int \"int\")\n    , [`float`](https://docs.python.org/3/library/functions.html#float \"float\")\n    , [`bool`](https://docs.python.org/3/library/functions.html#bool \"bool\")\n    , `None`) will be skipped instead of raising a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError \"TypeError\")\n    . Default `False`.\n    \n*   **ensure\\_ascii** ([_bool_](https://docs.python.org/3/library/functions.html#bool \"bool\")\n    ) – If `True` (the default), the output is guaranteed to have all incoming non-ASCII characters escaped. If `False`, these characters will be outputted as-is.\n    \n*   **check\\_circular** ([_bool_](https://docs.python.org/3/library/functions.html#bool \"bool\")\n    ) – If `False`, the circular reference check for container types is skipped and a circular reference will result in a [`RecursionError`](https://docs.python.org/3/library/exceptions.html#RecursionError \"RecursionError\")\n     (or worse). Default `True`.\n    \n*   **allow\\_nan** ([_bool_](https://docs.python.org/3/library/functions.html#bool \"bool\")\n    ) – If `False`, serialization of out-of-range [`float`](https://docs.python.org/3/library/functions.html#float \"float\")\n     values (`nan`, `inf`, `-inf`) will result in a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError \"ValueError\")\n    , in strict compliance with the JSON specification. If `True` (the default), their JavaScript equivalents (`NaN`, `Infinity`, `-Infinity`) are used.\n    \n*   **cls** (a [`JSONEncoder`](https://docs.python.org/3/library/json.html#json.JSONEncoder \"json.JSONEncoder\")\n     subclass) – If set, a custom JSON encoder with the [`default()`](https://docs.python.org/3/library/json.html#json.JSONEncoder.default \"json.JSONEncoder.default\")\n     method overridden, for serializing into custom datatypes. If `None` (the default), `JSONEncoder` is used.\n    \n*   **indent** ([_int_](https://docs.python.org/3/library/functions.html#int \"int\")\n     _|_ [_str_](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n     _|_ _None_) – If a positive integer or string, JSON array elements and object members will be pretty-printed with that indent level. A positive integer indents that many spaces per level; a string (such as `\"\\t\"`) is used to indent each level. If zero, negative, or `\"\"` (the empty string), only newlines are inserted. If `None` (the default), the most compact representation is used.\n    \n*   **separators** ([_tuple_](https://docs.python.org/3/library/stdtypes.html#tuple \"tuple\")\n     _|_ _None_) – A two-tuple: `(item_separator, key_separator)`. If `None` (the default), _separators_ defaults to `(', ', ': ')` if _indent_ is `None`, and `(',', ': ')` otherwise. For the most compact JSON, specify `(',', ':')` to eliminate whitespace.\n    \n*   **default** ([callable](https://docs.python.org/3/glossary.html#term-callable)\n     | None) – A function that is called for objects that can’t otherwise be serialized. It should return a JSON encodable version of the object or raise a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError \"TypeError\")\n    . If `None` (the default), `TypeError` is raised.\n    \n*   **sort\\_keys** ([_bool_](https://docs.python.org/3/library/functions.html#bool \"bool\")\n    ) – If `True`, dictionaries will be outputted sorted by key. Default `False`.\n    \n\nChanged in version 3.2: Allow strings for _indent_ in addition to integers.\n\nChanged in version 3.4: Use `(',', ': ')` as default if _indent_ is not `None`.\n\nChanged in version 3.6: All optional parameters are now [keyword-only](https://docs.python.org/3/glossary.html#keyword-only-parameter)\n.\n\njson.dumps(_obj_, _\\*_, _skipkeys\\=False_, _ensure\\_ascii\\=True_, _check\\_circular\\=True_, _allow\\_nan\\=True_, _cls\\=None_, _indent\\=None_, _separators\\=None_, _default\\=None_, _sort\\_keys\\=False_, _\\*\\*kw_)[¶](https://docs.python.org/3/library/json.html#json.dumps \"Link to this definition\")\n\nSerialize _obj_ to a JSON formatted [`str`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n using this [conversion table](https://docs.python.org/3/library/json.html#py-to-json-table)\n. The arguments have the same meaning as in [`dump()`](https://docs.python.org/3/library/json.html#json.dump \"json.dump\")\n.\n\nNote\n\nKeys in key/value pairs of JSON are always of the type [`str`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n. When a dictionary is converted into JSON, all the keys of the dictionary are coerced to strings. As a result of this, if a dictionary is converted into JSON and then back into a dictionary, the dictionary may not equal the original one. That is, `loads(dumps(x)) != x` if x has non-string keys.\n\njson.load(_fp_, _\\*_, _cls\\=None_, _object\\_hook\\=None_, _parse\\_float\\=None_, _parse\\_int\\=None_, _parse\\_constant\\=None_, _object\\_pairs\\_hook\\=None_, _\\*\\*kw_)[¶](https://docs.python.org/3/library/json.html#json.load \"Link to this definition\")\n\nDeserialize _fp_ to a Python object using the [JSON-to-Python conversion table](https://docs.python.org/3/library/json.html#json-to-py-table)\n.\n\nParameters:\n\n*   **fp** ([file-like object](https://docs.python.org/3/glossary.html#term-file-like-object)\n    ) – A `.read()`\\-supporting [text file](https://docs.python.org/3/glossary.html#term-text-file)\n     or [binary file](https://docs.python.org/3/glossary.html#term-binary-file)\n     containing the JSON document to be deserialized.\n    \n*   **cls** (a [`JSONDecoder`](https://docs.python.org/3/library/json.html#json.JSONDecoder \"json.JSONDecoder\")\n     subclass) – If set, a custom JSON decoder. Additional keyword arguments to `load()` will be passed to the constructor of _cls_. If `None` (the default), `JSONDecoder` is used.\n    \n*   **object\\_hook** ([callable](https://docs.python.org/3/glossary.html#term-callable)\n     | None) – If set, a function that is called with the result of any object literal decoded (a [`dict`](https://docs.python.org/3/library/stdtypes.html#dict \"dict\")\n    ). The return value of this function will be used instead of the [`dict`](https://docs.python.org/3/library/stdtypes.html#dict \"dict\")\n    . This feature can be used to implement custom decoders, for example [JSON-RPC](https://www.jsonrpc.org/)\n     class hinting. Default `None`.\n    \n*   **object\\_pairs\\_hook** ([callable](https://docs.python.org/3/glossary.html#term-callable)\n     | None) – If set, a function that is called with the result of any object literal decoded with an ordered list of pairs. The return value of this function will be used instead of the [`dict`](https://docs.python.org/3/library/stdtypes.html#dict \"dict\")\n    . This feature can be used to implement custom decoders. If _object\\_hook_ is also set, _object\\_pairs\\_hook_ takes priority. Default `None`.\n    \n*   **parse\\_float** ([callable](https://docs.python.org/3/glossary.html#term-callable)\n     | None) – If set, a function that is called with the string of every JSON float to be decoded. If `None` (the default), it is equivalent to `float(num_str)`. This can be used to parse JSON floats into custom datatypes, for example [`decimal.Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal \"decimal.Decimal\")\n    .\n    \n*   **parse\\_int** ([callable](https://docs.python.org/3/glossary.html#term-callable)\n     | None) – If set, a function that is called with the string of every JSON int to be decoded. If `None` (the default), it is equivalent to `int(num_str)`. This can be used to parse JSON integers into custom datatypes, for example [`float`](https://docs.python.org/3/library/functions.html#float \"float\")\n    .\n    \n*   **parse\\_constant** ([callable](https://docs.python.org/3/glossary.html#term-callable)\n     | None) – If set, a function that is called with one of the following strings: `'-Infinity'`, `'Infinity'`, or `'NaN'`. This can be used to raise an exception if invalid JSON numbers are encountered. Default `None`.\n    \n\nRaises:\n\n*   [**JSONDecodeError**](https://docs.python.org/3/library/json.html#json.JSONDecodeError \"json.JSONDecodeError\")\n     – When the data being deserialized is not a valid JSON document.\n    \n*   [**UnicodeDecodeError**](https://docs.python.org/3/library/exceptions.html#UnicodeDecodeError \"UnicodeDecodeError\")\n     – When the data being deserialized does not contain UTF-8, UTF-16 or UTF-32 encoded data.\n    \n\nChanged in version 3.1:\n\n*   Added the optional _object\\_pairs\\_hook_ parameter.\n    \n*   _parse\\_constant_ doesn’t get called on ‘null’, ‘true’, ‘false’ anymore.\n    \n\nChanged in version 3.6:\n\n*   All optional parameters are now [keyword-only](https://docs.python.org/3/glossary.html#keyword-only-parameter)\n    .\n    \n*   _fp_ can now be a [binary file](https://docs.python.org/3/glossary.html#term-binary-file)\n    . The input encoding should be UTF-8, UTF-16 or UTF-32.\n    \n\nChanged in version 3.11: The default _parse\\_int_ of [`int()`](https://docs.python.org/3/library/functions.html#int \"int\")\n now limits the maximum length of the integer string via the interpreter’s [integer string conversion length limitation](https://docs.python.org/3/library/stdtypes.html#int-max-str-digits)\n to help avoid denial of service attacks.\n\njson.loads(_s_, _\\*_, _cls\\=None_, _object\\_hook\\=None_, _parse\\_float\\=None_, _parse\\_int\\=None_, _parse\\_constant\\=None_, _object\\_pairs\\_hook\\=None_, _\\*\\*kw_)[¶](https://docs.python.org/3/library/json.html#json.loads \"Link to this definition\")\n\nIdentical to [`load()`](https://docs.python.org/3/library/json.html#json.load \"json.load\")\n, but instead of a file-like object, deserialize _s_ (a [`str`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n, [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"bytes\")\n or [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray \"bytearray\")\n instance containing a JSON document) to a Python object using this [conversion table](https://docs.python.org/3/library/json.html#json-to-py-table)\n.\n\nChanged in version 3.6: _s_ can now be of type [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"bytes\")\n or [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray \"bytearray\")\n. The input encoding should be UTF-8, UTF-16 or UTF-32.\n\nChanged in version 3.9: The keyword argument _encoding_ has been removed.\n\nEncoders and Decoders[¶](https://docs.python.org/3/library/json.html#encoders-and-decoders \"Link to this heading\")\n\n-------------------------------------------------------------------------------------------------------------------\n\n_class_ json.JSONDecoder(_\\*_, _object\\_hook\\=None_, _parse\\_float\\=None_, _parse\\_int\\=None_, _parse\\_constant\\=None_, _strict\\=True_, _object\\_pairs\\_hook\\=None_)[¶](https://docs.python.org/3/library/json.html#json.JSONDecoder \"Link to this definition\")\n\nSimple JSON decoder.\n\nPerforms the following translations in decoding by default:\n\n| JSON | Python |\n| --- | --- |\n| object | dict |\n| array | list |\n| string | str |\n| number (int) | int |\n| number (real) | float |\n| true | True |\n| false | False |\n| null | None |\n\nIt also understands `NaN`, `Infinity`, and `-Infinity` as their corresponding `float` values, which is outside the JSON spec.\n\n_object\\_hook_ is an optional function that will be called with the result of every JSON object decoded and its return value will be used in place of the given [`dict`](https://docs.python.org/3/library/stdtypes.html#dict \"dict\")\n. This can be used to provide custom deserializations (e.g. to support [JSON-RPC](https://www.jsonrpc.org/)\n class hinting).\n\n_object\\_pairs\\_hook_ is an optional function that will be called with the result of every JSON object decoded with an ordered list of pairs. The return value of _object\\_pairs\\_hook_ will be used instead of the [`dict`](https://docs.python.org/3/library/stdtypes.html#dict \"dict\")\n. This feature can be used to implement custom decoders. If _object\\_hook_ is also defined, the _object\\_pairs\\_hook_ takes priority.\n\nChanged in version 3.1: Added support for _object\\_pairs\\_hook_.\n\n_parse\\_float_ is an optional function that will be called with the string of every JSON float to be decoded. By default, this is equivalent to `float(num_str)`. This can be used to use another datatype or parser for JSON floats (e.g. [`decimal.Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal \"decimal.Decimal\")\n).\n\n_parse\\_int_ is an optional function that will be called with the string of every JSON int to be decoded. By default, this is equivalent to `int(num_str)`. This can be used to use another datatype or parser for JSON integers (e.g. [`float`](https://docs.python.org/3/library/functions.html#float \"float\")\n).\n\n_parse\\_constant_ is an optional function that will be called with one of the following strings: `'-Infinity'`, `'Infinity'`, `'NaN'`. This can be used to raise an exception if invalid JSON numbers are encountered.\n\nIf _strict_ is false (`True` is the default), then control characters will be allowed inside strings. Control characters in this context are those with character codes in the 0–31 range, including `'\\t'` (tab), `'\\n'`, `'\\r'` and `'\\0'`.\n\nIf the data being deserialized is not a valid JSON document, a [`JSONDecodeError`](https://docs.python.org/3/library/json.html#json.JSONDecodeError \"json.JSONDecodeError\")\n will be raised.\n\nChanged in version 3.6: All parameters are now [keyword-only](https://docs.python.org/3/glossary.html#keyword-only-parameter)\n.\n\ndecode(_s_)[¶](https://docs.python.org/3/library/json.html#json.JSONDecoder.decode \"Link to this definition\")\n\nReturn the Python representation of _s_ (a [`str`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n instance containing a JSON document).\n\n[`JSONDecodeError`](https://docs.python.org/3/library/json.html#json.JSONDecodeError \"json.JSONDecodeError\")\n will be raised if the given JSON document is not valid.\n\nraw\\_decode(_s_)[¶](https://docs.python.org/3/library/json.html#json.JSONDecoder.raw_decode \"Link to this definition\")\n\nDecode a JSON document from _s_ (a [`str`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n beginning with a JSON document) and return a 2-tuple of the Python representation and the index in _s_ where the document ended.\n\nThis can be used to decode a JSON document from a string that may have extraneous data at the end.\n\n_class_ json.JSONEncoder(_\\*_, _skipkeys\\=False_, _ensure\\_ascii\\=True_, _check\\_circular\\=True_, _allow\\_nan\\=True_, _sort\\_keys\\=False_, _indent\\=None_, _separators\\=None_, _default\\=None_)[¶](https://docs.python.org/3/library/json.html#json.JSONEncoder \"Link to this definition\")\n\nExtensible JSON encoder for Python data structures.\n\nSupports the following objects and types by default:\n\n| Python | JSON |\n| --- | --- |\n| dict | object |\n| list, tuple | array |\n| str | string |\n| int, float, int- & float-derived Enums | number |\n| True | true |\n| False | false |\n| None | null |\n\nChanged in version 3.4: Added support for int- and float-derived Enum classes.\n\nTo extend this to recognize other objects, subclass and implement a [`default()`](https://docs.python.org/3/library/json.html#json.JSONEncoder.default \"json.JSONEncoder.default\")\n method with another method that returns a serializable object for `o` if possible, otherwise it should call the superclass implementation (to raise [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError \"TypeError\")\n).\n\nIf _skipkeys_ is false (the default), a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError \"TypeError\")\n will be raised when trying to encode keys that are not [`str`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n, [`int`](https://docs.python.org/3/library/functions.html#int \"int\")\n, [`float`](https://docs.python.org/3/library/functions.html#float \"float\")\n or `None`. If _skipkeys_ is true, such items are simply skipped.\n\nIf _ensure\\_ascii_ is true (the default), the output is guaranteed to have all incoming non-ASCII characters escaped. If _ensure\\_ascii_ is false, these characters will be output as-is.\n\nIf _check\\_circular_ is true (the default), then lists, dicts, and custom encoded objects will be checked for circular references during encoding to prevent an infinite recursion (which would cause a [`RecursionError`](https://docs.python.org/3/library/exceptions.html#RecursionError \"RecursionError\")\n). Otherwise, no such check takes place.\n\nIf _allow\\_nan_ is true (the default), then `NaN`, `Infinity`, and `-Infinity` will be encoded as such. This behavior is not JSON specification compliant, but is consistent with most JavaScript based encoders and decoders. Otherwise, it will be a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError \"ValueError\")\n to encode such floats.\n\nIf _sort\\_keys_ is true (default: `False`), then the output of dictionaries will be sorted by key; this is useful for regression tests to ensure that JSON serializations can be compared on a day-to-day basis.\n\nIf _indent_ is a non-negative integer or string, then JSON array elements and object members will be pretty-printed with that indent level. An indent level of 0, negative, or `\"\"` will only insert newlines. `None` (the default) selects the most compact representation. Using a positive integer indent indents that many spaces per level. If _indent_ is a string (such as `\"\\t\"`), that string is used to indent each level.\n\nChanged in version 3.2: Allow strings for _indent_ in addition to integers.\n\nIf specified, _separators_ should be an `(item_separator, key_separator)` tuple. The default is `(', ', ': ')` if _indent_ is `None` and `(',', ': ')` otherwise. To get the most compact JSON representation, you should specify `(',', ':')` to eliminate whitespace.\n\nChanged in version 3.4: Use `(',', ': ')` as default if _indent_ is not `None`.\n\nIf specified, _default_ should be a function that gets called for objects that can’t otherwise be serialized. It should return a JSON encodable version of the object or raise a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError \"TypeError\")\n. If not specified, [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError \"TypeError\")\n is raised.\n\nChanged in version 3.6: All parameters are now [keyword-only](https://docs.python.org/3/glossary.html#keyword-only-parameter)\n.\n\ndefault(_o_)[¶](https://docs.python.org/3/library/json.html#json.JSONEncoder.default \"Link to this definition\")\n\nImplement this method in a subclass such that it returns a serializable object for _o_, or calls the base implementation (to raise a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError \"TypeError\")\n).\n\nFor example, to support arbitrary iterators, you could implement [`default()`](https://docs.python.org/3/library/json.html#json.JSONEncoder.default \"json.JSONEncoder.default\")\n like this:\n\ndef default(self, o):\n   try:\n       iterable \\= iter(o)\n   except TypeError:\n       pass\n   else:\n       return list(iterable)\n   \\# Let the base class default method raise the TypeError\n   return super().default(o)\n\nencode(_o_)[¶](https://docs.python.org/3/library/json.html#json.JSONEncoder.encode \"Link to this definition\")\n\nReturn a JSON string representation of a Python data structure, _o_. For example:\n\n\\>>>\n\n\\>>> json.JSONEncoder().encode({\"foo\": \\[\"bar\", \"baz\"\\]})\n'{\"foo\": \\[\"bar\", \"baz\"\\]}'\n\niterencode(_o_)[¶](https://docs.python.org/3/library/json.html#json.JSONEncoder.iterencode \"Link to this definition\")\n\nEncode the given object, _o_, and yield each string representation as available. For example:\n\nfor chunk in json.JSONEncoder().iterencode(bigobject):\n    mysocket.write(chunk)\n\nExceptions[¶](https://docs.python.org/3/library/json.html#exceptions \"Link to this heading\")\n\n---------------------------------------------------------------------------------------------\n\n_exception_ json.JSONDecodeError(_msg_, _doc_, _pos_)[¶](https://docs.python.org/3/library/json.html#json.JSONDecodeError \"Link to this definition\")\n\nSubclass of [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError \"ValueError\")\n with the following additional attributes:\n\nmsg[¶](https://docs.python.org/3/library/json.html#json.JSONDecodeError.msg \"Link to this definition\")\n\nThe unformatted error message.\n\ndoc[¶](https://docs.python.org/3/library/json.html#json.JSONDecodeError.doc \"Link to this definition\")\n\nThe JSON document being parsed.\n\npos[¶](https://docs.python.org/3/library/json.html#json.JSONDecodeError.pos \"Link to this definition\")\n\nThe start index of _doc_ where parsing failed.\n\nlineno[¶](https://docs.python.org/3/library/json.html#json.JSONDecodeError.lineno \"Link to this definition\")\n\nThe line corresponding to _pos_.\n\ncolno[¶](https://docs.python.org/3/library/json.html#json.JSONDecodeError.colno \"Link to this definition\")\n\nThe column corresponding to _pos_.\n\nAdded in version 3.5.\n\nStandard Compliance and Interoperability[¶](https://docs.python.org/3/library/json.html#standard-compliance-and-interoperability \"Link to this heading\")\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\nThe JSON format is specified by [**RFC 7159**](https://datatracker.ietf.org/doc/html/rfc7159.html)\n and by [ECMA-404](https://ecma-international.org/publications-and-standards/standards/ecma-404/)\n. This section details this module’s level of compliance with the RFC. For simplicity, [`JSONEncoder`](https://docs.python.org/3/library/json.html#json.JSONEncoder \"json.JSONEncoder\")\n and [`JSONDecoder`](https://docs.python.org/3/library/json.html#json.JSONDecoder \"json.JSONDecoder\")\n subclasses, and parameters other than those explicitly mentioned, are not considered.\n\nThis module does not comply with the RFC in a strict fashion, implementing some extensions that are valid JavaScript but not valid JSON. In particular:\n\n*   Infinite and NaN number values are accepted and output;\n    \n*   Repeated names within an object are accepted, and only the value of the last name-value pair is used.\n    \n\nSince the RFC permits RFC-compliant parsers to accept input texts that are not RFC-compliant, this module’s deserializer is technically RFC-compliant under default settings.\n\n### Character Encodings[¶](https://docs.python.org/3/library/json.html#character-encodings \"Link to this heading\")\n\nThe RFC requires that JSON be represented using either UTF-8, UTF-16, or UTF-32, with UTF-8 being the recommended default for maximum interoperability.\n\nAs permitted, though not required, by the RFC, this module’s serializer sets _ensure\\_ascii=True_ by default, thus escaping the output so that the resulting strings only contain ASCII characters.\n\nOther than the _ensure\\_ascii_ parameter, this module is defined strictly in terms of conversion between Python objects and [`Unicode strings`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n, and thus does not otherwise directly address the issue of character encodings.\n\nThe RFC prohibits adding a byte order mark (BOM) to the start of a JSON text, and this module’s serializer does not add a BOM to its output. The RFC permits, but does not require, JSON deserializers to ignore an initial BOM in their input. This module’s deserializer raises a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError \"ValueError\")\n when an initial BOM is present.\n\nThe RFC does not explicitly forbid JSON strings which contain byte sequences that don’t correspond to valid Unicode characters (e.g. unpaired UTF-16 surrogates), but it does note that they may cause interoperability problems. By default, this module accepts and outputs (when present in the original [`str`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n) code points for such sequences.\n\n### Infinite and NaN Number Values[¶](https://docs.python.org/3/library/json.html#infinite-and-nan-number-values \"Link to this heading\")\n\nThe RFC does not permit the representation of infinite or NaN number values. Despite that, by default, this module accepts and outputs `Infinity`, `-Infinity`, and `NaN` as if they were valid JSON number literal values:\n\n\\>>>\n\n\\>>> \\# Neither of these calls raises an exception, but the results are not valid JSON\n\\>>> json.dumps(float('-inf'))\n'-Infinity'\n\\>>> json.dumps(float('nan'))\n'NaN'\n\\>>> \\# Same when deserializing\n\\>>> json.loads('-Infinity')\n\\-inf\n\\>>> json.loads('NaN')\nnan\n\nIn the serializer, the _allow\\_nan_ parameter can be used to alter this behavior. In the deserializer, the _parse\\_constant_ parameter can be used to alter this behavior.\n\n### Repeated Names Within an Object[¶](https://docs.python.org/3/library/json.html#repeated-names-within-an-object \"Link to this heading\")\n\nThe RFC specifies that the names within a JSON object should be unique, but does not mandate how repeated names in JSON objects should be handled. By default, this module does not raise an exception; instead, it ignores all but the last name-value pair for a given name:\n\n\\>>>\n\n\\>>> weird\\_json \\= '{\"x\": 1, \"x\": 2, \"x\": 3}'\n\\>>> json.loads(weird\\_json)\n{'x': 3}\n\nThe _object\\_pairs\\_hook_ parameter can be used to alter this behavior.\n\n### Top-level Non-Object, Non-Array Values[¶](https://docs.python.org/3/library/json.html#top-level-non-object-non-array-values \"Link to this heading\")\n\nThe old version of JSON specified by the obsolete [**RFC 4627**](https://datatracker.ietf.org/doc/html/rfc4627.html)\n required that the top-level value of a JSON text must be either a JSON object or array (Python [`dict`](https://docs.python.org/3/library/stdtypes.html#dict \"dict\")\n or [`list`](https://docs.python.org/3/library/stdtypes.html#list \"list\")\n), and could not be a JSON null, boolean, number, or string value. [**RFC 7159**](https://datatracker.ietf.org/doc/html/rfc7159.html)\n removed that restriction, and this module does not and has never implemented that restriction in either its serializer or its deserializer.\n\nRegardless, for maximum interoperability, you may wish to voluntarily adhere to the restriction yourself.\n\n### Implementation Limitations[¶](https://docs.python.org/3/library/json.html#implementation-limitations \"Link to this heading\")\n\nSome JSON deserializer implementations may set limits on:\n\n*   the size of accepted JSON texts\n    \n*   the maximum level of nesting of JSON objects and arrays\n    \n*   the range and precision of JSON numbers\n    \n*   the content and maximum length of JSON strings\n    \n\nThis module does not impose any such limits beyond those of the relevant Python datatypes themselves or the Python interpreter itself.\n\nWhen serializing to JSON, beware any such limitations in applications that may consume your JSON. In particular, it is common for JSON numbers to be deserialized into IEEE 754 double precision numbers and thus subject to that representation’s range and precision limitations. This is especially relevant when serializing Python [`int`](https://docs.python.org/3/library/functions.html#int \"int\")\n values of extremely large magnitude, or when serializing instances of “exotic” numerical types such as [`decimal.Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal \"decimal.Decimal\")\n.\n\nCommand Line Interface[¶](https://docs.python.org/3/library/json.html#module-json.tool \"Link to this heading\")\n\n---------------------------------------------------------------------------------------------------------------\n\n**Source code:** [Lib/json/tool.py](https://github.com/python/cpython/tree/3.13/Lib/json/tool.py)\n\n* * *\n\nThe [`json.tool`](https://docs.python.org/3/library/json.html#module-json.tool \"json.tool: A command line to validate and pretty-print JSON.\")\n module provides a simple command line interface to validate and pretty-print JSON objects.\n\nIf the optional `infile` and `outfile` arguments are not specified, [`sys.stdin`](https://docs.python.org/3/library/sys.html#sys.stdin \"sys.stdin\")\n and [`sys.stdout`](https://docs.python.org/3/library/sys.html#sys.stdout \"sys.stdout\")\n will be used respectively:\n\n$ echo '{\"json\": \"obj\"}' | python \\-m json.tool\n{\n    \"json\": \"obj\"\n}\n$ echo '{1.2:3.4}' | python \\-m json.tool\nExpecting property name enclosed in double quotes: line 1 column 2 (char 1)\n\nChanged in version 3.5: The output is now in the same order as the input. Use the [`--sort-keys`](https://docs.python.org/3/library/json.html#cmdoption-json.tool-sort-keys)\n option to sort the output of dictionaries alphabetically by key.\n\n### Command line options[¶](https://docs.python.org/3/library/json.html#command-line-options \"Link to this heading\")\n\ninfile[¶](https://docs.python.org/3/library/json.html#cmdoption-json.tool-arg-infile \"Link to this definition\")\n\nThe JSON file to be validated or pretty-printed:\n\n$ python \\-m json.tool mp\\_films.json\n\\[\\\n    {\\\n        \"title\": \"And Now for Something Completely Different\",\\\n        \"year\": 1971\\\n    },\\\n    {\\\n        \"title\": \"Monty Python and the Holy Grail\",\\\n        \"year\": 1975\\\n    }\\\n\\]\n\nIf _infile_ is not specified, read from [`sys.stdin`](https://docs.python.org/3/library/sys.html#sys.stdin \"sys.stdin\")\n.\n\noutfile[¶](https://docs.python.org/3/library/json.html#cmdoption-json.tool-arg-outfile \"Link to this definition\")\n\nWrite the output of the _infile_ to the given _outfile_. Otherwise, write it to [`sys.stdout`](https://docs.python.org/3/library/sys.html#sys.stdout \"sys.stdout\")\n.\n\n\\--sort-keys[¶](https://docs.python.org/3/library/json.html#cmdoption-json.tool-sort-keys \"Link to this definition\")\n\nSort the output of dictionaries alphabetically by key.\n\nAdded in version 3.5.\n\n\\--no-ensure-ascii[¶](https://docs.python.org/3/library/json.html#cmdoption-json.tool-no-ensure-ascii \"Link to this definition\")\n\nDisable escaping of non-ascii characters, see [`json.dumps()`](https://docs.python.org/3/library/json.html#json.dumps \"json.dumps\")\n for more information.\n\nAdded in version 3.9.\n\n\\--json-lines[¶](https://docs.python.org/3/library/json.html#cmdoption-json.tool-json-lines \"Link to this definition\")\n\nParse every input line as separate JSON object.\n\nAdded in version 3.8.\n\n\\--indent, \\--tab, \\--no-indent, \\--compact[¶](https://docs.python.org/3/library/json.html#cmdoption-json.tool-indent \"Link to this definition\")\n\nMutually exclusive options for whitespace control.\n\nAdded in version 3.9.\n\n\\-h, \\--help[¶](https://docs.python.org/3/library/json.html#cmdoption-json.tool-h \"Link to this definition\")\n\nShow the help message.\n\nFootnotes\n\n### [Table of Contents](https://docs.python.org/3/contents.html)\n\n*   [`json` — JSON encoder and decoder](https://docs.python.org/3/library/json.html#)\n    *   [Basic Usage](https://docs.python.org/3/library/json.html#basic-usage)\n        \n    *   [Encoders and Decoders](https://docs.python.org/3/library/json.html#encoders-and-decoders)\n        \n    *   [Exceptions](https://docs.python.org/3/library/json.html#exceptions)\n        \n    *   [Standard Compliance and Interoperability](https://docs.python.org/3/library/json.html#standard-compliance-and-interoperability)\n        *   [Character Encodings](https://docs.python.org/3/library/json.html#character-encodings)\n            \n        *   [Infinite and NaN Number Values](https://docs.python.org/3/library/json.html#infinite-and-nan-number-values)\n            \n        *   [Repeated Names Within an Object](https://docs.python.org/3/library/json.html#repeated-names-within-an-object)\n            \n        *   [Top-level Non-Object, Non-Array Values](https://docs.python.org/3/library/json.html#top-level-non-object-non-array-values)\n            \n        *   [Implementation Limitations](https://docs.python.org/3/library/json.html#implementation-limitations)\n            \n    *   [Command Line Interface](https://docs.python.org/3/library/json.html#module-json.tool)\n        *   [Command line options](https://docs.python.org/3/library/json.html#command-line-options)\n            \n\n#### Previous topic\n\n[`email.iterators`: Iterators](https://docs.python.org/3/library/email.iterators.html \"previous chapter\")\n\n#### Next topic\n\n[`mailbox` — Manipulate mailboxes in various formats](https://docs.python.org/3/library/mailbox.html \"next chapter\")\n\n### This Page\n\n*   [Report a Bug](https://docs.python.org/3/bugs.html)\n    \n*   [Show Source](https://github.com/python/cpython/blob/main/Doc/library/json.rst)\n    \n\n«\n\n### Navigation\n\n*   [index](https://docs.python.org/3/genindex.html \"General Index\")\n    \n*   [modules](https://docs.python.org/3/py-modindex.html \"Python Module Index\")\n     |\n*   [next](https://docs.python.org/3/library/mailbox.html \"mailbox — Manipulate mailboxes in various formats\")\n     |\n*   [previous](https://docs.python.org/3/library/email.iterators.html \"email.iterators: Iterators\")\n     |\n*   ![Python logo](https://docs.python.org/3/_static/py.svg)\n*   [Python](https://www.python.org/)\n     »\n*   EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文\n    \n    dev (3.14)3.13.23.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6\n    \n\n*   [3.13.2 Documentation](https://docs.python.org/3/index.html)\n     »\n*   [The Python Standard Library](https://docs.python.org/3/library/index.html)\n     »\n*   [Internet Data Handling](https://docs.python.org/3/library/netdata.html)\n     »\n*   [`json` — JSON encoder and decoder](https://docs.python.org/3/library/json.html)\n    \n*    \n    \n    |\n*   Theme Auto Light Dark |","metadata":{"og:type":"website","ogImage":"https://docs.python.org/3/_static/og-image.png","og:title":"json — JSON encoder and decoder","favicon":"https://docs.python.org/3/_static/py.svg","og:url":"https://docs.python.org/3/library/json.html","og:description":"Source code: Lib/json/__init__.py JSON (JavaScript Object Notation), specified by RFC 7159(which obsoletes RFC 4627) and by ECMA-404, is a lightweight data interchange format inspired by JavaScript...","og:site_name":"Python documentation","description":"Source code: Lib/json/__init__.py JSON (JavaScript Object Notation), specified by RFC 7159(which obsoletes RFC 4627) and by ECMA-404, is a lightweight data interchange format inspired by JavaScript...","ogTitle":"json — JSON encoder and decoder","og:image:width":"200","ogDescription":"Source code: Lib/json/__init__.py JSON (JavaScript Object Notation), specified by RFC 7159(which obsoletes RFC 4627) and by ECMA-404, is a lightweight data interchange format inspired by JavaScript...","title":"json — JSON encoder and decoder — Python 3.13.2 documentation","ogSiteName":"Python documentation","viewport":["width=device-width, initial-scale=1.0","width=device-width, initial-scale=1","width=device-width, initial-scale=1.0"],"og:image":"https://docs.python.org/3/_static/og-image.png","ogUrl":"https://docs.python.org/3/library/json.html","language":"en","og:image:height":"200","og:image:alt":"Python documentation","readthedocs-addons-api-version":"1","theme-color":"#3776ab","scrapeId":"afb55002-e109-4a58-97af-93ba6cce8255","sourceURL":"https://docs.python.org/3/library/json.html","url":"https://docs.python.org/3/library/json.html","statusCode":200}}]}