{"success":true,"status":"completed","completed":8,"total":8,"creditsUsed":8,"expiresAt":"2025-03-05T21:02:04.000Z","data":[{"markdown":"Beautiful Soup Documentation[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#beautiful-soup-documentation \"Link to this heading\")\n\n============================================================================================================================================\n\n![\"The Fish-Footman began by producing from under his arm a great letter, nearly as large as himself.\"](https://www.crummy.com/software/BeautifulSoup/bs4/doc/_images/6.1.jpg)\n\n[Beautiful Soup](http://www.crummy.com/software/BeautifulSoup/)\n is a Python library for pulling data out of HTML and XML files. It works with your favorite parser to provide idiomatic ways of navigating, searching, and modifying the parse tree. It commonly saves programmers hours or days of work.\n\nThese instructions illustrate all major features of Beautiful Soup 4, with examples. I show you what the library is good for, how it works, how to use it, how to make it do what you want, and what to do when it violates your expectations.\n\nThis document covers Beautiful Soup version 4.13.3. The examples in this documentation were written for Python 3.8.\n\nYou might be looking for the documentation for [Beautiful Soup 3](http://www.crummy.com/software/BeautifulSoup/bs3/documentation.html)\n. If so, you should know that Beautiful Soup 3 is no longer being developed and that all support for it was dropped on December 31, 2020. If you want to learn about the differences between Beautiful Soup 3 and Beautiful Soup 4, see [Porting code to BS4](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#porting-code-to-bs4)\n.\n\nThis documentation has been translated into other languages by Beautiful Soup users:\n\n*   [这篇文档当然还有中文版.](https://www.crummy.com/software/BeautifulSoup/bs4/doc.zh/)\n    \n*   このページは日本語で利用できます([外部リンク](http://kondou.com/BS4/)\n    )\n    \n*   [이 문서는 한국어 번역도 가능합니다.](https://www.crummy.com/software/BeautifulSoup/bs4/doc.ko/)\n    \n*   [Este documento também está disponível em Português do Brasil.](https://www.crummy.com/software/BeautifulSoup/bs4/doc.ptbr)\n    \n*   [Este documento también está disponible en una traducción al español.](https://www.crummy.com/software/BeautifulSoup/bs4/doc.es/)\n    \n*   [Эта документация доступна на русском языке.](https://www.crummy.com/software/BeautifulSoup/bs4/doc.ru/)\n    \n\nGetting help[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#getting-help \"Link to this heading\")\n\n------------------------------------------------------------------------------------------------------------\n\nIf you have questions about Beautiful Soup, or run into problems, [send mail to the discussion group](https://groups.google.com/forum/?fromgroups#!forum/beautifulsoup)\n. If your problem involves parsing an HTML document, be sure to mention [what the diagnose() function says](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#diagnose)\n about that document.\n\nWhen reporting an error in this documentation, please mention which translation you're reading.\n\n### API documentation[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#api-documentation \"Link to this heading\")\n\nThis document is written like an instruction manual, but you can also read [traditional API documentation](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/modules.html)\n generated from the Beautiful Soup source code. If you want details about Beautiful Soup's internals, or a feature not covered in this document, try the API documentation.\n\nQuick Start[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#quick-start \"Link to this heading\")\n\n==========================================================================================================\n\nHere's an HTML document I'll be using as an example throughout this document. It's part of a story from _Alice in Wonderland_:\n\nhtml\\_doc \\= \"\"\"<html><head><title>The Dormouse's story</title></head>\n<body>\n<p class=\"title\"><b>The Dormouse's story</b></p>\n\n<p class=\"story\">Once upon a time there were three little sisters; and their names were\n<a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\">Elsie</a>,\n<a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\">Lacie</a> and\n<a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\">Tillie</a>;\nand they lived at the bottom of a well.</p>\n\n<p class=\"story\">...</p>\n\"\"\"\n\nRunning the \"three sisters\" document through Beautiful Soup gives us a `BeautifulSoup` object, which represents the document as a nested data structure:\n\nfrom bs4 import BeautifulSoup\nsoup \\= BeautifulSoup(html\\_doc, 'html.parser')\n\nprint(soup.prettify())\n\\# <html>\n\\#  <head>\n\\#   <title>\n\\#    The Dormouse's story\n\\#   </title>\n\\#  </head>\n\\#  <body>\n\\#   <p class=\"title\">\n\\#    <b>\n\\#     The Dormouse's story\n\\#    </b>\n\\#   </p>\n\\#   <p class=\"story\">\n\\#    Once upon a time there were three little sisters; and their names were\n\\#    <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">\n\\#     Elsie\n\\#    </a>\n\\#    ,\n\\#    <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">\n\\#     Lacie\n\\#    </a>\n\\#    and\n\\#    <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">\n\\#     Tillie\n\\#    </a>\n\\#    ; and they lived at the bottom of a well.\n\\#   </p>\n\\#   <p class=\"story\">\n\\#    ...\n\\#   </p>\n\\#  </body>\n\\# </html>\n\nHere are some simple ways to navigate that data structure:\n\nsoup.title\n\\# <title>The Dormouse's story</title>\n\nsoup.title.name\n\\# u'title'\n\nsoup.title.string\n\\# u'The Dormouse's story'\n\nsoup.title.parent.name\n\\# u'head'\n\nsoup.p\n\\# <p class=\"title\"><b>The Dormouse's story</b></p>\n\nsoup.p\\['class'\\]\n\\# u'title'\n\nsoup.a\n\\# <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\n\nsoup.find\\_all('a')\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\\]\n\nsoup.find(id\\=\"link3\")\n\\# <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\n\nOne common task is extracting all the URLs found within a page's <a> tags:\n\nfor link in soup.find\\_all('a'):\n    print(link.get('href'))\n\\# http://example.com/elsie\n\\# http://example.com/lacie\n\\# http://example.com/tillie\n\nAnother common task is extracting all the text from a page:\n\nprint(soup.get\\_text())\n\\# The Dormouse's story\n#\n\\# The Dormouse's story\n#\n\\# Once upon a time there were three little sisters; and their names were\n\\# Elsie,\n\\# Lacie and\n\\# Tillie;\n\\# and they lived at the bottom of a well.\n#\n\\# ...\n\nDoes this look like what you need? If so, read on.\n\nInstalling Beautiful Soup[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-beautiful-soup \"Link to this heading\")\n\n======================================================================================================================================\n\nIf you're using a recent version of Debian or Ubuntu Linux, you can install Beautiful Soup with the system package manager:\n\n$ apt\\-get install python3\\-bs4\n\nBeautiful Soup 4 is published through PyPi, so if you can't install it with the system packager, you can install it with `easy_install` or `pip`. The package name is `beautifulsoup4`. Make sure you use the right version of `pip` or `easy_install` for your Python version (these may be named `pip3` and `easy_install3` respectively).\n\n$ easy\\_install beautifulsoup4\n\n$ pip install beautifulsoup4\n\n(The `BeautifulSoup` package is _not_ what you want. That's the previous major release, [Beautiful Soup 3](http://www.crummy.com/software/BeautifulSoup/bs3/documentation.html)\n. Lots of software uses BS3, so it's still available, but if you're writing new code you should install `beautifulsoup4`.)\n\nIf you don't have `easy_install` or `pip` installed, you can [download the Beautiful Soup 4 source tarball](http://www.crummy.com/software/BeautifulSoup/download/4.x/)\n and install it with `setup.py`.\n\n$ python setup.py install\n\nIf all else fails, the license for Beautiful Soup allows you to package the entire library with your application. You can download the tarball, copy its `bs4` directory into your application's codebase, and use Beautiful Soup without installing it at all.\n\nI use Python 3.10 to develop Beautiful Soup, but it should work with other recent versions.\n\nInstalling a parser[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------------------------------\n\nBeautiful Soup supports the HTML parser included in Python's standard library, but it also supports a number of third-party Python parsers. One is the [lxml parser](http://lxml.de/)\n. Depending on your setup, you might install lxml with one of these commands:\n\n$ apt\\-get install python\\-lxml\n\n$ easy\\_install lxml\n\n$ pip install lxml\n\nAnother alternative is the pure-Python [html5lib parser](http://code.google.com/p/html5lib/)\n, which parses HTML the way a web browser does. Depending on your setup, you might install html5lib with one of these commands:\n\n$ apt\\-get install python3\\-html5lib\n\n$ pip install html5lib\n\nThis table summarizes the advantages and disadvantages of each parser library:\n\n|     |     |     |     |\n| --- | --- | --- | --- |\n| Parser | Typical usage | Advantages | Disadvantages |\n| Python's html.parser | `BeautifulSoup(markup, \"html.parser\")` | *   Batteries included<br>    <br>*   Decent speed | *   Not as fast as lxml, less lenient than html5lib. |\n| lxml's HTML parser | `BeautifulSoup(markup, \"lxml\")` | *   Very fast | *   External C dependency |\n| lxml's XML parser | `BeautifulSoup(markup, \"lxml-xml\")` `BeautifulSoup(markup, \"xml\")` | *   Very fast<br>    <br>*   The only currently supported XML parser | *   External C dependency |\n| html5lib | `BeautifulSoup(markup, \"html5lib\")` | *   Extremely lenient<br>    <br>*   Parses pages the same way a web browser does<br>    <br>*   Creates valid HTML5 | *   Very slow<br>    <br>*   External Python dependency |\n\nIf you can, I recommend you install and use lxml for speed.\n\nNote that if a document is invalid, different parsers will generate different Beautiful Soup trees for it. See [Differences between parsers](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#differences-between-parsers)\n for details.\n\nMaking the soup[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#making-the-soup \"Link to this heading\")\n\n==================================================================================================================\n\nTo parse a document, pass it into the `BeautifulSoup` constructor. You can pass in a string or an open filehandle:\n\nfrom bs4 import BeautifulSoup\n\nwith open(\"index.html\") as fp:\n    soup \\= BeautifulSoup(fp, 'html.parser')\n\nsoup \\= BeautifulSoup(\"<html>a web page</html>\", 'html.parser')\n\nFirst, the document is converted to Unicode, and HTML entities are converted to Unicode characters:\n\nprint(BeautifulSoup(\"<html><head></head><body>Sacr&eacute; bleu!</body></html>\", \"html.parser\"))\n\\# <html><head></head><body>Sacré bleu!</body></html>\n\nBeautiful Soup then parses the document using the best available parser. It will use an HTML parser unless you specifically tell it to use an XML parser. (See [Parsing XML](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id15)\n.)\n\nKinds of objects[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kinds-of-objects \"Link to this heading\")\n\n====================================================================================================================\n\nBeautiful Soup transforms a complex HTML document into a complex tree of Python objects. But you'll only ever have to deal with about four _kinds_ of objects: [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n, [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n, `BeautifulSoup`, and [`Comment`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Comment \"Comment\")\n. These objects represent the HTML _elements_ that comprise the page.\n\n_class_ Tag[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Link to this definition\")\n\nA [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n object corresponds to an XML or HTML tag in the original document.\n\nsoup \\= BeautifulSoup('<b class=\"boldest\">Extremely bold</b>', 'html.parser')\ntag \\= soup.b\ntype(tag)\n\\# <class 'bs4.element.Tag'>\n\nTags have a lot of attributes and methods, and I'll cover most of them in [Navigating the tree](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#navigating-the-tree)\n and [Searching the tree](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#searching-the-tree)\n. For now, the most important methods of a tag are for accessing its name and attributes.\n\nname[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag.name \"Link to this definition\")\n\nEvery tag has a name:\n\ntag.name\n\\# 'b'\n\nIf you change a tag's name, the change will be reflected in any markup generated by Beautiful Soup down the line:\n\ntag.name \\= \"blockquote\"\ntag\n\\# <blockquote class=\"boldest\">Extremely bold</blockquote>\n\nattrs[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag.attrs \"Link to this definition\")\n\nAn HTML or XML tag may have any number of attributes. The tag `<b id=\"boldest\">` has an attribute \"id\" whose value is \"boldest\". You can access a tag's attributes by treating the tag like a dictionary:\n\ntag \\= BeautifulSoup('<b id=\"boldest\">bold</b>', 'html.parser').b\ntag\\['id'\\]\n\\# 'boldest'\n\nYou can access the dictionary of attributes directly as `.attrs`:\n\ntag.attrs\n\\# {'id': 'boldest'}\ntag.attrs.keys()\n\\# dict\\_keys(\\['id'\\])\n\nYou can add, remove, and modify a tag's attributes. Again, this is done by treating the tag as a dictionary:\n\ntag\\['id'\\] \\= 'verybold'\ntag\\['another-attribute'\\] \\= 1\ntag\n\\# <b another-attribute=\"1\" id=\"verybold\"></b>\n\ndel tag\\['id'\\]\ndel tag\\['another-attribute'\\]\ntag\n\\# <b>bold</b>\n\ntag\\['id'\\]\n\\# KeyError: 'id'\ntag.get('id')\n\\# None\n\nMulti-valued attributes[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#multi-valued-attributes \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nHTML 4 defines a few attributes that can have multiple values. HTML 5 removes a couple of them, but defines a few more. The most common multi-valued attribute is `class` (that is, a tag can have more than one CSS class). Others include `rel`, `rev`, `accept-charset`, `headers`, and `accesskey`. By default, Beautiful Soup stores the value(s) of a multi-valued attribute as a list:\n\ncss\\_soup \\= BeautifulSoup('<p class=\"body\"></p>', 'html.parser')\ncss\\_soup.p\\['class'\\]\n\\# \\['body'\\]\n\ncss\\_soup \\= BeautifulSoup('<p class=\"body strikeout\"></p>', 'html.parser')\ncss\\_soup.p\\['class'\\]\n\\# \\['body', 'strikeout'\\]\n\nWhen you turn a tag back into a string, the values of any multi-valued attributes are consolidated:\n\nrel\\_soup \\= BeautifulSoup('<p>Back to the <a rel=\"index first\">homepage</a></p>', 'html.parser')\nrel\\_soup.a\\['rel'\\]\n\\# \\['index', 'first'\\]\nrel\\_soup.a\\['rel'\\] \\= \\['index', 'contents'\\]\nprint(rel\\_soup.p)\n\\# <p>Back to the <a rel=\"index contents\">homepage</a></p>\n\nIf an attribute _looks_ like it has more than one value, but it's not a multi-valued attribute as defined by any version of the HTML standard, Beautiful Soup stores it as a simple string:\n\nid\\_soup \\= BeautifulSoup('<p id=\"my id\"></p>', 'html.parser')\nid\\_soup.p\\['id'\\]\n\\# 'my id'\n\nYou can force all attributes to be stored as strings by passing `multi_valued_attributes=None` as a keyword argument into the `BeautifulSoup` constructor:\n\nno\\_list\\_soup \\= BeautifulSoup('<p class=\"body strikeout\"></p>', 'html.parser', multi\\_valued\\_attributes\\=None)\nno\\_list\\_soup.p\\['class'\\]\n\\# 'body strikeout'\n\nYou can use `get_attribute_list` to always return the value in a list container, whether it's a string or multi-valued attribute value:\n\nid\\_soup.p\\['id'\\]\n\\# 'my id'\nid\\_soup.p.get\\_attribute\\_list('id')\n\\# \\[\"my id\"\\]\n\nIf you parse a document as XML, there are no multi-valued attributes:\n\nxml\\_soup \\= BeautifulSoup('<p class=\"body strikeout\"></p>', 'xml')\nxml\\_soup.p\\['class'\\]\n\\# 'body strikeout'\n\nAgain, you can configure this using the `multi_valued_attributes` argument:\n\nclass\\_is\\_multi\\= { '\\*' : 'class'}\nxml\\_soup \\= BeautifulSoup('<p class=\"body strikeout\"></p>', 'xml', multi\\_valued\\_attributes\\=class\\_is\\_multi)\nxml\\_soup.p\\['class'\\]\n\\# \\['body', 'strikeout'\\]\n\nYou probably won't need to do this, but if you do, use the defaults as a guide. They implement the rules described in the HTML specification:\n\nfrom bs4.builder import builder\\_registry\nbuilder\\_registry.lookup('html').DEFAULT\\_CDATA\\_LIST\\_ATTRIBUTES\n\n_class_ NavigableString[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"Link to this definition\")\n\n* * *\n\nA tag can contain strings as pieces of text. Beautiful Soup uses the [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n class to contain these pieces of text:\n\nsoup \\= BeautifulSoup('<b class=\"boldest\">Extremely bold</b>', 'html.parser')\ntag \\= soup.b\ntag.string\n\\# 'Extremely bold'\ntype(tag.string)\n\\# <class 'bs4.element.NavigableString'>\n\nA [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n is just like a Python Unicode string, except that it also supports some of the features described in [Navigating the tree](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#navigating-the-tree)\n and [Searching the tree](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#searching-the-tree)\n. You can convert a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n to a Unicode string with `str`:\n\nunicode\\_string \\= str(tag.string)\nunicode\\_string\n\\# 'Extremely bold'\ntype(unicode\\_string)\n\\# <type 'str'>\n\nYou can't edit a string in place, but you can replace one string with another, using [replace\\_with()](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#replace-with)\n:\n\ntag.string.replace\\_with(\"No longer bold\")\ntag\n\\# <b class=\"boldest\">No longer bold</b>\n\n[`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n supports most of the features described in [Navigating the tree](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#navigating-the-tree)\n and [Searching the tree](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#searching-the-tree)\n, but not all of them. In particular, since a string can't contain anything (the way a tag may contain a string or another tag), strings don't support the `.contents` or `.string` attributes, or the `find()` method.\n\nIf you want to use a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n outside of Beautiful Soup, you should call `unicode()` on it to turn it into a normal Python Unicode string. If you don't, your string will carry around a reference to the entire Beautiful Soup parse tree, even when you're done using Beautiful Soup. This is a big waste of memory.\n\n* * *\n\nThe `BeautifulSoup` object represents the parsed document as a whole. For most purposes, you can treat it as a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n object. This means it supports most of the methods described in [Navigating the tree](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#navigating-the-tree)\n and [Searching the tree](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#searching-the-tree)\n.\n\nYou can also pass a `BeautifulSoup` object into one of the methods defined in [Modifying the tree](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#modifying-the-tree)\n, just as you would a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n. This lets you do things like combine two parsed documents:\n\ndoc \\= BeautifulSoup(\"<document><content/>INSERT FOOTER HERE</document\", \"xml\")\nfooter \\= BeautifulSoup(\"<footer>Here's the footer</footer>\", \"xml\")\ndoc.find(text\\=\"INSERT FOOTER HERE\").replace\\_with(footer)\n\\# 'INSERT FOOTER HERE'\nprint(doc)\n\\# <?xml version=\"1.0\" encoding=\"utf-8\"?>\n\\# <document><content/><footer>Here's the footer</footer></document>\n\nSince the `BeautifulSoup` object doesn't correspond to an actual HTML or XML tag, it has no name and no attributes. But sometimes it's useful to reference its `.name` (such as when writing code that works with both [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n and `BeautifulSoup` objects), so it's been given the special `.name` \"\\[document\\]\":\n\nsoup.name\n\\# '\\[document\\]'\n\nSpecial strings[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#special-strings \"Link to this heading\")\n\n------------------------------------------------------------------------------------------------------------------\n\n[`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n, [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n, and `BeautifulSoup` cover almost everything you'll see in an HTML or XML file, but there are a few leftover bits. The main one you'll probably encounter is the [`Comment`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Comment \"Comment\")\n.\n\n_class_ Comment[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Comment \"Link to this definition\")\n\nmarkup \\= \"<b><!--Hey, buddy. Want to buy a used parser?--></b>\"\nsoup \\= BeautifulSoup(markup, 'html.parser')\ncomment \\= soup.b.string\ntype(comment)\n\\# <class 'bs4.element.Comment'>\n\nThe [`Comment`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Comment \"Comment\")\n object is just a special type of [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n:\n\ncomment\n\\# 'Hey, buddy. Want to buy a used parser'\n\nBut when it appears as part of an HTML document, a [`Comment`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Comment \"Comment\")\n is displayed with special formatting:\n\nprint(soup.b.prettify())\n\\# <b>\n\\#  <!--Hey, buddy. Want to buy a used parser?-->\n\\# </b>\n\n### For HTML documents[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#for-html-documents \"Link to this heading\")\n\nBeautiful Soup defines a few [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n subclasses to contain strings found inside specific HTML tags. This makes it easier to pick out the main body of the page, by ignoring strings that probably represent programming directives found within the page. _(These classes are new in Beautiful Soup 4.9.0, and the html5lib parser doesn't use them.)_\n\n_class_ Stylesheet[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Stylesheet \"Link to this definition\")\n\nA [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n subclass that represents embedded CSS stylesheets; that is, any strings found inside a `<style>` tag during document parsing.\n\n_class_ Script[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Script \"Link to this definition\")\n\nA [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n subclass that represents embedded Javascript; that is, any strings found inside a `<script>` tag during document parsing.\n\n_class_ Template[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Template \"Link to this definition\")\n\nA [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n subclass that represents embedded HTML templates; that is, any strings found inside a `<template>` tag during document parsing.\n\n### For XML documents[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#for-xml-documents \"Link to this heading\")\n\nBeautiful Soup defines some [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n classes for holding special types of strings that can be found in XML documents. Like [`Comment`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Comment \"Comment\")\n, these classes are subclasses of [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n that add something extra to the string on output.\n\n_class_ Declaration[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Declaration \"Link to this definition\")\n\nA [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n subclass representing the [declaration](https://www.w3.org/TR/REC-xml/#sec-prolog-dtd)\n at the beginning of an XML document.\n\n_class_ Doctype[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Doctype \"Link to this definition\")\n\nA [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n subclass representing the [document type declaration](https://www.w3.org/TR/REC-xml/#dt-doctype)\n which may be found near the beginning of an XML document.\n\n_class_ CData[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#CData \"Link to this definition\")\n\nA [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n subclass that represents a [CData section](https://www.w3.org/TR/REC-xml/#sec-cdata-sect)\n.\n\n_class_ ProcessingInstruction[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#ProcessingInstruction \"Link to this definition\")\n\nA [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n subclass that represents the contents of an [XML processing instruction](https://www.w3.org/TR/REC-xml/#sec-pi)\n.\n\nNavigating the tree[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#navigating-the-tree \"Link to this heading\")\n\n==========================================================================================================================\n\nHere's the \"Three sisters\" HTML document again:\n\nhtml\\_doc \\= \"\"\"\n<html><head><title>The Dormouse's story</title></head>\n<body>\n<p class=\"title\"><b>The Dormouse's story</b></p>\n\n<p class=\"story\">Once upon a time there were three little sisters; and their names were\n<a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\">Elsie</a>,\n<a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\">Lacie</a> and\n<a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\">Tillie</a>;\nand they lived at the bottom of a well.</p>\n\n<p class=\"story\">...</p>\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nsoup \\= BeautifulSoup(html\\_doc, 'html.parser')\n\nI'll use this as an example to show you how to move from one part of a document to another.\n\nGoing down[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#going-down \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------------\n\nTags may contain strings and more tags. These elements are the tag's _children_. Beautiful Soup provides a lot of different attributes for navigating and iterating over a tag's children.\n\nNote that Beautiful Soup strings don't support any of these attributes, because a string can't have children.\n\n### Navigating using tag names[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#navigating-using-tag-names \"Link to this heading\")\n\nThe simplest way to navigate the parse tree is to find a tag by name. To do this, you can use the `find()` method:\n\nsoup.find(\"head\")\n\\# <head><title>The Dormouse's story</title></head>\n\nFor convenience, just saying the name of the tag you want is equivalent to `find()` (if no built-in attribute has that name). If you want the <head> tag, just say `soup.head`:\n\nsoup.head\n\\# <head><title>The Dormouse's story</title></head>\n\nsoup.title\n\\# <title>The Dormouse's story</title>\n\nYou can use this trick again and again to zoom in on a certain part of the parse tree. This code gets the first <b> tag beneath the <body> tag:\n\nsoup.body.b\n\\# <b>The Dormouse's story</b>\n\n`find()` (and its convenience equivalent) gives you only the _first_ tag by that name:\n\nsoup.a\n\\# <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\n\nIf you need to get _all_ the <a> tags, you can use `find_all()`:\n\nsoup.find\\_all('a')\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\\]\n\nFor more complicated tasks, such as pattern-matching and filtering, you can use the methods described in [Searching the tree](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#searching-the-tree)\n.\n\n### `.contents` and `.children`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#contents-and-children \"Link to this heading\")\n\nA tag's children are available in a list called `.contents`:\n\nhead\\_tag \\= soup.head\nhead\\_tag\n\\# <head><title>The Dormouse's story</title></head>\n\nhead\\_tag.contents\n\\# \\[<title>The Dormouse's story</title>\\]\n\ntitle\\_tag \\= head\\_tag.contents\\[0\\]\ntitle\\_tag\n\\# <title>The Dormouse's story</title>\ntitle\\_tag.contents\n\\# \\['The Dormouse's story'\\]\n\nThe `BeautifulSoup` object itself has children. In this case, the <html> tag is the child of the `BeautifulSoup` object.:\n\nlen(soup.contents)\n\\# 1\nsoup.contents\\[0\\].name\n\\# 'html'\n\nA string does not have `.contents`, because it can't contain anything:\n\ntext \\= title\\_tag.contents\\[0\\]\ntext.contents\n\\# AttributeError: 'NavigableString' object has no attribute 'contents'\n\nInstead of getting them as a list, you can iterate over a tag's children using the `.children` generator:\n\nfor child in title\\_tag.children:\n    print(child)\n\\# The Dormouse's story\n\nIf you want to modify a tag's children, use the methods described in [Modifying the tree](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#modifying-the-tree)\n. Don't modify the the `.contents` list directly: that can lead to problems that are subtle and difficult to spot.\n\n### `.descendants`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#descendants \"Link to this heading\")\n\nThe `.contents` and `.children` attributes consider only a tag's _direct_ children. For instance, the <head> tag has a single direct child—the <title> tag:\n\nhead\\_tag.contents\n\\# \\[<title>The Dormouse's story</title>\\]\n\nBut the <title> tag itself has a child: the string \"The Dormouse's story\". There's a sense in which that string is also a child of the <head> tag. The `.descendants` attribute lets you iterate over _all_ of a tag's children, recursively: its direct children, the children of its direct children, and so on:\n\nfor child in head\\_tag.descendants:\n    print(child)\n\\# <title>The Dormouse's story</title>\n\\# The Dormouse's story\n\nThe <head> tag has only one child, but it has two descendants: the <title> tag and the <title> tag's child. The `BeautifulSoup` object only has one direct child (the <html> tag), but it has a whole lot of descendants:\n\nlen(list(soup.children))\n\\# 1\nlen(list(soup.descendants))\n\\# 26\n\n### `.string`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#string \"Link to this heading\")\n\nIf a tag has only one child, and that child is a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n, the child is made available as `.string`:\n\ntitle\\_tag.string\n\\# 'The Dormouse's story'\n\nIf a tag's only child is another tag, and _that_ tag has a `.string`, then the parent tag is considered to have the same `.string` as its child:\n\nhead\\_tag.contents\n\\# \\[<title>The Dormouse's story</title>\\]\n\nhead\\_tag.string\n\\# 'The Dormouse's story'\n\nIf a tag contains more than one thing, then it's not clear what `.string` should refer to, so `.string` is defined to be `None`:\n\nprint(soup.html.string)\n\\# None\n\n### `.strings` and `stripped_strings`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#strings-and-stripped-strings \"Link to this heading\")\n\nIf there's more than one thing inside a tag, you can still look at just the strings. Use the `.strings` generator to see all descendant strings:\n\nfor string in soup.strings:\n    print(repr(string))\n    '\\\\n'\n\\# \"The Dormouse's story\"\n\\# '\\\\n'\n\\# '\\\\n'\n\\# \"The Dormouse's story\"\n\\# '\\\\n'\n\\# 'Once upon a time there were three little sisters; and their names were\\\\n'\n\\# 'Elsie'\n\\# ',\\\\n'\n\\# 'Lacie'\n\\# ' and\\\\n'\n\\# 'Tillie'\n\\# ';\\\\nand they lived at the bottom of a well.'\n\\# '\\\\n'\n\\# '...'\n\\# '\\\\n'\n\nNewlines and spaces that separate tags are also strings. You can remove extra whitespace by using the `.stripped_strings` generator instead:\n\nfor string in soup.stripped\\_strings:\n    print(repr(string))\n\\# \"The Dormouse's story\"\n\\# \"The Dormouse's story\"\n\\# 'Once upon a time there were three little sisters; and their names were'\n\\# 'Elsie'\n\\# ','\n\\# 'Lacie'\n\\# 'and'\n\\# 'Tillie'\n\\# ';\\\\n and they lived at the bottom of a well.'\n\\# '...'\n\nHere, strings consisting entirely of whitespace are ignored, and whitespace at the beginning and end of strings is removed.\n\nGoing up[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#going-up \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------\n\nContinuing the \"family tree\" analogy, every tag and every string has a _parent_: the tag that contains it.\n\n### `.parent`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#parent \"Link to this heading\")\n\nYou can access an element's parent with the `.parent` attribute. In the example \"three sisters\" document, the <head> tag is the parent of the <title> tag:\n\ntitle\\_tag \\= soup.title\ntitle\\_tag\n\\# <title>The Dormouse's story</title>\ntitle\\_tag.parent\n\\# <head><title>The Dormouse's story</title></head>\n\nThe title string itself has a parent: the <title> tag that contains it:\n\ntitle\\_tag.string.parent\n\\# <title>The Dormouse's story</title>\n\nThe parent of a top-level tag like <html> is the `BeautifulSoup` object itself:\n\nhtml\\_tag \\= soup.html\ntype(html\\_tag.parent)\n\\# <class 'bs4.BeautifulSoup'>\n\nAnd the `.parent` of a `BeautifulSoup` object is defined as None:\n\nprint(soup.parent)\n\\# None\n\n### `.parents`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#parents \"Link to this heading\")\n\nYou can iterate over all of an element's parents with `.parents`. This example uses `.parents` to travel from an <a> tag buried deep within the document, to the very top of the document:\n\nlink \\= soup.a\nlink\n\\# <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\nfor parent in link.parents:\n    print(parent.name)\n\\# p\n\\# body\n\\# html\n\\# \\[document\\]\n\n### `.self_and_parents`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#self-and-parents \"Link to this heading\")\n\nThe `.self_and_parents` generator is a variant of `.parents` which gives you the entire ancestry of an element, including the element itself:\n\nfor parent in link.parents:\n    print(parent.name)\n\\# link\n\\# p\n\\# body\n\\# html\n\\# \\[document\\]\n\nGoing sideways[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#going-sideways \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------------------\n\nConsider a simple document like this:\n\nsibling\\_soup \\= BeautifulSoup(\"<a><b>text1</b><c>text2</c></a>\", 'html.parser')\nprint(sibling\\_soup.prettify())\n\\#   <a>\n\\#    <b>\n\\#     text1\n\\#    </b>\n\\#    <c>\n\\#     text2\n\\#    </c>\n\\#   </a>\n\nThe <b> tag and the <c> tag are at the same level: they're both direct children of the same tag. We call them _siblings_. When a document is pretty-printed, siblings show up at the same indentation level. You can also use this relationship in the code you write.\n\n### `.next_sibling` and `.previous_sibling`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#next-sibling-and-previous-sibling \"Link to this heading\")\n\nYou can use `.next_sibling` and `.previous_sibling` to navigate between page elements that are on the same level of the parse tree:\n\nsibling\\_soup.b.next\\_sibling\n\\# <c>text2</c>\n\nsibling\\_soup.c.previous\\_sibling\n\\# <b>text1</b>\n\nThe <b> tag has a `.next_sibling`, but no `.previous_sibling`, because there's nothing before the <b> tag _on the same level of the tree_. For the same reason, the <c> tag has a `.previous_sibling` but no `.next_sibling`:\n\nprint(sibling\\_soup.b.previous\\_sibling)\n\\# None\nprint(sibling\\_soup.c.next\\_sibling)\n\\# None\n\nThe strings \"text1\" and \"text2\" are _not_ siblings, because they don't have the same parent:\n\nsibling\\_soup.b.string\n\\# 'text1'\n\nprint(sibling\\_soup.b.string.next\\_sibling)\n\\# None\n\nIn real documents, the `.next_sibling` or `.previous_sibling` of a tag will usually be a string containing whitespace. Going back to the \"three sisters\" document:\n\n\\# <a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\">Elsie</a>,\n\\# <a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\">Lacie</a> and\n\\# <a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\">Tillie</a>;\n\nYou might think that the `.next_sibling` of the first <a> tag would be the second <a> tag. But actually, it's a string: the comma and newline that separate the first <a> tag from the second:\n\nlink \\= soup.a\nlink\n\\# <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\n\nlink.next\\_sibling\n\\# ',\\\\n '\n\nThe second <a> tag is then the `.next_sibling` of the comma string:\n\nlink.next\\_sibling.next\\_sibling\n\\# <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>\n\n### `.next_siblings` and `.previous_siblings`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#next-siblings-and-previous-siblings \"Link to this heading\")\n\nYou can iterate over a tag's siblings with `.next_siblings` or `.previous_siblings`:\n\nfor sibling in soup.a.next\\_siblings:\n    print(repr(sibling))\n\\# ',\\\\n'\n\\# <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>\n\\# ' and\\\\n'\n\\# <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\n\\# '; and they lived at the bottom of a well.'\n\nfor sibling in soup.find(id\\=\"link3\").previous\\_siblings:\n    print(repr(sibling))\n\\# ' and\\\\n'\n\\# <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>\n\\# ',\\\\n'\n\\# <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\n\\# 'Once upon a time there were three little sisters; and their names were\\\\n'\n\n(If the argument syntax to find tags by their attribute value is unfamiliar, don't worry; this is covered later in [The keyword arguments](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kwargs)\n.)\n\nGoing back and forth[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#going-back-and-forth \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------------------------------\n\nTake a look at the beginning of the \"three sisters\" document:\n\n\\# <html><head><title>The Dormouse's story</title></head>\n\\# <p class=\"title\"><b>The Dormouse's story</b></p>\n\nAn HTML parser takes this string of characters and turns it into a series of events: \"open an <html> tag\", \"open a <head> tag\", \"open a <title> tag\", \"add a string\", \"close the <title> tag\", \"open a <p> tag\", and so on. The order in which the opening tags and strings are encountered is called _document order_. Beautiful Soup offers tools for searching a document's elements in document order.\n\n### `.next_element` and `.previous_element`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#next-element-and-previous-element \"Link to this heading\")\n\nThe `.next_element` attribute of a string or tag points to whatever was parsed immediately after the opening of the current tag or after the current string. It might be the same as `.next_sibling`, but it's usually drastically different.\n\nHere's the final <a> tag in the \"three sisters\" document. Its `.next_sibling` is a string: the conclusion of the sentence that was interrupted by the start of the <a> tag:\n\nlast\\_a\\_tag \\= soup.find(\"a\", id\\=\"link3\")\nlast\\_a\\_tag\n\\# <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\n\nlast\\_a\\_tag.next\\_sibling\n\\# ';\\\\nand they lived at the bottom of a well.'\n\nBut the `.next_element` of that <a> tag, the thing that was parsed immediately after the <a> tag, is _not_ the rest of that sentence: it's the string \"Tillie\" inside it:\n\nlast\\_a\\_tag.next\\_element\n\\# 'Tillie'\n\nThat's because in the original markup, the word \"Tillie\" appeared before that semicolon. The parser encountered an <a> tag, then the word \"Tillie\", then the closing </a> tag, then the semicolon and rest of the sentence. The semicolon is on the same level as the <a> tag, but the word \"Tillie\" was encountered first.\n\nThe `.previous_element` attribute is the exact opposite of `.next_element`. It points to the opening tag or string that was parsed immediately before this one:\n\nlast\\_a\\_tag.previous\\_element\n\\# ' and\\\\n'\nlast\\_a\\_tag.previous\\_element.next\\_element\n\\# <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\n\n### `.next_elements` and `.previous_elements`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#next-elements-and-previous-elements \"Link to this heading\")\n\nYou should get the idea by now. You can use these iterators to move forward or backward in the document as it was parsed:\n\nfor element in last\\_a\\_tag.next\\_elements:\n    print(repr(element))\n\\# 'Tillie'\n\\# ';\\\\nand they lived at the bottom of a well.'\n\\# '\\\\n'\n\\# <p class=\"story\">...</p>\n\\# '...'\n\\# '\\\\n'\n\nSearching the tree[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#searching-the-tree \"Link to this heading\")\n\n========================================================================================================================\n\nBeautiful Soup defines a lot of methods for searching the parse tree, but they're all very similar. I'm going to spend a lot of time explaining the two most popular methods: `find()` and `find_all()`. The other methods take almost exactly the same arguments, so I'll just cover them briefly.\n\nOnce again, I'll be using the \"three sisters\" document as an example:\n\nhtml\\_doc \\= \"\"\"\n<html><head><title>The Dormouse's story</title></head>\n<body>\n<p class=\"title\"><b>The Dormouse's story</b></p>\n\n<p class=\"story\">Once upon a time there were three little sisters; and their names were\n<a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\">Elsie</a>,\n<a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\">Lacie</a> and\n<a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\">Tillie</a>;\nand they lived at the bottom of a well.</p>\n\n<p class=\"story\">...</p>\n\"\"\"\n\nfrom bs4 import BeautifulSoup\nsoup \\= BeautifulSoup(html\\_doc, 'html.parser')\n\nBy passing in a filter to a method like `find_all()`, you can zoom in on the parts of the document you're interested in.\n\nKinds of filters[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kinds-of-filters \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------------------------\n\nBefore talking in detail about `find_all()` and similar methods, I want to show examples of different filters you can pass into these methods. These filters show up again and again, throughout the search API. You can use them to filter based on a tag's name, on its attributes, on the text of a string, or on some combination of these.\n\n### A string[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-string \"Link to this heading\")\n\nThe simplest filter is a string. Pass a string to a search method and Beautiful Soup will perform a tag-name match against that exact string. This code finds all the <b> tags in the document:\n\nsoup.find\\_all('b')\n\\# \\[<b>The Dormouse's story</b>\\]\n\nIf you pass in a byte string, Beautiful Soup will assume the string is encoded as UTF-8. You can avoid this by passing in a Unicode string instead.\n\n### A regular expression[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-regular-expression \"Link to this heading\")\n\nIf you pass in a regular expression object, Beautiful Soup will filter against that regular expression using its `search()` method. This code finds all the tags whose names start with the letter \"b\"; in this case, the <body> tag and the <b> tag:\n\nimport re\nfor tag in soup.find\\_all(re.compile(\"^b\")):\n    print(tag.name)\n\\# body\n\\# b\n\nThis code finds all the tags whose names contain the letter 't':\n\nfor tag in soup.find\\_all(re.compile(\"t\")):\n    print(tag.name)\n\\# html\n\\# title\n\n### `True`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#true \"Link to this heading\")\n\nThe value `True` matches every tag it can. This code finds _all_ the tags in the document, but none of the text strings:\n\nfor tag in soup.find\\_all(True):\n    print(tag.name)\n\\# html\n\\# head\n\\# title\n\\# body\n\\# p\n\\# b\n\\# p\n\\# a\n\\# a\n\\# a\n\\# p\n\n### A function[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-function \"Link to this heading\")\n\nIf none of the other matches work for you, define a function that takes an element as its only argument. The function should return `True` if the argument matches, and `False` otherwise.\n\nHere's a function that returns `True` if a tag defines the \"class\" attribute but doesn't define the \"id\" attribute:\n\ndef has\\_class\\_but\\_no\\_id(tag):\n    return tag.has\\_attr('class') and not tag.has\\_attr('id')\n\nPass this function into `find_all()` and you'll pick up all the <p> tags:\n\nsoup.find\\_all(has\\_class\\_but\\_no\\_id)\n\\# \\[<p class=\"title\"><b>The Dormouse's story</b></p>,\\\n\\#  <p class=\"story\">Once upon a time there were…bottom of a well.</p>,\\\n\\#  <p class=\"story\">...</p>\\]\n\nThis function picks up only the <p> tags. It doesn't pick up the <a> tags, because those tags define both \"class\" and \"id\". It doesn't pick up tags like <html> and <title>, because those tags don't define \"class\".\n\nThe function can be as complicated as you need it to be. Here's a function that returns `True` if a tag is surrounded by string objects:\n\nfrom bs4 import NavigableString\ndef surrounded\\_by\\_strings(tag):\n    return (isinstance(tag.next\\_element, NavigableString)\n            and isinstance(tag.previous\\_element, NavigableString))\n\nfor tag in soup.find\\_all(surrounded\\_by\\_strings):\n    print(tag.name)\n\\# body\n\\# p\n\\# a\n\\# a\n\\# a\n\\# p\n\n### A list[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-list \"Link to this heading\")\n\nIf you pass in a list, Beautiful Soup will look for a match against _any_ string, regular expression, or function in that list. This code finds all the <a> tags _and_ all the <b> tags:\n\nsoup.find\\_all(\\[\"a\", \"b\"\\])\n\\# \\[<b>The Dormouse's story</b>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\\]\n\nNow we're ready to look at the search methods in detail.\n\n`find_all()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find-all \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------------\n\nMethod signature: find\\_all([name](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#name)\n, [attrs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#attrs)\n, [recursive](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#recursive)\n, [string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id11)\n, [limit](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#limit)\n, [\\*\\*kwargs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kwargs)\n)\n\nThe `find_all()` method looks through a tag's descendants and retrieves _all_ descendants that match your filters. I gave several examples in [Kinds of filters](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kinds-of-filters)\n, but here are a few more:\n\nsoup.find\\_all(\"title\")\n\\# \\[<title>The Dormouse's story</title>\\]\n\nsoup.find\\_all(\"p\", \"title\")\n\\# \\[<p class=\"title\"><b>The Dormouse's story</b></p>\\]\n\nsoup.find\\_all(\"a\")\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\\]\n\nsoup.find\\_all(id\\=\"link2\")\n\\# \\[<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>\\]\n\nimport re\nsoup.find(string\\=re.compile(\"sisters\"))\n\\# 'Once upon a time there were three little sisters; and their names were\\\\n'\n\nSome of these should look familiar, but others are new. What does it mean to pass in a value for `string`, or `id`? Why does `find_all(\"p\", \"title\")` find a <p> tag with the CSS class \"title\"? Let's look at the arguments to `find_all()`.\n\n### The `name` argument[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#the-name-argument \"Link to this heading\")\n\nPass in a value for `name` and you'll tell Beautiful Soup to only consider tags with certain names. Text strings will be ignored, as will tags whose names that don't match.\n\nThis is the simplest usage:\n\nsoup.find\\_all(\"title\")\n\\# \\[<title>The Dormouse's story</title>\\]\n\nRecall from [Kinds of filters](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kinds-of-filters)\n that the value to `name` can be [a string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-string)\n, [a regular expression](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-regular-expression)\n, [a list](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-list)\n, [a function](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-function)\n, or [the value True](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#the-value-true)\n.\n\n### The keyword arguments[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#the-keyword-arguments \"Link to this heading\")\n\nAny keyword argument that's not recognized will be turned into a filter that matches tags by their attributes.\n\nIf you pass in a value for an argument called `id`, Beautiful Soup will filter against each tag's 'id' attribute value:\n\nsoup.find\\_all(id\\='link2')\n\\# \\[<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>\\]\n\nJust as with tags, you can filter an attribute based on [a string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-string)\n, [a regular expression](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-regular-expression)\n, [a list](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-list)\n, [a function](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-function)\n, or [the value True](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#the-value-true)\n.\n\nIf you pass in a regular expression object for `href`, Beautiful Soup will pattern-match against each tag's 'href' attribute value:\n\nsoup.find\\_all(href\\=re.compile(\"elsie\"))\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\\]\n\nThe value `True` matches every tag that defines the attribute. This code finds _all_ tags with an `id` attribute:\n\nsoup.find\\_all(id\\=True)\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\\]\n\nFor more complex matches, you can define a function that takes an attribute value as its only argument. The function should return `True` if the value matches, and `False` otherwise.\n\nHere's a function that finds all `a` tags whose `href` attribute _does not_ match a regular expression:\n\nimport re\ndef not\\_lacie(href):\n    return href and not re.compile(\"lacie\").search(href)\n\nsoup.find\\_all(href\\=not\\_lacie)\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\\]\n\nIf you pass in a list for an argument, Beautiful Soup will look for an attribute-value match against _any_ string, regular expression, or function in that list. This code finds the first and last link:\n\nsoup.find\\_all(id\\=\\[\"link1\", re.compile(\"3$\")\\])\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\\]\n\nYou can filter against multiple attributes at once by passing multiple keyword arguments:\n\nsoup.find\\_all(href\\=re.compile(\"elsie\"), id\\='link1')\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\\]\n\nSome attributes, like the data-\\* attributes in HTML 5, have names that can't be used as the names of keyword arguments:\n\ndata\\_soup \\= BeautifulSoup('<div data-foo=\"value\">foo!</div>', 'html.parser')\ndata\\_soup.find\\_all(data\\-foo\\=\"value\")\n\\# SyntaxError: keyword can't be an expression\n\nYou can use these attributes in searches by putting them into a dictionary and passing the dictionary into `find_all()` as the `attrs` argument:\n\ndata\\_soup.find\\_all(attrs\\={\"data-foo\": \"value\"})\n\\# \\[<div data-foo=\"value\">foo!</div>\\]\n\nSimilarly, you can't use a keyword argument to search for HTML's 'name' attribute, because Beautiful Soup uses the `name` argument to contain the name of the tag itself. Instead, you can give a value to 'name' in the `attrs` argument:\n\nname\\_soup \\= BeautifulSoup('<input name=\"email\"/>', 'html.parser')\nname\\_soup.find\\_all(name\\=\"email\")\n\\# \\[\\]\nname\\_soup.find\\_all(attrs\\={\"name\": \"email\"})\n\\# \\[<input name=\"email\"/>\\]\n\n### Searching by CSS class[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#searching-by-css-class \"Link to this heading\")\n\nIt's very useful to search for a tag that has a certain CSS class, but the name of the CSS attribute, \"class\", is a reserved word in Python. Using `class` as a keyword argument will give you a syntax error. As of Beautiful Soup 4.1.2, you can search by CSS class using the keyword argument `class_`:\n\nsoup.find\\_all(\"a\", class\\_\\=\"sister\")\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\\]\n\nAs with any keyword argument, you can pass `class_` a string, a regular expression, a function, or `True`:\n\nsoup.find\\_all(class\\_\\=re.compile(\"itl\"))\n\\# \\[<p class=\"title\"><b>The Dormouse's story</b></p>\\]\n\ndef has\\_six\\_characters(css\\_class):\n    return css\\_class is not None and len(css\\_class) \\== 6\n\nsoup.find\\_all(class\\_\\=has\\_six\\_characters)\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\\]\n\n[Remember](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#multivalue)\n that a single tag can have multiple values for its \"class\" attribute. When you search for a tag that matches a certain CSS class, you're matching against _any_ of its CSS classes:\n\ncss\\_soup \\= BeautifulSoup('<p class=\"body strikeout\"></p>', 'html.parser')\ncss\\_soup.find\\_all(\"p\", class\\_\\=\"strikeout\")\n\\# \\[<p class=\"body strikeout\"></p>\\]\n\ncss\\_soup.find\\_all(\"p\", class\\_\\=\"body\")\n\\# \\[<p class=\"body strikeout\"></p>\\]\n\nYou can also search for the exact string value of the `class` attribute:\n\ncss\\_soup.find\\_all(\"p\", class\\_\\=\"body strikeout\")\n\\# \\[<p class=\"body strikeout\"></p>\\]\n\nBut searching for variants of the string value won't work:\n\ncss\\_soup.find\\_all(\"p\", class\\_\\=\"strikeout body\")\n\\# \\[\\]\n\nIn older versions of Beautiful Soup, which don't have the `class_` shortcut, you can use the `attrs` argument trick mentioned above. Create a dictionary whose value for \"class\" is the string (or regular expression, or whatever) you want to search for:\n\nsoup.find\\_all(\"a\", attrs\\={\"class\": \"sister\"})\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\\]\n\nTo search for tags that match two or more CSS classes at once, use the `Tag.select()` CSS selector method [described here](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors)\n:\n\ncss\\_soup.select(\"p.strikeout.body\")\n\\# \\[<p class=\"body strikeout\"></p>\\]\n\n### The `string` argument[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#the-string-argument \"Link to this heading\")\n\nWith the `string` argument, you can search for strings instead of tags. As with `name` and attribute keyword arguments, you can pass in [a string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-string)\n, [a regular expression](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-regular-expression)\n, [a function](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-function)\n, [a list](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-list)\n, or [the value True](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#the-value-true)\n. Here are some examples:\n\nsoup.find\\_all(string\\=\"Elsie\")\n\\# \\['Elsie'\\]\n\nsoup.find\\_all(string\\=\\[\"Tillie\", \"Elsie\", \"Lacie\"\\])\n\\# \\['Elsie', 'Lacie', 'Tillie'\\]\n\nsoup.find\\_all(string\\=re.compile(\"Dormouse\"))\n\\# \\[\"The Dormouse's story\", \"The Dormouse's story\"\\]\n\ndef is\\_the\\_only\\_string\\_within\\_a\\_tag(s):\n    \"\"\"Return True if this string is the only child of its parent tag.\"\"\"\n    return (s \\== s.parent.string)\n\nsoup.find\\_all(string\\=is\\_the\\_only\\_string\\_within\\_a\\_tag)\n\\# \\[\"The Dormouse's story\", \"The Dormouse's story\", 'Elsie', 'Lacie', 'Tillie', '...'\\]\n\nIf you use the `string` argument in a tag search, Beautiful Soup will find all tags whose `.string` matches your value for `string`. This code finds the <a> tags whose `.string` is \"Elsie\":\n\nsoup.find\\_all(\"a\", string\\=\"Elsie\")\n\\# \\[<a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\">Elsie</a>\\]\n\nThe `string` argument is new in Beautiful Soup 4.4.0. In earlier versions it was called `text`:\n\nsoup.find\\_all(\"a\", text\\=\"Elsie\")\n\\# \\[<a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\">Elsie</a>\\]\n\n### The `limit` argument[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#the-limit-argument \"Link to this heading\")\n\n`find_all()` returns all the tags and strings that match your filters. This can take a while if the document is large. If you don't need _all_ the results, you can pass in a number for `limit`. This works just like the LIMIT keyword in SQL. It tells Beautiful Soup to stop gathering results after it's found a certain number.\n\nThere are three links in the \"three sisters\" document, but this code only finds the first two:\n\nsoup.find\\_all(\"a\", limit\\=2)\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>\\]\n\n### The `recursive` argument[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#the-recursive-argument \"Link to this heading\")\n\nBy default, `mytag.find_all()` will examine all the descendants of `mytag`: its children, its children's children, and so on. To consider only direct children, you can pass in `recursive=False`. See the difference here:\n\nsoup.html.find\\_all(\"title\")\n\\# \\[<title>The Dormouse's story</title>\\]\n\nsoup.html.find\\_all(\"title\", recursive\\=False)\n\\# \\[\\]\n\nHere's that part of the document:\n\n<html\\>\n <head\\>\n  <title\\>\n   The Dormouse's story\n  </title\\>\n </head\\>\n...\n\nThe <title> tag is beneath the <html> tag, but it's not _directly_ beneath the <html> tag: the <head> tag is in the way. Beautiful Soup finds the <title> tag when it's allowed to look at all descendants of the <html> tag, but when `recursive=False` restricts it to the <html> tag's immediate children, it finds nothing.\n\nBeautiful Soup offers a lot of tree-searching methods (covered below), and they mostly take the same arguments as `find_all()`: `name`, `attrs`, `string`, `limit`, and attribute keyword arguments. But the `recursive` argument is specific to the `find_all()` and `find()` methods. Passing `recursive=False` into a method like `find_parents()` wouldn't be very useful.\n\nCalling a tag is like calling `find_all()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#calling-a-tag-is-like-calling-find-all \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nFor convenience, calling a `BeautifulSoup` object or [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n object as a function is equivalent to calling `find_all()` (if no built-in method has the name of the tag you're looking for). These two lines of code are equivalent:\n\nsoup.find\\_all(\"a\")\nsoup(\"a\")\n\nThese two lines are also equivalent:\n\nsoup.title.find\\_all(string\\=True)\nsoup.title(string\\=True)\n\n`find()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find \"Link to this heading\")\n\n------------------------------------------------------------------------------------------------\n\nMethod signature: find([name](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#name)\n, [attrs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#attrs)\n, [recursive](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#recursive)\n, [string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id11)\n, [\\*\\*kwargs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kwargs)\n)\n\nThe `find_all()` method scans the entire document looking for results, but sometimes you only want to find one result. If you know a document has only one <body> tag, it's a waste of time to scan the entire document looking for more. Rather than passing in `limit=1` every time you call `find_all`, you can use the `find()` method. These two lines of code are _nearly_ equivalent:\n\nsoup.find\\_all('title', limit\\=1)\n\\# \\[<title>The Dormouse's story</title>\\]\n\nsoup.find('title')\n\\# <title>The Dormouse's story</title>\n\nThe only difference is that `find_all()` returns a list containing the single result, and `find()` just returns the result.\n\nIf `find_all()` can't find anything, it returns an empty list. If `find()` can't find anything, it returns `None`:\n\nprint(soup.find(\"nosuchtag\"))\n\\# None\n\nRemember the `soup.head.title` trick from [Navigating using tag names](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#navigating-using-tag-names)\n? That trick works by repeatedly calling `find()`:\n\nsoup.head.title\n\\# <title>The Dormouse's story</title>\n\nsoup.find(\"head\").find(\"title\")\n\\# <title>The Dormouse's story</title>\n\n`find_parents()` and `find_parent()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find-parents-and-find-parent \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------------------------------------------------------\n\nMethod signature: find\\_parents([name](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#name)\n, [attrs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#attrs)\n, [string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id11)\n, [limit](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#limit)\n, [\\*\\*kwargs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kwargs)\n)\n\nMethod signature: find\\_parent([name](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#name)\n, [attrs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#attrs)\n, [string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id11)\n, [\\*\\*kwargs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kwargs)\n)\n\nI spent a lot of time above covering `find_all()` and `find()`. The Beautiful Soup API defines ten other methods for searching the tree, but don't be afraid. Five of these methods are basically the same as `find_all()`, and the other five are basically the same as `find()`. The only differences are in how they move from one part of the tree to another.\n\nFirst let's consider `find_parents()` and `find_parent()`. Remember that `find_all()` and `find()` work their way down the tree, looking at tag's descendants. These methods do the opposite: they work their way _up_ the tree, looking at a tag's (or a string's) parents. Let's try them out, starting from a string buried deep in the \"three daughters\" document:\n\na\\_string \\= soup.find(string\\=\"Lacie\")\na\\_string\n\\# 'Lacie'\n\na\\_string.find\\_parents(\"a\")\n\\# \\[<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>\\]\n\na\\_string.find\\_parent(\"p\")\n\\# <p class=\"story\">Once upon a time there were three little sisters; and their names were\n\\#  <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\n\\#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a> and\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>;\n\\#  and they lived at the bottom of a well.</p>\n\na\\_string.find\\_parents(\"p\", class\\_\\=\"title\")\n\\# \\[\\]\n\nOne of the three <a> tags is the direct parent of the string in question, so our search finds it. One of the three <p> tags is an indirect parent (_ancestor_) of the string, and our search finds that as well. There's a <p> tag with the CSS class \"title\" _somewhere_ in the document, but it's not one of this string's parents, so we can't find it with `find_parents()`.\n\nYou may have noticed a similarity between `find_parent()` and `find_parents()`, and the [.parent](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#parent)\n and [.parents](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#parents)\n attributes mentioned earlier. These search methods actually use the `.parents` attribute to iterate through all parents (unfiltered), checking each one against the provided filter to see if it matches.\n\n`find_next_siblings()` and `find_next_sibling()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find-next-siblings-and-find-next-sibling \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nMethod signature: find\\_next\\_siblings([name](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#name)\n, [attrs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#attrs)\n, [string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id11)\n, [limit](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#limit)\n, [\\*\\*kwargs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kwargs)\n)\n\nMethod signature: find\\_next\\_sibling([name](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#name)\n, [attrs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#attrs)\n, [string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id11)\n, [\\*\\*kwargs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kwargs)\n)\n\nThese methods use [.next\\_siblings](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#sibling-generators)\n to iterate over the rest of an element's siblings in the tree. The `find_next_siblings()` method returns all the siblings that match, and `find_next_sibling()` returns only the first one:\n\nfirst\\_link \\= soup.a\nfirst\\_link\n\\# <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\n\nfirst\\_link.find\\_next\\_siblings(\"a\")\n\\# \\[<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\\]\n\nfirst\\_story\\_paragraph \\= soup.find(\"p\", \"story\")\nfirst\\_story\\_paragraph.find\\_next\\_sibling(\"p\")\n\\# <p class=\"story\">...</p>\n\n`find_previous_siblings()` and `find_previous_sibling()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find-previous-siblings-and-find-previous-sibling \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nMethod signature: find\\_previous\\_siblings([name](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#name)\n, [attrs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#attrs)\n, [string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id11)\n, [limit](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#limit)\n, [\\*\\*kwargs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kwargs)\n)\n\nMethod signature: find\\_previous\\_sibling([name](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#name)\n, [attrs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#attrs)\n, [string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id11)\n, [\\*\\*kwargs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kwargs)\n)\n\nThese methods use [.previous\\_siblings](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#sibling-generators)\n to iterate over an element's siblings that precede it in the tree. The `find_previous_siblings()` method returns all the siblings that match, and `find_previous_sibling()` returns only the first one:\n\nlast\\_link \\= soup.find(\"a\", id\\=\"link3\")\nlast\\_link\n\\# <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\n\nlast\\_link.find\\_previous\\_siblings(\"a\")\n\\# \\[<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\\]\n\nfirst\\_story\\_paragraph \\= soup.find(\"p\", \"story\")\nfirst\\_story\\_paragraph.find\\_previous\\_sibling(\"p\")\n\\# <p class=\"title\"><b>The Dormouse's story</b></p>\n\n`find_all_next()` and `find_next()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find-all-next-and-find-next \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------------------------------------------------------\n\nMethod signature: find\\_all\\_next([name](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#name)\n, [attrs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#attrs)\n, [string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id11)\n, [limit](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#limit)\n, [\\*\\*kwargs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kwargs)\n)\n\nMethod signature: find\\_next([name](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#name)\n, [attrs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#attrs)\n, [string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id11)\n, [\\*\\*kwargs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kwargs)\n)\n\nThese methods use [.next\\_elements](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#element-generators)\n to iterate over whatever tags and strings that come after it in the document. The `find_all_next()` method returns all matches, and `find_next()` returns only the first match:\n\nfirst\\_link \\= soup.a\nfirst\\_link\n\\# <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\n\nfirst\\_link.find\\_all\\_next(string\\=True)\n\\# \\['Elsie', ',\\\\n', 'Lacie', ' and\\\\n', 'Tillie',\\\n\\#  ';\\\\nand they lived at the bottom of a well.', '\\\\n', '...', '\\\\n'\\]\n\nfirst\\_link.find\\_next(\"p\")\n\\# <p class=\"story\">...</p>\n\nIn the first example, the string \"Elsie\" showed up, even though it was contained within the <a> tag we started from. In the second example, the last <p> tag in the document showed up, even though it's not in the same part of the tree as the <a> tag we started from. For these methods, all that matters is that an element matches the filter and it shows up later in the document in [document order](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#document-order)\n.\n\n`find_all_previous()` and `find_previous()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find-all-previous-and-find-previous \"Link to this heading\")\n\n------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nMethod signature: find\\_all\\_previous([name](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#name)\n, [attrs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#attrs)\n, [string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id11)\n, [limit](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#limit)\n, [\\*\\*kwargs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kwargs)\n)\n\nMethod signature: find\\_previous([name](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#name)\n, [attrs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#attrs)\n, [string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id11)\n, [\\*\\*kwargs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kwargs)\n)\n\nThese methods use [.previous\\_elements](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#element-generators)\n to iterate over the tags and strings that came before it in the document. The `find_all_previous()` method returns all matches, and `find_previous()` only returns the first match:\n\nfirst\\_link \\= soup.a\nfirst\\_link\n\\# <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\n\nfirst\\_link.find\\_all\\_previous(\"p\")\n\\# \\[<p class=\"story\">Once upon a time there were three little sisters; ...</p>,\\\n\\#  <p class=\"title\"><b>The Dormouse's story</b></p>\\]\n\nfirst\\_link.find\\_previous(\"title\")\n\\# <title>The Dormouse's story</title>\n\nThe call to `find_all_previous(\"p\")` found the first paragraph in the document (the one with class=\"title\"), but it also finds the second paragraph, the <p> tag that contains the <a> tag we started with. This shouldn't be too surprising: we're looking at all the tags that show up earlier in the document in [document order](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#document-order)\n than the one we started with. A <p> tag that contains an <a> tag must have shown up before the <a> tag it contains.\n\nCSS selectors through the `.css` property[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors-through-the-css-property \"Link to this heading\")\n\n-------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n`BeautifulSoup` and [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n objects support CSS selectors through their `.css` property. The actual selector implementation is handled by the [Soup Sieve](https://facelessuser.github.io/soupsieve/)\n package, available on PyPI as `soupsieve`. If you installed Beautiful Soup through `pip`, Soup Sieve was installed at the same time, so you don't have to do anything extra.\n\nThe Soup Sieve documentation lists [all the currently supported CSS selectors](https://facelessuser.github.io/soupsieve/selectors/)\n, but here are some of the basics. You can find tags by name:\n\nsoup.css.select(\"title\")\n\\# \\[<title>The Dormouse's story</title>\\]\n\nsoup.css.select(\"p:nth-of-type(3)\")\n\\# \\[<p class=\"story\">...</p>\\]\n\nFind tags by ID:\n\nsoup.css.select(\"#link1\")\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\\]\n\nsoup.css.select(\"a#link2\")\n\\# \\[<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>\\]\n\nFind tags contained anywhere within other tags:\n\nsoup.css.select(\"body a\")\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/lacie\"  id=\"link2\">Lacie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\\]\n\nsoup.css.select(\"html head title\")\n\\# \\[<title>The Dormouse's story</title>\\]\n\nFind tags _directly_ within other tags:\n\nsoup.css.select(\"head > title\")\n\\# \\[<title>The Dormouse's story</title>\\]\n\nsoup.css.select(\"p > a\")\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/lacie\"  id=\"link2\">Lacie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\\]\n\nsoup.css.select(\"p > a:nth-of-type(2)\")\n\\# \\[<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>\\]\n\nsoup.css.select(\"body > a\")\n\\# \\[\\]\n\nFind all matching next siblings of tags:\n\nsoup.css.select(\"#link1 ~ .sister\")\n\\# \\[<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\"  id=\"link3\">Tillie</a>\\]\n\nFind the next sibling tag (but only if it matches):\n\nsoup.css.select(\"#link1 + .sister\")\n\\# \\[<a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>\\]\n\nFind tags by CSS class:\n\nsoup.css.select(\".sister\")\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\\]\n\nsoup.css.select(\"\\[class~=sister\\]\")\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\\]\n\nFind tags that match any selector from a list of selectors:\n\nsoup.css.select(\"#link1,#link2\")\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>\\]\n\nTest for the existence of an attribute:\n\nsoup.css.select('a\\[href\\]')\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\\]\n\nFind tags by attribute value:\n\nsoup.css.select('a\\[href=\"http://example.com/elsie\"\\]')\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\\]\n\nsoup.css.select('a\\[href^=\"http://example.com/\"\\]')\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a>,\\\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\\]\n\nsoup.css.select('a\\[href$=\"tillie\"\\]')\n\\# \\[<a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\\]\n\nsoup.css.select('a\\[href\\*=\".com/el\"\\]')\n\\# \\[<a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\\]\n\nThere's also a method called `select_one()`, which finds only the first tag that matches a selector:\n\nsoup.css.select\\_one(\".sister\")\n\\# <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\n\nAs a convenience, you can call `select()` and `select_one()` can directly on the `BeautifulSoup` or [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n object, omitting the `.css` property:\n\nsoup.select('a\\[href$=\"tillie\"\\]')\n\\# \\[<a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>\\]\n\nsoup.select\\_one(\".sister\")\n\\# <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>\n\nCSS selector support is a convenience for people who already know the CSS selector syntax. You can do all of this with the Beautiful Soup API. If CSS selectors are all you need, you should skip Beautiful Soup altogether and parse the document with `lxml`: it's a lot faster. But Soup Sieve lets you _combine_ CSS selectors with the Beautiful Soup API.\n\n### Advanced Soup Sieve features[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#advanced-soup-sieve-features \"Link to this heading\")\n\nSoup Sieve offers a substantial API beyond the `select()` and `select_one()` methods, and you can access most of that API through the `.css` attribute of [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n or `BeautifulSoup`. What follows is just a list of the supported methods; see [the Soup Sieve documentation](https://facelessuser.github.io/soupsieve/)\n for full documentation.\n\nThe `iselect()` method works the same as `select()`, but it returns a generator instead of a list:\n\n\\[tag\\['id'\\] for tag in soup.css.iselect(\".sister\")\\]\n\\# \\['link1', 'link2', 'link3'\\]\n\nThe `closest()` method returns the nearest parent of a given [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n that matches a CSS selector, similar to Beautiful Soup's `find_parent()` method:\n\nelsie \\= soup.css.select\\_one(\".sister\")\nelsie.css.closest(\"p.story\")\n\\# <p class=\"story\">Once upon a time there were three little sisters; and their names were\n\\#  <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">Elsie</a>,\n\\#  <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">Lacie</a> and\n\\#  <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">Tillie</a>;\n\\#  and they lived at the bottom of a well.</p>\n\nThe `match()` method returns a Boolean depending on whether or not a specific [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n matches a selector:\n\n\\# elsie.css.match(\"#link1\")\nTrue\n\n\\# elsie.css.match(\"#link2\")\nFalse\n\nThe `filter()` method returns the subset of a tag's direct children that match a selector:\n\n\\[tag.string for tag in soup.find('p', 'story').css.filter('a')\\]\n\\# \\['Elsie', 'Lacie', 'Tillie'\\]\n\nThe `escape()` method escapes CSS identifiers that would otherwise be invalid:\n\nsoup.css.escape(\"1-strange-identifier\")\n\\# '\\\\\\\\31 -strange-identifier'\n\n### Namespaces in CSS selectors[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#namespaces-in-css-selectors \"Link to this heading\")\n\nIf you've parsed XML that defines namespaces, you can use them in CSS selectors.:\n\nfrom bs4 import BeautifulSoup\nxml \\= \"\"\"<tag xmlns:ns1=\"http://namespace1/\" xmlns:ns2=\"http://namespace2/\">\n <ns1:child>I'm in namespace 1</ns1:child>\n <ns2:child>I'm in namespace 2</ns2:child>\n</tag> \"\"\"\nnamespace\\_soup \\= BeautifulSoup(xml, \"xml\")\n\nnamespace\\_soup.css.select(\"child\")\n\\# \\[<ns1:child>I'm in namespace 1</ns1:child>, <ns2:child>I'm in namespace 2</ns2:child>\\]\n\nnamespace\\_soup.css.select(\"ns1|child\")\n\\# \\[<ns1:child>I'm in namespace 1</ns1:child>\\]\n\nBeautiful Soup tries to use namespace prefixes that make sense based on what it saw while parsing the document, but you can always provide your own dictionary of abbreviations:\n\nnamespaces \\= dict(first\\=\"http://namespace1/\", second\\=\"http://namespace2/\")\nnamespace\\_soup.css.select(\"second|child\", namespaces\\=namespaces)\n\\# \\[<ns1:child>I'm in namespace 2</ns1:child>\\]\n\n### History of CSS selector support[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#history-of-css-selector-support \"Link to this heading\")\n\nThe `.css` property was added in Beautiful Soup 4.12.0. Prior to this, only the `.select()` and `.select_one()` convenience methods were supported.\n\nThe Soup Sieve integration was added in Beautiful Soup 4.7.0. Earlier versions had the `.select()` method, but only the most commonly-used CSS selectors were supported.\n\nModifying the tree[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#modifying-the-tree \"Link to this heading\")\n\n========================================================================================================================\n\nBeautiful Soup's main strength is in searching the parse tree, but you can also modify the tree and write your changes as a new HTML or XML document.\n\nChanging tag names and attributes[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#changing-tag-names-and-attributes \"Link to this heading\")\n\n------------------------------------------------------------------------------------------------------------------------------------------------------\n\nI covered this earlier, in [`Tag.attrs`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag.attrs \"Tag.attrs\")\n, but it bears repeating. You can rename a tag, change the values of its attributes, add new attributes, and delete attributes:\n\nsoup \\= BeautifulSoup('<b class=\"boldest\">Extremely bold</b>', 'html.parser')\ntag \\= soup.b\n\ntag.name \\= \"blockquote\"\ntag\\['class'\\] \\= 'verybold'\ntag\\['id'\\] \\= 1\ntag\n\\# <blockquote class=\"verybold\" id=\"1\">Extremely bold</blockquote>\n\ndel tag\\['class'\\]\ndel tag\\['id'\\]\ntag\n\\# <blockquote>Extremely bold</blockquote>\n\nModifying `.string`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#modifying-string \"Link to this heading\")\n\n-----------------------------------------------------------------------------------------------------------------------\n\nIf you set a tag's `.string` attribute to a new string, the tag's contents are replaced with that string:\n\nmarkup \\= '<a href=\"http://example.com/\">I linked to <i>example.com</i></a>'\nsoup \\= BeautifulSoup(markup, 'html.parser')\n\ntag \\= soup.a\ntag.string \\= \"New link text.\"\ntag\n\\# <a href=\"http://example.com/\">New link text.</a>\n\nBe careful: if the tag contained other tags, they and all their contents will be destroyed.\n\n`append()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#append \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------\n\nYou can add to a tag's contents with `Tag.append()`. It works just like calling `.append()` on a Python list:\n\nsoup \\= BeautifulSoup(\"<a>Foo</a>\", 'html.parser')\nnew\\_string \\= soup.a.append(\"Bar\")\n\nsoup\n\\# <a>FooBar</a>\nsoup.a.contents\n\\# \\['Foo', 'Bar'\\]\nnew\\_string\n\\# 'Bar'\n\n`Tag.append()` returns the newly appended element.\n\n`extend()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#extend \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------\n\nStarting in Beautiful Soup 4.7.0, [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n also supports a method called `.extend()`, which adds every element of a list to a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n, in order:\n\nsoup \\= BeautifulSoup(\"<a>Soup</a>\", 'html.parser')\nsoup.a.extend(\\[\"'s\", \" \", \"on\"\\])\n\nsoup\n\\# <a>Soup's on</a>\nsoup.a.contents\n\\# \\['Soup', ''s', ' ', 'on'\\]\n\n`Tag.extend()` returns the list of appended elements.\n\n`NavigableString()` and `.new_tag()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#navigablestring-and-new-tag \"Link to this heading\")\n\n---------------------------------------------------------------------------------------------------------------------------------------------------\n\nIf you need to add a string to a document, no problem—you can pass a Python string in to `append()`, or you can call the [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n constructor:\n\nfrom bs4 import NavigableString\nsoup \\= BeautifulSoup(\"<b></b>\", 'html.parser')\ntag \\= soup.b\ntag.append(\"Hello\")\nnew\\_string \\= NavigableString(\" there\")\ntag.append(new\\_string)\ntag\n\\# <b>Hello there.</b>\ntag.contents\n\\# \\['Hello', ' there'\\]\n\nIf you want to create a comment or some other subclass of [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n, just call the constructor:\n\nfrom bs4 import Comment\nnew\\_comment \\= Comment(\"Nice to see you.\")\ntag.append(new\\_comment)\ntag\n\\# <b>Hello there<!--Nice to see you.--></b>\ntag.contents\n\\# \\['Hello', ' there', 'Nice to see you.'\\]\n\n_(This is a new feature in Beautiful Soup 4.4.0.)_\n\nWhat if you need to create a whole new tag? The best solution is to call the factory method `BeautifulSoup.new_tag()`:\n\nsoup \\= BeautifulSoup(\"<b></b>\", 'html.parser')\noriginal\\_tag \\= soup.b\n\nnew\\_tag \\= soup.new\\_tag(\"a\", href\\=\"http://www.example.com\", string\\=\"Link text.\")\noriginal\\_tag.append(new\\_tag)\noriginal\\_tag\n\\# <b><a href=\"http://www.example.com\">Link text.</a></b>\n\nOnly the first argument, the tag name, is required.\n\n_(The \\`\\`string\\`\\` argument to \\`\\`new\\_tag\\`\\` was introduced in Beautiful Soup 4.13.0.)_\n\nBecause insertion methods return the newly inserted element, you can create, insert, and obtain an element in one step:\n\nsoup \\= BeautifulSoup(\"<html></html>\", 'html.parser')\nhtml \\= soup.html\n\ntitle \\= html.append(soup.new\\_tag(\"title\"))\n\n`insert()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#insert \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------\n\n`Tag.insert()` is just like `Tag.append()`, except the new element doesn't necessarily go at the end of its parent's `.contents`. It will be inserted at whatever numeric position you say, similar to `.insert()` on a Python list:\n\nmarkup \\= '<a href=\"http://example.com/\">I linked to <i>example.com</i></a>'\nsoup \\= BeautifulSoup(markup, 'html.parser')\ntag \\= soup.a\n\nnew\\_string \\= tag.insert(1, \"but did not endorse \")\ntag\n\\# <a href=\"http://example.com/\">I linked to but did not endorse <i>example.com</i></a>\ntag.contents\n\\# \\['I linked to ', 'but did not endorse ', <i>example.com</i>\\]\nnew\\_string\n\\# 'but did not endorse '\n\nYou can pass more than one element into `Tag.insert()`. All the elements will be inserted, starting at the numeric position you provide.\n\n`Tag.insert()` returns the list of newly inserted elements.\n\n`insert_before()` and `insert_after()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#insert-before-and-insert-after \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------\n\nThe `insert_before()` method inserts tags or strings immediately before something else in the parse tree:\n\nsoup \\= BeautifulSoup(\"<b>leave</b>\", 'html.parser')\ntag \\= soup.new\\_tag(\"i\")\ntag.string \\= \"Don't\"\nsoup.b.string.insert\\_before(tag)\nsoup.b\n\\# <b><i>Don't</i>leave</b>\n\nThe `insert_after()` method inserts tags or strings immediately after something else in the parse tree:\n\ndiv \\= soup.new\\_tag('div')\ndiv.string \\= 'ever'\nsoup.b.i.insert\\_after(\" you \", div)\nsoup.b\n\\# <b><i>Don't</i> you <div>ever</div> leave</b>\nsoup.b.contents\n\\# \\[<i>Don't</i>, ' you', <div>ever</div>, 'leave'\\]\n\nBoth methods return the list of newly inserted elements.\n\n`clear()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#clear \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------\n\n`Tag.clear()` removes the contents of a tag:\n\nmarkup \\= '<a href=\"http://example.com/\">I linked to <i>example.com</i></a>'\nsoup \\= BeautifulSoup(markup, 'html.parser')\ntag \\= soup.a\n\ntag.clear()\ntag\n\\# <a href=\"http://example.com/\"></a>\n\n`extract()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#extract \"Link to this heading\")\n\n------------------------------------------------------------------------------------------------------\n\n`PageElement.extract()` removes a tag or string from the tree. It returns the tag or string that was extracted:\n\nmarkup \\= '<a href=\"http://example.com/\">I linked to <i>example.com</i></a>'\nsoup \\= BeautifulSoup(markup, 'html.parser')\na\\_tag \\= soup.a\n\ni\\_tag \\= soup.i.extract()\n\na\\_tag\n\\# <a href=\"http://example.com/\">I linked to</a>\n\ni\\_tag\n\\# <i>example.com</i>\n\nprint(i\\_tag.parent)\n\\# None\n\nAt this point you effectively have two parse trees: one rooted at the `BeautifulSoup` object you used to parse the document, and one rooted at the tag that was extracted. You can go on to call `extract()` on a child of the element you extracted:\n\nmy\\_string \\= i\\_tag.string.extract()\nmy\\_string\n\\# 'example.com'\n\nprint(my\\_string.parent)\n\\# None\ni\\_tag\n\\# <i></i>\n\n`decompose()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#decompose \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------------\n\n`Tag.decompose()` removes a tag from the tree, then _completely destroys it and its contents_:\n\nmarkup \\= '<a href=\"http://example.com/\">I linked to <i>example.com</i></a>'\nsoup \\= BeautifulSoup(markup, 'html.parser')\na\\_tag \\= soup.a\ni\\_tag \\= soup.i\n\ni\\_tag.decompose()\na\\_tag\n\\# <a href=\"http://example.com/\">I linked to</a>\n\nThe behavior of a decomposed [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n or [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n is not defined and you should not use it for anything. If you're not sure whether something has been decomposed, you can check its `.decomposed` property _(new in Beautiful Soup 4.9.0)_:\n\ni\\_tag.decomposed\n\\# True\n\na\\_tag.decomposed\n\\# False\n\n`replace_with()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#replace-with \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------------------\n\n`PageElement.replace_with()` extracts a tag or string from the tree, then replaces it with one or more tags or strings of your choice:\n\nmarkup \\= '<a href=\"http://example.com/\">I linked to <i>example.com</i></a>'\nsoup \\= BeautifulSoup(markup, 'html.parser')\na\\_tag \\= soup.a\n\nnew\\_tag \\= soup.new\\_tag(\"b\")\nnew\\_tag.string \\= \"example.com\"\na\\_tag.i.replace\\_with(new\\_tag)\n\na\\_tag\n\\# <a href=\"http://example.com/\">I linked to <b>example.com</b></a>\n\nbold\\_tag \\= soup.new\\_tag(\"b\")\nbold\\_tag.string \\= \"example\"\ni\\_tag \\= soup.new\\_tag(\"i\")\ni\\_tag.string \\= \"net\"\na\\_tag.b.replace\\_with(bold\\_tag, \".\", i\\_tag)\n\na\\_tag\n\\# <a href=\"http://example.com/\">I linked to <b>example</b>.<i>net</i></a>\n\n`replace_with()` returns the tag or string that got replaced, so that you can examine it or add it back to another part of the tree.\n\n_The ability to pass multiple arguments into replace\\_with() is new in Beautiful Soup 4.10.0._\n\n`wrap()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#wrap \"Link to this heading\")\n\n------------------------------------------------------------------------------------------------\n\n`PageElement.wrap()` wraps an element in the [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n object you specify. It returns the new wrapper:\n\nsoup \\= BeautifulSoup(\"<p>I wish I was bold.</p>\", 'html.parser')\nsoup.p.string.wrap(soup.new\\_tag(\"b\"))\n\\# <b>I wish I was bold.</b>\n\nsoup.p.wrap(soup.new\\_tag(\"div\"))\n\\# <div><p><b>I wish I was bold.</b></p></div>\n\n_This method is new in Beautiful Soup 4.0.5._\n\n`unwrap()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#unwrap \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------\n\n`Tag.unwrap()` is the opposite of `wrap()`. It replaces a tag with whatever's inside that tag. It's good for stripping out markup:\n\nmarkup \\= '<a href=\"http://example.com/\">I linked to <i>example.com</i></a>'\nsoup \\= BeautifulSoup(markup, 'html.parser')\na\\_tag \\= soup.a\n\na\\_tag.i.unwrap()\na\\_tag\n\\# <a href=\"http://example.com/\">I linked to example.com</a>\n\nLike `replace_with()`, `unwrap()` returns the tag that was replaced.\n\n`smooth()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#smooth \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------\n\nAfter calling a bunch of methods that modify the parse tree, you may end up with two or more [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n objects next to each other. Beautiful Soup doesn't have any problems with this, but since it can't happen in a freshly parsed document, you might not expect behavior like the following:\n\nsoup \\= BeautifulSoup(\"<p>A one</p>\", 'html.parser')\nsoup.p.append(\", a two\")\n\nsoup.p.contents\n\\# \\['A one', ', a two'\\]\n\nprint(soup.p.encode())\n\\# b'<p>A one, a two</p>'\n\nprint(soup.p.prettify())\n\\# <p>\n\\#  A one\n\\#  , a two\n\\# </p>\n\nYou can call `Tag.smooth()` to clean up the parse tree by consolidating adjacent strings:\n\nsoup.smooth()\n\nsoup.p.contents\n\\# \\['A one, a two'\\]\n\nprint(soup.p.prettify())\n\\# <p>\n\\#  A one, a two\n\\# </p>\n\n_This method is new in Beautiful Soup 4.8.0._\n\nOutput[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#output \"Link to this heading\")\n\n================================================================================================\n\nPretty-printing[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#pretty-printing \"Link to this heading\")\n\n------------------------------------------------------------------------------------------------------------------\n\nThe `prettify()` method will turn a Beautiful Soup parse tree into a nicely formatted Unicode string, with a separate line for each tag and each string:\n\nmarkup \\= '<html><head><body><a href=\"http://example.com/\">I linked to <i>example.com</i></a>'\nsoup \\= BeautifulSoup(markup, 'html.parser')\nsoup.prettify()\n\\# '<html>\\\\n <head>\\\\n </head>\\\\n <body>\\\\n  <a href=\"http://example.com/\">\\\\n...'\n\nprint(soup.prettify())\n\\# <html>\n\\#  <head>\n\\#  </head>\n\\#  <body>\n\\#   <a href=\"http://example.com/\">\n\\#    I linked to\n\\#    <i>\n\\#     example.com\n\\#    </i>\n\\#   </a>\n\\#  </body>\n\\# </html>\n\nYou can call `prettify()` on the top-level `BeautifulSoup` object, or on any of its [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n objects:\n\nprint(soup.a.prettify())\n\\# <a href=\"http://example.com/\">\n\\#  I linked to\n\\#  <i>\n\\#   example.com\n\\#  </i>\n\\# </a>\n\nSince it adds whitespace (in the form of newlines), `prettify()` changes the meaning of an HTML document and should not be used to reformat one. The goal of `prettify()` is to help you visually understand the structure of the documents you work with.\n\nNon-pretty printing[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#non-pretty-printing \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------------------------------\n\nIf you just want a string, with no fancy formatting, you can call `str()` on a `BeautifulSoup` object, or on a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n within it:\n\nstr(soup)\n\\# '<html><head></head><body><a href=\"http://example.com/\">I linked to <i>example.com</i></a></body></html>'\n\nstr(soup.a)\n\\# '<a href=\"http://example.com/\">I linked to <i>example.com</i></a>'\n\nThe `str()` function returns a string encoded in UTF-8. See [Encodings](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#encodings)\n for other options.\n\nYou can also call `encode()` to get a bytestring, and `decode()` to get Unicode.\n\nOutput formatters[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#output-formatters \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------------------------\n\nIf you give Beautiful Soup a document that contains HTML entities like \"&lquot;\", they'll be converted to Unicode characters:\n\nsoup \\= BeautifulSoup(\"&ldquo;Dammit!&rdquo; he said.\", 'html.parser')\nstr(soup)\n\\# '“Dammit!” he said.'\n\nIf you then convert the document to a bytestring, the Unicode characters will be encoded as UTF-8. You won't get the HTML entities back:\n\nsoup.encode(\"utf8\")\n\\# b'\\\\xe2\\\\x80\\\\x9cDammit!\\\\xe2\\\\x80\\\\x9d he said.'\n\nBy default, the only characters that are escaped upon output are bare ampersands and angle brackets. These get turned into \"&amp;\", \"&lt;\", and \"&gt;\", so that Beautiful Soup doesn't inadvertently generate invalid HTML or XML:\n\nsoup \\= BeautifulSoup(\"<p>The law firm of Dewey, Cheatem, & Howe</p>\", 'html.parser')\nsoup.p\n\\# <p>The law firm of Dewey, Cheatem, &amp; Howe</p>\n\nsoup \\= BeautifulSoup('<a href=\"http://example.com/?foo=val1&bar=val2\">A link</a>', 'html.parser')\nsoup.a\n\\# <a href=\"http://example.com/?foo=val1&amp;bar=val2\">A link</a>\n\nYou can change this behavior by providing a value for the `formatter` argument to `prettify()`, `encode()`, or `decode()`. Beautiful Soup recognizes five possible values for `formatter`.\n\nThe default is `formatter=\"minimal\"`. Strings will only be processed enough to ensure that Beautiful Soup generates valid HTML/XML:\n\nfrench \\= \"<p>Il a dit &lt;&lt;Sacr&eacute; bleu!&gt;&gt;</p>\"\nsoup \\= BeautifulSoup(french, 'html.parser')\nprint(soup.prettify(formatter\\=\"minimal\"))\n\\# <p>\n\\#  Il a dit &lt;&lt;Sacré bleu!&gt;&gt;\n\\# </p>\n\nIf you pass in `formatter=\"html\"`, Beautiful Soup will convert Unicode characters to HTML entities whenever possible:\n\nprint(soup.prettify(formatter\\=\"html\"))\n\\# <p>\n\\#  Il a dit &lt;&lt;Sacr&eacute; bleu!&gt;&gt;\n\\# </p>\n\nIf you pass in `formatter=\"html5\"`, it's similar to `formatter=\"html\"`, but Beautiful Soup will omit the closing slash in HTML void tags like \"br\":\n\nbr \\= BeautifulSoup(\"<br>\", 'html.parser').br\n\nprint(br.encode(formatter\\=\"html\"))\n\\# b'<br/>'\n\nprint(br.encode(formatter\\=\"html5\"))\n\\# b'<br>'\n\nIn addition, any attributes whose values are the empty string will become HTML-style Boolean attributes:\n\noption \\= BeautifulSoup('<option selected=\"\"></option>').option\nprint(option.encode(formatter\\=\"html\"))\n\\# b'<option selected=\"\"></option>'\n\nprint(option.encode(formatter\\=\"html5\"))\n\\# b'<option selected></option>'\n\n_(This behavior is new as of Beautiful Soup 4.10.0.)_\n\nIf you pass in `formatter=None`, Beautiful Soup will not modify strings at all on output. This is the fastest option, but it may lead to Beautiful Soup generating invalid HTML/XML, as in these examples:\n\nprint(soup.prettify(formatter\\=None))\n\\# <p>\n\\#  Il a dit <<Sacré bleu!>>\n\\# </p>\n\nlink\\_soup \\= BeautifulSoup('<a href=\"http://example.com/?foo=val1&bar=val2\">A link</a>', 'html.parser')\nprint(link\\_soup.a.encode(formatter\\=None))\n\\# b'<a href=\"http://example.com/?foo=val1&bar=val2\">A link</a>'\n\n### Formatter objects[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#formatter-objects \"Link to this heading\")\n\nIf you need more sophisticated control over your output, you can instantiate one of Beautiful Soup's formatter classes and pass that object in as `formatter`.\n\n_class_ HTMLFormatter[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#HTMLFormatter \"Link to this definition\")\n\nUsed to customize the formatting rules for HTML documents.\n\nHere's a formatter that converts strings to uppercase, whether they occur in a string object or an attribute value:\n\nfrom bs4.formatter import HTMLFormatter\ndef uppercase(str):\n    return str.upper()\n\nformatter \\= HTMLFormatter(uppercase)\n\nprint(soup.prettify(formatter\\=formatter))\n\\# <p>\n\\#  IL A DIT <<SACRÉ BLEU!>>\n\\# </p>\n\nprint(link\\_soup.a.prettify(formatter\\=formatter))\n\\# <a href=\"HTTP://EXAMPLE.COM/?FOO=VAL1&BAR=VAL2\">\n\\#  A LINK\n\\# </a>\n\nHere's a formatter that increases the indentation width when pretty-printing:\n\nformatter \\= HTMLFormatter(indent\\=8)\nprint(link\\_soup.a.prettify(formatter\\=formatter))\n\\# <a href=\"http://example.com/?foo=val1&bar=val2\">\n\\#         A link\n\\# </a>\n\n_class_ XMLFormatter[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#XMLFormatter \"Link to this definition\")\n\nUsed to customize the formatting rules for XML documents.\n\n### Writing your own formatter[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#writing-your-own-formatter \"Link to this heading\")\n\nSubclassing [`HTMLFormatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#HTMLFormatter \"HTMLFormatter\")\n or [`XMLFormatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#XMLFormatter \"XMLFormatter\")\n will give you even more control over the output. For example, Beautiful Soup sorts the attributes in every tag by default:\n\nattr\\_soup \\= BeautifulSoup(b'<p z=\"1\" m=\"2\" a=\"3\"></p>', 'html.parser')\nprint(attr\\_soup.p.encode())\n\\# <p a=\"3\" m=\"2\" z=\"1\"></p>\n\nTo turn this off, you can subclass the `Formatter.attributes()` method, which controls which attributes are output and in what order. This implementation also filters out the attribute called \"m\" whenever it appears:\n\nclass UnsortedAttributes(HTMLFormatter):\n    def attributes(self, tag):\n        for k, v in tag.attrs.items():\n            if k \\== 'm':\n                continue\n            yield k, v\n\nprint(attr\\_soup.p.encode(formatter\\=UnsortedAttributes()))\n\\# <p z=\"1\" a=\"3\"></p>\n\nOne last caveat: if you create a [`CData`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#CData \"CData\")\n object, the text inside that object is always presented _exactly as it appears, with no formatting_. Beautiful Soup will call your entity substitution function, just in case you've written a custom function that counts all the strings in the document or something, but it will ignore the return value:\n\nfrom bs4.element import CData\nsoup \\= BeautifulSoup(\"<a></a>\", 'html.parser')\nsoup.a.string \\= CData(\"one < three\")\nprint(soup.a.prettify(formatter\\=\"html\"))\n\\# <a>\n\\#  <!\\[CDATA\\[one < three\\]\\]>\n\\# </a>\n\n`get_text()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#get-text \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------------\n\nIf you only want the human-readable text inside a document or tag, you can use the `get_text()` method. It returns all the text in a document or beneath a tag, as a single Unicode string:\n\nmarkup \\= '<a href=\"http://example.com/\">\\\\nI linked to <i>example.com</i>\\\\n</a>'\nsoup \\= BeautifulSoup(markup, 'html.parser')\n\nsoup.get\\_text()\n'\\\\nI linked to example.com\\\\n'\nsoup.i.get\\_text()\n'example.com'\n\nYou can specify a string to be used to join the bits of text together:\n\n\\# soup.get\\_text(\"|\")\n'\\\\nI linked to |example.com|\\\\n'\n\nYou can tell Beautiful Soup to strip whitespace from the beginning and end of each bit of text:\n\n\\# soup.get\\_text(\"|\", strip=True)\n'I linked to|example.com'\n\nBut at that point you might want to use the [.stripped\\_strings](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#string-generators)\n generator instead, and process the text yourself:\n\n\\[text for text in soup.stripped\\_strings\\]\n\\# \\['I linked to', 'example.com'\\]\n\n_As of Beautiful Soup version 4.9.0, when lxml or html.parser are in use, the contents of <script>, <style>, and <template> tags are generally not considered to be 'text', since those tags are not part of the human-visible content of the page._\n\n_As of Beautiful Soup version 4.10.0, you can call get\\_text(), .strings, or .stripped\\_strings on a NavigableString object. It will either return the object itself, or nothing, so the only reason to do this is when you're iterating over a mixed list._\n\n_As of Beautiful Soup version 4.13.0, you can call .string on a NavigableString object. It will return the object itself, so again, the only reason to do this is when you're iterating over a mixed list._\n\nSpecifying the parser to use[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#specifying-the-parser-to-use \"Link to this heading\")\n\n============================================================================================================================================\n\nIf you just need to parse some HTML, you can dump the markup into the `BeautifulSoup` constructor, and it'll probably be fine. Beautiful Soup will pick a parser for you and parse the data. But there are a few additional arguments you can pass in to the constructor to change which parser is used.\n\nThe first argument to the `BeautifulSoup` constructor is a string or an open filehandle—the source of the markup you want parsed. The second argument is _how_ you'd like the markup parsed.\n\nIf you don't specify anything, you'll get the best HTML parser that's installed. Beautiful Soup ranks lxml's parser as being the best, then html5lib's, then Python's built-in parser. You can override this by specifying one of the following:\n\n*   What type of markup you want to parse. Currently supported values are \"html\", \"xml\", and \"html5\".\n    \n*   The name of the parser library you want to use. Currently supported options are \"lxml\", \"html5lib\", and \"html.parser\" (Python's built-in HTML parser).\n    \n\nThe section [Installing a parser](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser)\n contrasts the supported parsers.\n\nIf you ask for a parser that isn't installed, Beautiful Soup will raise an exception so that you don't inadvertently parse a document under an unknown set of rules. For example, right now, the only supported XML parser is lxml. If you don't have lxml installed, asking for an XML parser won't give you one, and asking for \"lxml\" won't work either.\n\nDifferences between parsers[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#differences-between-parsers \"Link to this heading\")\n\n------------------------------------------------------------------------------------------------------------------------------------------\n\nBeautiful Soup presents the same interface to a number of different parsers, but each parser is different. Different parsers will create different parse trees from the same document. The biggest differences are between the HTML parsers and the XML parsers. Here's a short document, parsed as HTML using the parser that comes with Python:\n\nBeautifulSoup(\"<a><b/></a>\", \"html.parser\")\n\\# <a><b></b></a>\n\nSince a standalone <b/> tag is not valid HTML, html.parser turns it into a <b></b> tag pair.\n\nHere's the same document parsed as XML (running this requires that you have lxml installed). Note that the standalone <b/> tag is left alone, and that the document is given an XML declaration instead of being put into an <html> tag.:\n\nprint(BeautifulSoup(\"<a><b/></a>\", \"xml\"))\n\\# <?xml version=\"1.0\" encoding=\"utf-8\"?>\n\\# <a><b/></a>\n\nThere are also differences between HTML parsers. If you give Beautiful Soup a perfectly-formed HTML document, these differences won't matter. One parser will be faster than another, but they'll all give you a data structure that looks exactly like the original HTML document.\n\nBut if the document is not perfectly-formed, different parsers will give different results. Here's a short, invalid document parsed using lxml's HTML parser. Note that the <a> tag gets wrapped in <body> and <html> tags, and the dangling </p> tag is simply ignored:\n\nBeautifulSoup(\"<a></p>\", \"lxml\")\n\\# <html><body><a></a></body></html>\n\nHere's the same document parsed using html5lib:\n\nBeautifulSoup(\"<a></p>\", \"html5lib\")\n\\# <html><head></head><body><a><p></p></a></body></html>\n\nInstead of ignoring the dangling </p> tag, html5lib pairs it with an opening <p> tag. html5lib also adds an empty <head> tag; lxml didn't bother.\n\nHere's the same document parsed with Python's built-in HTML parser:\n\nBeautifulSoup(\"<a></p>\", \"html.parser\")\n\\# <a></a>\n\nLike lxml, this parser ignores the closing </p> tag. Unlike html5lib or lxml, this parser makes no attempt to create a well-formed HTML document by adding <html> or <body> tags.\n\nSince the document \"<a></p>\" is invalid, none of these techniques is the 'correct' way to handle it. The html5lib parser uses techniques that are part of the HTML5 standard, so it has the best claim on being the 'correct' way, but all three techniques are legitimate.\n\nDifferences between parsers can affect your script. If you're planning on distributing your script to other people, or running it on multiple machines, you should specify a parser in the `BeautifulSoup` constructor. That will reduce the chances that your users parse a document differently from the way you parse it.\n\nEncodings[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#encodings \"Link to this heading\")\n\n======================================================================================================\n\nAny HTML or XML document is written in a specific encoding like ASCII or UTF-8. But when you load that document into Beautiful Soup, you'll discover it's been converted to Unicode:\n\nmarkup \\= b\"<h1>Sacr\\\\xc3\\\\xa9 bleu!</h1>\"\nsoup \\= BeautifulSoup(markup, 'html.parser')\nsoup.h1\n\\# <h1>Sacré bleu!</h1>\nsoup.h1.string\n\\# 'Sacr\\\\xe9 bleu!'\n\nIt's not magic. (That sure would be nice.) Beautiful Soup uses a sub-library called [Unicode, Dammit](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#unicode-dammit)\n to detect a document's encoding and convert it to Unicode. The autodetected encoding is available as the `.original_encoding` attribute of the `BeautifulSoup` object:\n\nsoup.original\\_encoding\n\\# 'utf-8'\n\nIf `.original_encoding` is `None`, that means the document was already Unicode when it was passed into Beautiful Soup:\n\nmarkup \\= \"<h1>Sacré bleu!</h1>\"\nsoup \\= BeautifulSoup(markup, 'html.parser')\nprint(soup.original\\_encoding)\n\\# None\n\nUnicode, Dammit guesses correctly most of the time, but sometimes it makes mistakes. Sometimes it guesses correctly, but only after a byte-by-byte search of the document that takes a very long time. If you happen to know a document's encoding ahead of time, you can avoid mistakes and delays by passing it to the `BeautifulSoup` constructor as `from_encoding`.\n\nHere's a document written in ISO-8859-8. The document is so short that Unicode, Dammit can't get a lock on it, and misidentifies it as ISO-8859-7:\n\nmarkup \\= b\"<h1>\\\\xed\\\\xe5\\\\xec\\\\xf9</h1>\"\nsoup \\= BeautifulSoup(markup, 'html.parser')\nprint(soup.h1)\n\\# <h1>νεμω</h1>\nprint(soup.original\\_encoding)\n\\# iso-8859-7\n\nWe can fix this by passing in the correct `from_encoding`:\n\nsoup \\= BeautifulSoup(markup, 'html.parser', from\\_encoding\\=\"iso-8859-8\")\nprint(soup.h1)\n\\# <h1>םולש</h1>\nprint(soup.original\\_encoding)\n\\# iso8859-8\n\nIf you don't know what the correct encoding is, but you know that Unicode, Dammit is guessing wrong, you can pass the wrong guesses in as `exclude_encodings`:\n\nsoup \\= BeautifulSoup(markup, 'html.parser', exclude\\_encodings\\=\\[\"iso-8859-7\"\\])\nprint(soup.h1)\n\\# <h1>םולש</h1>\nprint(soup.original\\_encoding)\n\\# WINDOWS-1255\n\nWindows-1255 isn't 100% correct, but that encoding is a compatible superset of ISO-8859-8, so it's close enough. (`exclude_encodings` is a new feature in Beautiful Soup 4.4.0.)\n\nIn rare cases (usually when a UTF-8 document contains text written in a completely different encoding), the only way to get Unicode may be to replace some characters with the special Unicode character \"REPLACEMENT CHARACTER\" (U+FFFD, �). If Unicode, Dammit needs to do this, it will set the `.contains_replacement_characters` attribute to `True` on the `UnicodeDammit` or `BeautifulSoup` object. This lets you know that the Unicode representation is not an exact representation of the original—some data was lost. If a document contains �, but `.contains_replacement_characters` is `False`, you'll know that the � was there originally (as it is in this paragraph) and doesn't stand in for missing data.\n\nOutput encoding[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#output-encoding \"Link to this heading\")\n\n------------------------------------------------------------------------------------------------------------------\n\nWhen you write out an output document from Beautiful Soup, you get a UTF-8 document, even if the input document wasn't in UTF-8 to begin with. Here's a document written in the Latin-1 encoding:\n\nmarkup \\= b'''\n <html>\n  <head>\n   <meta content=\"text/html; charset=ISO-Latin-1\" http-equiv=\"Content-type\" />\n  </head>\n  <body>\n   <p>Sacr\\\\xe9 bleu!</p>\n  </body>\n </html>\n'''\n\nsoup \\= BeautifulSoup(markup, 'html.parser')\nprint(soup.prettify())\n\\# <html>\n\\#  <head>\n\\#   <meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-type\" />\n\\#  </head>\n\\#  <body>\n\\#   <p>\n\\#    Sacré bleu!\n\\#   </p>\n\\#  </body>\n\\# </html>\n\nNote that the <meta> tag has been rewritten to reflect the fact that the document is now in UTF-8.\n\nIf you don't want UTF-8, you can pass an encoding into `prettify()`:\n\nprint(soup.prettify(\"latin-1\"))\n\\# <html>\n\\#  <head>\n\\#   <meta content=\"text/html; charset=latin-1\" http-equiv=\"Content-type\" />\n\\# ...\n\nYou can also call encode() on the `BeautifulSoup` object, or any element in the soup, just as if it were a Python string:\n\nsoup.p.encode(\"latin-1\")\n\\# b'<p>Sacr\\\\xe9 bleu!</p>'\n\nsoup.p.encode(\"utf-8\")\n\\# b'<p>Sacr\\\\xc3\\\\xa9 bleu!</p>'\n\nAny characters that can't be represented in your chosen encoding will be converted into numeric XML entity references. Here's a document that includes the Unicode character SNOWMAN:\n\nmarkup \\= u\"<b>\\\\N{SNOWMAN}</b>\"\nsnowman\\_soup \\= BeautifulSoup(markup, 'html.parser')\ntag \\= snowman\\_soup.b\n\nThe SNOWMAN character can be part of a UTF-8 document (it looks like ☃), but there's no representation for that character in ISO-Latin-1 or ASCII, so it's converted into \"&#9731\" for those encodings:\n\nprint(tag.encode(\"utf-8\"))\n\\# b'<b>\\\\xe2\\\\x98\\\\x83</b>'\n\nprint(tag.encode(\"latin-1\"))\n\\# b'<b>&#9731;</b>'\n\nprint(tag.encode(\"ascii\"))\n\\# b'<b>&#9731;</b>'\n\nUnicode, Dammit[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#unicode-dammit \"Link to this heading\")\n\n-----------------------------------------------------------------------------------------------------------------\n\nYou can use Unicode, Dammit without using Beautiful Soup. It's useful whenever you have data in an unknown encoding and you just want it to become Unicode:\n\nfrom bs4 import UnicodeDammit\ndammit \\= UnicodeDammit(b\"\\\\xc2\\\\xabSacr\\\\xc3\\\\xa9 bleu!\\\\xc2\\\\xbb\")\nprint(dammit.unicode\\_markup)\n\\# «Sacré bleu!»\ndammit.original\\_encoding\n\\# 'utf-8'\n\nUnicode, Dammit's guesses will get a lot more accurate if you install one of these Python libraries: `charset-normalizer`, `chardet`, or `cchardet`. The more data you give Unicode, Dammit, the more accurately it will guess. If you have your own suspicions as to what the encoding might be, you can pass them in as a list:\n\ndammit \\= UnicodeDammit(\"Sacr\\\\xe9 bleu!\", \\[\"latin-1\", \"iso-8859-1\"\\])\nprint(dammit.unicode\\_markup)\n\\# Sacré bleu!\ndammit.original\\_encoding\n\\# 'latin-1'\n\nUnicode, Dammit has two special features that Beautiful Soup doesn't use.\n\n### Smart quotes[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#smart-quotes \"Link to this heading\")\n\nYou can use Unicode, Dammit to convert Microsoft smart quotes to HTML or XML entities:\n\nmarkup \\= b\"<p>I just \\\\x93love\\\\x94 Microsoft Word\\\\x92s smart quotes</p>\"\n\nUnicodeDammit(markup, \\[\"windows-1252\"\\], smart\\_quotes\\_to\\=\"html\").unicode\\_markup\n\\# '<p>I just &ldquo;love&rdquo; Microsoft Word&rsquo;s smart quotes</p>'\n\nUnicodeDammit(markup, \\[\"windows-1252\"\\], smart\\_quotes\\_to\\=\"xml\").unicode\\_markup\n\\# '<p>I just &#x201C;love&#x201D; Microsoft Word&#x2019;s smart quotes</p>'\n\nYou can also convert Microsoft smart quotes to ASCII quotes:\n\nUnicodeDammit(markup, \\[\"windows-1252\"\\], smart\\_quotes\\_to\\=\"ascii\").unicode\\_markup\n\\# '<p>I just \"love\" Microsoft Word\\\\'s smart quotes</p>'\n\nHopefully you'll find this feature useful, but Beautiful Soup doesn't use it. Beautiful Soup prefers the default behavior, which is to convert Microsoft smart quotes to Unicode characters along with everything else:\n\nUnicodeDammit(markup, \\[\"windows-1252\"\\]).unicode\\_markup\n\\# '<p>I just “love” Microsoft Word’s smart quotes</p>'\n\n### Inconsistent encodings[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#inconsistent-encodings \"Link to this heading\")\n\nSometimes a document is mostly in UTF-8, but contains Windows-1252 characters such as (again) Microsoft smart quotes. This can happen when a website includes data from multiple sources. You can use `UnicodeDammit.detwingle()` to turn such a document into pure UTF-8. Here's a simple example:\n\nsnowmen \\= (u\"\\\\N{SNOWMAN}\" \\* 3)\nquote \\= (u\"\\\\N{LEFT DOUBLE QUOTATION MARK}I like snowmen!\\\\N{RIGHT DOUBLE QUOTATION MARK}\")\ndoc \\= snowmen.encode(\"utf8\") + quote.encode(\"windows\\_1252\")\n\nThis document is a mess. The snowmen are in UTF-8 and the quotes are in Windows-1252. You can display the snowmen or the quotes, but not both:\n\nprint(doc)\n\\# ☃☃☃�I like snowmen!�\n\nprint(doc.decode(\"windows-1252\"))\n\\# â˜ƒâ˜ƒâ˜ƒ“I like snowmen!”\n\nDecoding the document as UTF-8 raises a `UnicodeDecodeError`, and decoding it as Windows-1252 gives you gibberish. Fortunately, `UnicodeDammit.detwingle()` will convert the string to pure UTF-8, allowing you to decode it to Unicode and display the snowmen and quote marks simultaneously:\n\nnew\\_doc \\= UnicodeDammit.detwingle(doc)\nprint(new\\_doc.decode(\"utf8\"))\n\\# ☃☃☃“I like snowmen!”\n\n`UnicodeDammit.detwingle()` only knows how to handle Windows-1252 embedded in UTF-8 (or vice versa, I suppose), but this is the most common case.\n\nNote that you must know to call `UnicodeDammit.detwingle()` on your data before passing it into `BeautifulSoup` or the `UnicodeDammit` constructor. Beautiful Soup assumes that a document has a single encoding, whatever it might be. If you pass it a document that contains both UTF-8 and Windows-1252, it's likely to think the whole document is Windows-1252, and the document will come out looking like `â˜ƒâ˜ƒâ˜ƒ“I like snowmen!”`.\n\n`UnicodeDammit.detwingle()` is new in Beautiful Soup 4.1.0.\n\nLine numbers[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#line-numbers \"Link to this heading\")\n\n============================================================================================================\n\nThe `html.parser` and `html5lib` parsers can keep track of where in the original document each [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n was found. You can access this information as `Tag.sourceline` (line number) and `Tag.sourcepos` (position of the start tag within a line):\n\nmarkup \\= \"<p\\\\n\\>Paragraph 1</p>\\\\n    <p>Paragraph 2</p>\"\nsoup \\= BeautifulSoup(markup, 'html.parser')\nfor tag in soup.find\\_all('p'):\n    print(repr((tag.sourceline, tag.sourcepos, tag.string)))\n\\# (1, 0, 'Paragraph 1')\n\\# (3, 4, 'Paragraph 2')\n\nNote that the two parsers mean slightly different things by `sourceline` and `sourcepos`. For html.parser, these numbers represent the position of the initial less-than sign. For html5lib, these numbers represent the position of the final greater-than sign:\n\nsoup \\= BeautifulSoup(markup, 'html5lib')\nfor tag in soup.find\\_all('p'):\n    print(repr((tag.sourceline, tag.sourcepos, tag.string)))\n\\# (2, 0, 'Paragraph 1')\n\\# (3, 6, 'Paragraph 2')\n\nYou can shut off this feature by passing `store_line_numbers=False` into the `BeautifulSoup` constructor:\n\nmarkup \\= \"<p\\\\n\\>Paragraph 1</p>\\\\n    <p>Paragraph 2</p>\"\nsoup \\= BeautifulSoup(markup, 'html.parser', store\\_line\\_numbers\\=False)\nprint(soup.p.sourceline)\n\\# None\n\n_This feature is new in 4.8.1, and the parsers based on lxml don't support it._\n\nComparing objects for equality[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#comparing-objects-for-equality \"Link to this heading\")\n\n================================================================================================================================================\n\nBeautiful Soup says that two [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n or [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n objects are equal when they represent the same HTML or XML markup, even if their attributes are in a different order or they live in different parts of the object tree. In this example, the two <b> tags are treated as equal, because they both look like \"<b>pizza</b>\":\n\nmarkup \\= \"<p>I want <b>pizza</b> and more <b>pizza</b>!</p>\"\nsoup \\= BeautifulSoup(markup, 'html.parser')\nfirst\\_b, second\\_b \\= soup.find\\_all('b')\nprint(first\\_b \\== second\\_b)\n\\# True\n\nprint(first\\_b.previous\\_element \\== second\\_b.previous\\_element)\n\\# False\n\nIf you want to see whether two variables refer to exactly the same object, use _is_:\n\nprint(first\\_b is second\\_b)\n\\# False\n\nCopying Beautiful Soup objects[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#copying-beautiful-soup-objects \"Link to this heading\")\n\n================================================================================================================================================\n\nYou can use `copy.copy()` to create a copy of any [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n or [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n:\n\nimport copy\np\\_copy \\= copy.copy(soup.p)\nprint(p\\_copy)\n\\# <p>I want <b>pizza</b> and more <b>pizza</b>!</p>\n\nThe copy is considered equal to the original, since it represents the same markup as the original, but it's not the same object:\n\nprint(soup.p \\== p\\_copy)\n\\# True\n\nprint(soup.p is p\\_copy)\n\\# False\n\nThe only real difference is that the copy is completely detached from the original Beautiful Soup object tree, just as if `extract()` had been called on it. This is because two different [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n objects can't occupy the same space at the same time.\n\n> print(p\\_copy.parent)\n> \\# None\n\nYou can use `Tag.copy_self()` to create a copy of a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n without copying its contents.\n\n> original \\= BeautifulSoup('<a id=\"a\\_tag\" class=\"link\">the <i>link</i></a>', 'html.parser')\n> print(original.a)\n> \\# <a class=\"link\" id=\"a\\_tag\">the <i>link</a>\n> print(original.a.copy\\_self())\n> \\# <a class=\"link\" id=\"a\\_tag\"></a>\n\n_(Tag.copy\\_self() is introduced in Beautiful Soup 4.13.0.)_\n\nLow-level search interface[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#low-level-search-interface \"Link to this heading\")\n\n========================================================================================================================================\n\nAlmost everyone who uses Beautiful Soup to extract information from a document can get what they need using the methods described in [Searching the tree](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#searching-the-tree)\n. However, there's a lower-level interface that lets you define any matching behavior you want. Behind the scenes, the parts of the Beautiful Soup API that most people use--`find_all()` and the like—are actually using this low-level interface, and you can use it directly.\n\n_(Access to the low-level search interface is a new feature in Beautiful Soup 4.13.0.)_\n\nCustom element filtering[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#custom-element-filtering \"Link to this heading\")\n\n------------------------------------------------------------------------------------------------------------------------------------\n\n_class_ ElementFilter[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#ElementFilter \"Link to this definition\")\n\nThe [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#ElementFilter \"ElementFilter\")\n class is your entry point to the low-level interface. To use it, define a function that takes a `PageElement` object (which could be either a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n or a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n). The function must return `True` if the element matches your custom criteria, and `False` if it doesn't.\n\nThis example function looks for content-containing tags and strings, but skips whitespace-only strings:\n\nfrom bs4 import Tag, NavigableString\ndef non\\_whitespace\\_element\\_func(tag\\_or\\_string):\n    \"\"\"\n    return True for:\n    \\* all Tag objects\n    \\* NavigableString objects that contain non-whitespace text\n    \"\"\"\n    return (\n        isinstance(tag\\_or\\_string, Tag) or\n        (isinstance(tag\\_or\\_string, NavigableString) and\n            tag\\_or\\_string.strip() != \"\"))\n\nOnce you have a function, pass it into the [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#ElementFilter \"ElementFilter\")\n constructor:\n\nfrom bs4.filter import ElementFilter\nnon\\_whitespace\\_filter \\= ElementFilter(non\\_whitespace\\_element\\_func)\n\nYou can then use this [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#ElementFilter \"ElementFilter\")\n object as the first argument to any of the [Searching the tree](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#searching-the-tree)\n methods. Whatever criteria you defined in your function will be used instead of the default Beautiful Soup match logic:\n\nfrom bs4 import BeautifulSoup\nsmall\\_doc \\= \"\"\"\n<p>\n  <b>bold</b>\n  <i>italic</i>\n  and\n  <u>underline</u>\n</p>\n\"\"\"\nsoup \\= BeautifulSoup(small\\_doc, 'html.parser')\n\nsoup.find('p').find\\_all(non\\_whitespace\\_filter, recursive\\=False)\n\\# \\[<b>bold</b>, <i>italic</i>, '\\\\n  and\\\\n  ', <u>underline</u>\\]\n\nsoup.find(\"b\").find\\_next(non\\_whitespace\\_filter)\n\\# 'bold'\n\nsoup.find(\"i\").find\\_next\\_siblings(non\\_whitespace\\_filter)\n\\# \\['\\\\n  and\\\\n  ', <u>underline</u>\\]\n\nEvery potential match will be run through your function, and the only `PageElement` objects returned will be the ones where your function returned `True`.\n\nTo summarize the function-based matching behaviors,\n\n*   A function passed as the first argument to a search method (or equivalently, using the `name` argument) considers only [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n     objects.\n    \n*   A function passed to a search method using the `string` argument considers only [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n     objects.\n    \n*   A function passed to a search method using an [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#ElementFilter \"ElementFilter\")\n     object considers both [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n     and [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n     objects.\n    \n\n### Custom element iteration[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#custom-element-iteration \"Link to this heading\")\n\nElementFilter.filter()[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#ElementFilter.filter \"Link to this definition\")\n\nBy passing an [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#ElementFilter \"ElementFilter\")\n instance into Beautiful Soup's tree-searching methods, you can completely customize what it means for Beautiful Soup to match an element as it iterates over the parse tree. By using the [`ElementFilter.filter()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#ElementFilter.filter \"ElementFilter.filter\")\n method, you can also completely customize what it means for Beautiful Soup to iterate over the parse tree in the first place.\n\nThe [`ElementFilter.filter()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#ElementFilter.filter \"ElementFilter.filter\")\n method takes a generator that yields a stream of `PageElement` objects. There is no restriction on which `PageElement` objects show up, how many times they show up, or in which order. Theoretically, they don't even need to be from the same `BeautifulSoup` document. You can do whatever makes sense for you.\n\nHere's a silly example: a generator that walks randomly back and forth through the parse tree:\n\nimport random\ndef random\\_walk(starting\\_location):\n    location \\= starting\\_location\n    while location is not None:\n        yield location\n        if random.random() < 0.5:\n            location \\= location.next\\_element\n        else:\n            location \\= location.previous\\_element\n        if location is None:\n            return\n\nPass this generator into the example [`ElementFilter.filter()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#ElementFilter.filter \"ElementFilter.filter\")\n and Beautiful Soup will wander randomly around the parse tree, applying the `non_whitespace_filter` function to every element it finds, and yielding all of the matches—potentially yielding a given object more than once:\n\n\\[x for x in non\\_whitespace\\_filter.filter(random\\_walk(soup.b))\\]\n\\# \\[<b>bold</b>, 'bold', <b>bold</b>, <p><b>bold</b>...\\]\n\n\\[x for x in non\\_whitespace\\_filter.filter(random\\_walk(soup.b))\\]\n\\# \\[<b>bold</b>, <b>bold</b>, 'bold', <i>italic</i>, <i>italic</i>, ...\\]\n\n(Note that unlike the other code examples in this documentation, this example can give different results every time you run it, thanks to the random element. It's very unlikely, but this function could wander around the parse tree forever and _never_ complete.)\n\nAdvanced parser customization[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#advanced-parser-customization \"Link to this heading\")\n\n==============================================================================================================================================\n\nBeautiful Soup offers a number of ways to customize how the parser treats incoming HTML and XML. This section covers the most commonly used customization techniques.\n\nParsing only part of a document[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#parsing-only-part-of-a-document \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------------------------------------------------------\n\nLet's say you want to use Beautiful Soup to look at a document's <a> tags. It's a waste of time and memory to parse the entire document and then go over it again looking for <a> tags. It would be much faster to ignore everything that wasn't an <a> tag in the first place. The [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#SoupStrainer \"SoupStrainer\")\n class allows you to choose which parts of an incoming document are parsed. You just create a [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#SoupStrainer \"SoupStrainer\")\n and pass it in to the `BeautifulSoup` constructor as the `parse_only` argument.\n\n(Note that _this feature won't work if you're using the html5lib parser_. If you use html5lib, the whole document will be parsed, no matter what. This is because html5lib constantly rearranges the parse tree as it works, and if some part of the document didn't actually make it into the parse tree, it'll crash. To avoid confusion, in the examples below I'll be forcing Beautiful Soup to use Python's built-in parser.)\n\n_class_ SoupStrainer[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#SoupStrainer \"Link to this definition\")\n\nThe [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#SoupStrainer \"SoupStrainer\")\n class takes the same arguments as a typical method from [Searching the tree](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#searching-the-tree)\n: [name](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#name)\n, [attrs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#attrs)\n, [string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id11)\n, and [\\*\\*kwargs](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kwargs)\n. Here are three [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#SoupStrainer \"SoupStrainer\")\n objects:\n\nfrom bs4 import SoupStrainer\n\nonly\\_a\\_tags \\= SoupStrainer(\"a\")\n\nonly\\_tags\\_with\\_id\\_link2 \\= SoupStrainer(id\\=\"link2\")\n\ndef is\\_short\\_string(string):\n    return string is not None and len(string) < 10\n\nonly\\_short\\_strings \\= SoupStrainer(string\\=is\\_short\\_string)\n\nI'm going to bring back the \"three sisters\" document one more time, and we'll see what the document looks like when it's parsed with these three [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#SoupStrainer \"SoupStrainer\")\n objects:\n\nhtml\\_doc \\= \"\"\"<html><head><title>The Dormouse's story</title></head>\n<body>\n<p class=\"title\"><b>The Dormouse's story</b></p>\n\n<p class=\"story\">Once upon a time there were three little sisters; and their names were\n<a href=\"http://example.com/elsie\" class=\"sister\" id=\"link1\">Elsie</a>,\n<a href=\"http://example.com/lacie\" class=\"sister\" id=\"link2\">Lacie</a> and\n<a href=\"http://example.com/tillie\" class=\"sister\" id=\"link3\">Tillie</a>;\nand they lived at the bottom of a well.</p>\n\n<p class=\"story\">...</p>\n\"\"\"\n\nprint(BeautifulSoup(html\\_doc, \"html.parser\", parse\\_only\\=only\\_a\\_tags).prettify())\n\\# <a class=\"sister\" href=\"http://example.com/elsie\" id=\"link1\">\n\\#  Elsie\n\\# </a>\n\\# <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">\n\\#  Lacie\n\\# </a>\n\\# <a class=\"sister\" href=\"http://example.com/tillie\" id=\"link3\">\n\\#  Tillie\n\\# </a>\n\nprint(BeautifulSoup(html\\_doc, \"html.parser\", parse\\_only\\=only\\_tags\\_with\\_id\\_link2).prettify())\n\\# <a class=\"sister\" href=\"http://example.com/lacie\" id=\"link2\">\n\\#  Lacie\n\\# </a>\n\nprint(BeautifulSoup(html\\_doc, \"html.parser\", parse\\_only\\=only\\_short\\_strings).prettify())\n\\# Elsie\n\\# ,\n\\# Lacie\n\\# and\n\\# Tillie\n\\# ...\n#\n\nThe [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#SoupStrainer \"SoupStrainer\")\n behavior is as follows:\n\n*   When a tag matches, it is kept (including all its contents, whether they also match or not).\n    \n*   When a tag does not match, the tag itself is not kept, but parsing continues into its contents to look for other tags that do match.\n    \n\nCustomizing multi-valued attributes[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#customizing-multi-valued-attributes \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------------------------------------------------------------\n\nIn an HTML document, an attribute like `class` is given a list of values, and an attribute like `id` is given a single value, because the HTML specification treats those attributes differently:\n\nmarkup \\= '<a class=\"cls1 cls2\" id=\"id1 id2\">'\nsoup \\= BeautifulSoup(markup, 'html.parser')\nsoup.a\\['class'\\]\n\\# \\['cls1', 'cls2'\\]\nsoup.a\\['id'\\]\n\\# 'id1 id2'\n\nYou can turn this off by passing in `multi_valued_attributes=None`. Than all attributes will be given a single value:\n\nsoup \\= BeautifulSoup(markup, 'html.parser', multi\\_valued\\_attributes\\=None)\nsoup.a\\['class'\\]\n\\# 'cls1 cls2'\nsoup.a\\['id'\\]\n\\# 'id1 id2'\n\nYou can customize this behavior quite a bit by passing in a dictionary for `multi_valued_attributes`. If you need this, look at `HTMLTreeBuilder.DEFAULT_CDATA_LIST_ATTRIBUTES` to see the configuration Beautiful Soup uses by default, which is based on the HTML specification.\n\n_(This is a new feature in Beautiful Soup 4.8.0.)_\n\nHandling duplicate attributes[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#handling-duplicate-attributes \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------------------------------------------------\n\nWhen using the `html.parser` parser, you can use the `on_duplicate_attribute` constructor argument to customize what Beautiful Soup does when it encounters a tag that defines the same attribute more than once:\n\nmarkup \\= '<a href=\"http://url1/\" href=\"http://url2/\">'\n\nThe default behavior is to use the last value found for the tag:\n\nsoup \\= BeautifulSoup(markup, 'html.parser')\nsoup.a\\['href'\\]\n\\# http://url2/\n\nsoup \\= BeautifulSoup(markup, 'html.parser', on\\_duplicate\\_attribute\\='replace')\nsoup.a\\['href'\\]\n\\# http://url2/\n\nWith `on_duplicate_attribute='ignore'` you can tell Beautiful Soup to use the _first_ value found and ignore the rest:\n\nsoup \\= BeautifulSoup(markup, 'html.parser', on\\_duplicate\\_attribute\\='ignore')\nsoup.a\\['href'\\]\n\\# http://url1/\n\n(lxml and html5lib always do it this way; their behavior can't be configured from within Beautiful Soup.)\n\nIf you need more control, you can pass in a function that's called on each duplicate value:\n\ndef accumulate(attributes\\_so\\_far, key, value):\n    if not isinstance(attributes\\_so\\_far\\[key\\], list):\n        attributes\\_so\\_far\\[key\\] \\= \\[attributes\\_so\\_far\\[key\\]\\]\n    attributes\\_so\\_far\\[key\\].append(value)\n\nsoup \\= BeautifulSoup(markup, 'html.parser', on\\_duplicate\\_attribute\\=accumulate)\nsoup.a\\['href'\\]\n\\# \\[\"http://url1/\", \"http://url2/\"\\]\n\n_(This is a new feature in Beautiful Soup 4.9.1.)_\n\nInstantiating custom subclasses[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#instantiating-custom-subclasses \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------------------------------------------------------\n\nWhen a parser tells Beautiful Soup about a tag or a string, Beautiful Soup will instantiate a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n or [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n object to contain that information. Instead of that default behavior, you can tell Beautiful Soup to instantiate _subclasses_ of [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n or [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString \"NavigableString\")\n, subclasses you define with custom behavior:\n\nfrom bs4 import Tag, NavigableString\nclass MyTag(Tag):\n    pass\n\nclass MyString(NavigableString):\n    pass\n\nmarkup \\= \"<div>some text</div>\"\nsoup \\= BeautifulSoup(markup, 'html.parser')\nisinstance(soup.div, MyTag)\n\\# False\nisinstance(soup.div.string, MyString)\n\\# False\n\nmy\\_classes \\= { Tag: MyTag, NavigableString: MyString }\nsoup \\= BeautifulSoup(markup, 'html.parser', element\\_classes\\=my\\_classes)\nisinstance(soup.div, MyTag)\n\\# True\nisinstance(soup.div.string, MyString)\n\\# True\n\nThis can be useful when incorporating Beautiful Soup into a test framework.\n\n_(This is a new feature in Beautiful Soup 4.8.1.)_\n\nTroubleshooting[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#troubleshooting \"Link to this heading\")\n\n==================================================================================================================\n\n`diagnose()`[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#diagnose \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------------\n\nIf you're having trouble understanding what Beautiful Soup does to a document, pass the document into the `diagnose()` function. (This function is new in Beautiful Soup 4.2.0.) Beautiful Soup will print out a report showing you how different parsers handle the document, and tell you if you're missing a parser that Beautiful Soup could be using:\n\nfrom bs4.diagnose import diagnose\nwith open(\"bad.html\") as fp:\n    data \\= fp.read()\n\ndiagnose(data)\n\n\\# Diagnostic running on Beautiful Soup 4.2.0\n\\# Python version 2.7.3 (default, Aug  1 2012, 05:16:07)\n\\# I noticed that html5lib is not installed. Installing it may help.\n\\# Found lxml version 2.3.2.0\n#\n\\# Trying to parse your data with html.parser\n\\# Here's what html.parser did with the document:\n\\# ...\n\nJust looking at the output of diagnose() might show you how to solve the problem. Even if not, you can paste the output of `diagnose()` when asking for help.\n\nErrors when parsing a document[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#errors-when-parsing-a-document \"Link to this heading\")\n\n------------------------------------------------------------------------------------------------------------------------------------------------\n\nThere are two different kinds of parse errors. There are crashes, where you feed a document to Beautiful Soup and it raises an exception (usually an `HTMLParser.HTMLParseError`). And there is unexpected behavior, where a Beautiful Soup parse tree looks a lot different than the document used to create it.\n\nThese problems are almost never problems with Beautiful Soup itself. This is not because Beautiful Soup is an amazingly well-written piece of software. It's because Beautiful Soup doesn't include any parsing code. Instead, it relies on external parsers. If one parser isn't working on a certain document, the best solution is to try a different parser. See [Installing a parser](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser)\n for details and a parser comparison. If this doesn't help, you might need to inspect the document tree found inside the `BeautifulSoup` object, to see where the markup you're looking for actually ended up.\n\nVersion mismatch problems[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#version-mismatch-problems \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------------------------------------------\n\n*   `SyntaxError: Invalid syntax` (on the line `ROOT_TAG_NAME = '[document]'`): Caused by running an old Python 2 version of Beautiful Soup under Python 3, without converting the code.\n    \n*   `ImportError: No module named HTMLParser` - Caused by running an old Python 2 version of Beautiful Soup under Python 3.\n    \n*   `ImportError: No module named html.parser` - Caused by running the Python 3 version of Beautiful Soup under Python 2.\n    \n*   `ImportError: No module named BeautifulSoup` - Caused by running Beautiful Soup 3 code in an environment that doesn't have BS3 installed. Or, by writing Beautiful Soup 4 code without knowing that the package name has changed to `bs4`.\n    \n*   `ImportError: No module named bs4` - Caused by running Beautiful Soup 4 code in an environment that doesn't have BS4 installed.\n    \n\nParsing XML[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#parsing-xml \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------------\n\nBy default, Beautiful Soup parses documents as HTML. To parse a document as XML, pass in \"xml\" as the second argument to the `BeautifulSoup` constructor:\n\nsoup \\= BeautifulSoup(markup, \"xml\")\n\nYou'll need to [have lxml installed](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#parser-installation)\n.\n\nOther parser problems[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#other-parser-problems \"Link to this heading\")\n\n------------------------------------------------------------------------------------------------------------------------------\n\n*   If your script works on one computer but not another, or in one virtual environment but not another, or outside the virtual environment but not inside, it's probably because the two environments have different parser libraries available. For example, you may have developed the script on a computer that has lxml installed, and then tried to run it on a computer that only has html5lib installed. See [Differences between parsers](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#differences-between-parsers)\n     for why this matters, and fix the problem by mentioning a specific parser library in the `BeautifulSoup` constructor.\n    \n*   Because [HTML tags and attributes are case-insensitive](http://www.w3.org/TR/html5/syntax.html#syntax)\n    , all three HTML parsers convert tag and attribute names to lowercase. That is, the markup <TAG></TAG> is converted to <tag></tag>. If you want to preserve mixed-case or uppercase tags and attributes, you'll need to [parse the document as XML.](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#parsing-xml)\n    \n\nMiscellaneous[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#miscellaneous \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------------------\n\n*   `UnicodeEncodeError: 'charmap' codec can't encode character '\\xfoo' in position bar` (or just about any other `UnicodeEncodeError`) - This problem shows up in two main situations. First, when you try to print a Unicode character that your console doesn't know how to display. (See [this page on the Python wiki](http://wiki.python.org/moin/PrintFails)\n     for help.) Second, when you're writing to a file and you pass in a Unicode character that's not supported by your default encoding. In this case, the simplest solution is to explicitly encode the Unicode string into UTF-8 with `u.encode(\"utf8\")`.\n    \n*   `KeyError: [attr]` - Caused by accessing `tag['attr']` when the tag in question doesn't define the `attr` attribute. The most common errors are `KeyError: 'href'` and `KeyError: 'class'`. Use `tag.get('attr')` if you're not sure `attr` is defined, just as you would with a Python dictionary.\n    \n*   `AttributeError: 'ResultSet' object has no attribute 'foo'` - This usually happens because you expected `find_all()` to return a single tag or string. But `find_all()` returns a _list_ of tags and strings—a `ResultSet` object. You need to iterate over the list and look at the `.foo` of each one. Or, if you really only want one result, you need to use `find()` instead of `find_all()`.\n    \n*   `AttributeError: 'NoneType' object has no attribute 'foo'` - This usually happens because you called `find()` and then tried to access the `.foo` attribute of the result. But in your case, `find()` didn't find anything, so it returned `None`, instead of returning a tag or a string. You need to figure out why your `find()` call isn't returning anything.\n    \n*   `AttributeError: 'NavigableString' object has no attribute 'foo'` - This usually happens because you're treating a string as though it were a tag. You may be iterating over a list, expecting that it contains nothing but tags, when it actually contains both tags and strings.\n    \n\nImproving Performance[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#improving-performance \"Link to this heading\")\n\n------------------------------------------------------------------------------------------------------------------------------\n\nBeautiful Soup will never be as fast as the parsers it sits on top of. If response time is critical, if you're paying for computer time by the hour, or if there's any other reason why computer time is more valuable than programmer time, you should forget about Beautiful Soup and work directly atop [lxml](http://lxml.de/)\n.\n\nThat said, there are things you can do to speed up Beautiful Soup. If you're not using lxml as the underlying parser, my advice is to [start](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#parser-installation)\n. Beautiful Soup parses documents significantly faster using lxml than using html.parser or html5lib.\n\nYou can speed up encoding detection significantly by installing the [cchardet](http://pypi.python.org/pypi/cchardet/)\n library.\n\n[Parsing only part of a document](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#parsing-only-part-of-a-document)\n won't save you much time parsing the document, but it can save a lot of memory, and it'll make _searching_ the document much faster.\n\nTranslating this documentation[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#translating-this-documentation \"Link to this heading\")\n\n================================================================================================================================================\n\nNew translations of the Beautiful Soup documentation are greatly appreciated. Translations should be licensed under the MIT license, just like Beautiful Soup and its English documentation are.\n\nThere are two ways of getting your translation into the main code base and onto the Beautiful Soup website:\n\n1.  Create a branch of the Beautiful Soup repository, add your translation, and propose a merge with the main branch, the same as you would do with a proposed change to the source code.\n    \n2.  Send a message to the Beautiful Soup discussion group with a link to your translation, or attach your translation to the message.\n    \n\nUse the Chinese or Brazilian Portuguese translations as your model. In particular, please translate the source file `doc/index.rst`, rather than the HTML version of the documentation. This makes it possible to publish the documentation in a variety of formats, not just HTML.\n\nBeautiful Soup 3[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id16 \"Link to this heading\")\n\n========================================================================================================\n\nBeautiful Soup 3 is the previous release series, and is no longer supported. Development of Beautiful Soup 3 stopped in 2012, and the package was completely discontinued in 2021. There's no reason to install it unless you're trying to get very old software to work, but it's published through PyPi as `BeautifulSoup`:\n\n$ pip install BeautifulSoup\n\nYou can also download [a tarball of the final release, 3.2.2](https://www.crummy.com/software/BeautifulSoup/download/3.x/BeautifulSoup-3.2.2.tar.gz)\n.\n\nIf you ran `pip install beautifulsoup` or `pip install BeautifulSoup`, but your code doesn't work, you installed Beautiful Soup 3 by mistake. You need to run `pip install beautifulsoup4`.\n\n[The documentation for Beautiful Soup 3 is archived online](http://www.crummy.com/software/BeautifulSoup/bs3/documentation.html)\n.\n\nPorting code to BS4[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#porting-code-to-bs4 \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------------------------------\n\nMost code written against Beautiful Soup 3 will work against Beautiful Soup 4 with one simple change. All you should have to do is change the package name from `BeautifulSoup` to `bs4`. So this:\n\nfrom BeautifulSoup import BeautifulSoup\n\nbecomes this:\n\nfrom bs4 import BeautifulSoup\n\n*   If you get the `ImportError` \"No module named BeautifulSoup\", your problem is that you're trying to run Beautiful Soup 3 code, but you only have Beautiful Soup 4 installed.\n    \n*   If you get the `ImportError` \"No module named bs4\", your problem is that you're trying to run Beautiful Soup 4 code, but you only have Beautiful Soup 3 installed.\n    \n\nAlthough BS4 is mostly backward-compatible with BS3, most of its methods have been deprecated and given new names for [PEP 8 compliance](http://www.python.org/dev/peps/pep-0008/)\n. There are numerous other renames and changes, and a few of them break backward compatibility.\n\nHere's what you'll need to know to convert your BS3 code and habits to BS4:\n\n### You need a parser[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#you-need-a-parser \"Link to this heading\")\n\nBeautiful Soup 3 used Python's `SGMLParser`, a module that was deprecated and removed in Python 3.0. Beautiful Soup 4 uses `html.parser` by default, but you can plug in lxml or html5lib and use that instead. See [Installing a parser](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser)\n for a comparison.\n\nSince `html.parser` is not the same parser as `SGMLParser`, you may find that Beautiful Soup 4 gives you a different parse tree than Beautiful Soup 3 for the same markup. If you swap out `html.parser` for lxml or html5lib, you may find that the parse tree changes yet again. If this happens, you'll need to update your scraping code to process the new tree.\n\n### Property names[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#property-names \"Link to this heading\")\n\nI renamed three attributes to avoid using words that have special meaning to Python. Unlike my changes to method names (which you'll see in the form of deprecation warnings), these changes _did not preserve backwards compatibility._ If you used these attributes in BS3, your code will break in BS4 until you change them.\n\n*   `UnicodeDammit.unicode` -> `UnicodeDammit.unicode_markup`\n    \n*   `Tag.next` -> `Tag.next_element`\n    \n*   `Tag.previous` -> `Tag.previous_element`\n    \n\n### Generators[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#generators \"Link to this heading\")\n\nSome of the generators used to yield `None` after they were done, and then stop. That was a bug. Now the generators just stop.\n\n### XML[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#xml \"Link to this heading\")\n\nThere is no longer a `BeautifulStoneSoup` class for parsing XML. To parse XML you pass in \"xml\" as the second argument to the `BeautifulSoup` constructor. For the same reason, the `BeautifulSoup` constructor no longer recognizes the `isHTML` argument.\n\nBeautiful Soup's handling of empty-element XML tags has been improved. Previously when you parsed XML you had to explicitly say which tags were considered empty-element tags. The `selfClosingTags` argument to the constructor is no longer recognized. Instead, Beautiful Soup considers any empty tag to be an empty-element tag. If you add a child to an empty-element tag, it stops being an empty-element tag.\n\n### Entities[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#entities \"Link to this heading\")\n\nAn incoming HTML or XML entity is always converted into the corresponding Unicode character. Beautiful Soup 3 had a number of overlapping ways of dealing with entities, which have been removed. The `BeautifulSoup` constructor no longer recognizes the `smartQuotesTo` or `convertEntities` arguments. ([Unicode, Dammit](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#unicode-dammit)\n still has `smart_quotes_to`, but its default is now to turn smart quotes into Unicode.) The constants `HTML_ENTITIES`, `XML_ENTITIES`, and `XHTML_ENTITIES` have been removed, since they configure a feature (transforming some but not all entities into Unicode characters) that no longer exists.\n\nIf you want to turn Unicode characters back into HTML entities on output, rather than turning them into UTF-8 characters, you need to use an [output formatter](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#output-formatters)\n.\n\n### Miscellaneous[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id17 \"Link to this heading\")\n\n[Tag.string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#string)\n now operates recursively. If tag A contains a single tag B and nothing else, then A.string is the same as B.string. (Previously, it was None.)\n\n[Multi-valued attributes](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#multi-valued-attributes)\n like `class` have lists of strings as their values, not simple strings. This may affect the way you search by CSS class.\n\n[`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n objects now implement the `__hash__` method, such that two [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n objects are considered equal if they generate the same markup. This may change your script's behavior if you put [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag \"Tag\")\n objects into a dictionary or set.\n\nIf you pass one of the `find*` methods both [string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id11)\n _and_ a tag-specific argument like [name](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#name)\n, Beautiful Soup will search for tags that match your tag-specific criteria and whose [Tag.string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#string)\n matches your [string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id11)\n value. It will _not_ find the strings themselves. Previously, Beautiful Soup ignored the tag-specific arguments and looked for strings.\n\nThe `BeautifulSoup` constructor no longer recognizes the `markupMassage` argument. It's now the parser's responsibility to handle markup correctly.\n\nThe rarely-used alternate parser classes like `ICantBelieveItsBeautifulSoup` and `BeautifulSOAP` have been removed. It's now the parser's decision how to handle ambiguous markup.\n\nThe `prettify()` method now returns a Unicode string, not a bytestring.\n\n### [Table of Contents](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#)\n\n*   [Beautiful Soup Documentation](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#)\n    *   [Getting help](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#getting-help)\n        *   [API documentation](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#api-documentation)\n            \n*   [Quick Start](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#quick-start)\n    \n*   [Installing Beautiful Soup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-beautiful-soup)\n    *   [Installing a parser](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#installing-a-parser)\n        \n*   [Making the soup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#making-the-soup)\n    \n*   [Kinds of objects](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kinds-of-objects)\n    *   [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag)\n        *   [`Tag.name`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag.name)\n            \n        *   [`Tag.attrs`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Tag.attrs)\n            \n    *   [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#NavigableString)\n        \n    *   [Special strings](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#special-strings)\n        *   [`Comment`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Comment)\n            \n        *   [For HTML documents](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#for-html-documents)\n            *   [`Stylesheet`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Stylesheet)\n                \n            *   [`Script`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Script)\n                \n            *   [`Template`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Template)\n                \n        *   [For XML documents](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#for-xml-documents)\n            *   [`Declaration`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Declaration)\n                \n            *   [`Doctype`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#Doctype)\n                \n            *   [`CData`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#CData)\n                \n            *   [`ProcessingInstruction`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#ProcessingInstruction)\n                \n*   [Navigating the tree](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#navigating-the-tree)\n    *   [Going down](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#going-down)\n        *   [Navigating using tag names](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#navigating-using-tag-names)\n            \n        *   [`.contents` and `.children`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#contents-and-children)\n            \n        *   [`.descendants`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#descendants)\n            \n        *   [`.string`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#string)\n            \n        *   [`.strings` and `stripped_strings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#strings-and-stripped-strings)\n            \n    *   [Going up](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#going-up)\n        *   [`.parent`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#parent)\n            \n        *   [`.parents`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#parents)\n            \n        *   [`.self_and_parents`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#self-and-parents)\n            \n    *   [Going sideways](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#going-sideways)\n        *   [`.next_sibling` and `.previous_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#next-sibling-and-previous-sibling)\n            \n        *   [`.next_siblings` and `.previous_siblings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#next-siblings-and-previous-siblings)\n            \n    *   [Going back and forth](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#going-back-and-forth)\n        *   [`.next_element` and `.previous_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#next-element-and-previous-element)\n            \n        *   [`.next_elements` and `.previous_elements`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#next-elements-and-previous-elements)\n            \n*   [Searching the tree](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#searching-the-tree)\n    *   [Kinds of filters](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#kinds-of-filters)\n        *   [A string](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-string)\n            \n        *   [A regular expression](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-regular-expression)\n            \n        *   [`True`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#true)\n            \n        *   [A function](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-function)\n            \n        *   [A list](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#a-list)\n            \n    *   [`find_all()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find-all)\n        *   [The `name` argument](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#the-name-argument)\n            \n        *   [The keyword arguments](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#the-keyword-arguments)\n            \n        *   [Searching by CSS class](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#searching-by-css-class)\n            \n        *   [The `string` argument](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#the-string-argument)\n            \n        *   [The `limit` argument](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#the-limit-argument)\n            \n        *   [The `recursive` argument](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#the-recursive-argument)\n            \n    *   [Calling a tag is like calling `find_all()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#calling-a-tag-is-like-calling-find-all)\n        \n    *   [`find()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find)\n        \n    *   [`find_parents()` and `find_parent()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find-parents-and-find-parent)\n        \n    *   [`find_next_siblings()` and `find_next_sibling()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find-next-siblings-and-find-next-sibling)\n        \n    *   [`find_previous_siblings()` and `find_previous_sibling()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find-previous-siblings-and-find-previous-sibling)\n        \n    *   [`find_all_next()` and `find_next()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find-all-next-and-find-next)\n        \n    *   [`find_all_previous()` and `find_previous()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#find-all-previous-and-find-previous)\n        \n    *   [CSS selectors through the `.css` property](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#css-selectors-through-the-css-property)\n        *   [Advanced Soup Sieve features](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#advanced-soup-sieve-features)\n            \n        *   [Namespaces in CSS selectors](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#namespaces-in-css-selectors)\n            \n        *   [History of CSS selector support](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#history-of-css-selector-support)\n            \n*   [Modifying the tree](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#modifying-the-tree)\n    *   [Changing tag names and attributes](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#changing-tag-names-and-attributes)\n        \n    *   [Modifying `.string`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#modifying-string)\n        \n    *   [`append()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#append)\n        \n    *   [`extend()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#extend)\n        \n    *   [`NavigableString()` and `.new_tag()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#navigablestring-and-new-tag)\n        \n    *   [`insert()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#insert)\n        \n    *   [`insert_before()` and `insert_after()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#insert-before-and-insert-after)\n        \n    *   [`clear()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#clear)\n        \n    *   [`extract()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#extract)\n        \n    *   [`decompose()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#decompose)\n        \n    *   [`replace_with()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#replace-with)\n        \n    *   [`wrap()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#wrap)\n        \n    *   [`unwrap()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#unwrap)\n        \n    *   [`smooth()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#smooth)\n        \n*   [Output](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#output)\n    *   [Pretty-printing](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#pretty-printing)\n        \n    *   [Non-pretty printing](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#non-pretty-printing)\n        \n    *   [Output formatters](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#output-formatters)\n        *   [Formatter objects](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#formatter-objects)\n            *   [`HTMLFormatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#HTMLFormatter)\n                \n            *   [`XMLFormatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#XMLFormatter)\n                \n        *   [Writing your own formatter](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#writing-your-own-formatter)\n            \n    *   [`get_text()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#get-text)\n        \n*   [Specifying the parser to use](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#specifying-the-parser-to-use)\n    *   [Differences between parsers](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#differences-between-parsers)\n        \n*   [Encodings](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#encodings)\n    *   [Output encoding](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#output-encoding)\n        \n    *   [Unicode, Dammit](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#unicode-dammit)\n        *   [Smart quotes](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#smart-quotes)\n            \n        *   [Inconsistent encodings](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#inconsistent-encodings)\n            \n*   [Line numbers](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#line-numbers)\n    \n*   [Comparing objects for equality](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#comparing-objects-for-equality)\n    \n*   [Copying Beautiful Soup objects](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#copying-beautiful-soup-objects)\n    \n*   [Low-level search interface](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#low-level-search-interface)\n    *   [Custom element filtering](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#custom-element-filtering)\n        *   [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#ElementFilter)\n            \n        *   [Custom element iteration](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#custom-element-iteration)\n            *   [`ElementFilter.filter()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#ElementFilter.filter)\n                \n*   [Advanced parser customization](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#advanced-parser-customization)\n    *   [Parsing only part of a document](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#parsing-only-part-of-a-document)\n        *   [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#SoupStrainer)\n            \n    *   [Customizing multi-valued attributes](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#customizing-multi-valued-attributes)\n        \n    *   [Handling duplicate attributes](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#handling-duplicate-attributes)\n        \n    *   [Instantiating custom subclasses](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#instantiating-custom-subclasses)\n        \n*   [Troubleshooting](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#troubleshooting)\n    *   [`diagnose()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#diagnose)\n        \n    *   [Errors when parsing a document](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#errors-when-parsing-a-document)\n        \n    *   [Version mismatch problems](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#version-mismatch-problems)\n        \n    *   [Parsing XML](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#parsing-xml)\n        \n    *   [Other parser problems](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#other-parser-problems)\n        \n    *   [Miscellaneous](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#miscellaneous)\n        \n    *   [Improving Performance](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#improving-performance)\n        \n*   [Translating this documentation](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#translating-this-documentation)\n    \n*   [Beautiful Soup 3](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id16)\n    *   [Porting code to BS4](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#porting-code-to-bs4)\n        *   [You need a parser](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#you-need-a-parser)\n            \n        *   [Property names](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#property-names)\n            \n        *   [Generators](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#generators)\n            \n        *   [XML](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#xml)\n            \n        *   [Entities](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#entities)\n            \n        *   [Miscellaneous](https://www.crummy.com/software/BeautifulSoup/bs4/doc/#id17)\n            \n\n### Quick search","metadata":{"title":"Beautiful Soup Documentation — Beautiful Soup 4.13.0 documentation","viewport":["width=device-width, initial-scale=1.0","width=device-width, initial-scale=1"],"language":"en,ja,ko,ru,pt,zh","scrapeId":"8a8f493f-1e71-40f0-b25e-69ac5c8c4c3f","sourceURL":"https://www.crummy.com/software/BeautifulSoup/bs4/doc/","url":"https://www.crummy.com/software/BeautifulSoup/bs4/doc/","statusCode":200}},{"markdown":"Beautiful Soup Documentation ============================ .. image:: 6.1.jpg :align: right :alt: \"The Fish-Footman began by producing from under his arm a great letter, nearly as large as himself.\" \\`Beautiful Soup \\`\\_ is a Python library for pulling data out of HTML and XML files. It works with your favorite parser to provide idiomatic ways of navigating, searching, and modifying the parse tree. It commonly saves programmers hours or days of work. These instructions illustrate all major features of Beautiful Soup 4, with examples. I show you what the library is good for, how it works, how to use it, how to make it do what you want, and what to do when it violates your expectations. This document covers Beautiful Soup version 4.13.3. The examples in this documentation were written for Python 3.8. You might be looking for the documentation for \\`Beautiful Soup 3 \\`\\_. If so, you should know that Beautiful Soup 3 is no longer being developed and that all support for it was dropped on December 31, 2020. If you want to learn about the differences between Beautiful Soup 3 and Beautiful Soup 4, see \\`Porting code to BS4\\`\\_. This documentation has been translated into other languages by Beautiful Soup users: \\* \\`这篇文档当然还有中文版. \\`\\_ \\* このページは日本語で利用できます(\\`外部リンク \\`\\_) \\* \\`이 문서는 한국어 번역도 가능합니다. \\`\\_ \\* \\`Este documento também está disponível em Português do Brasil. \\`\\_ \\* \\`Este documento también está disponible en una traducción al español. \\`\\_ \\* \\`Эта документация доступна на русском языке. \\`\\_ Getting help ------------ If you have questions about Beautiful Soup, or run into problems, \\`send mail to the discussion group \\`\\_. If your problem involves parsing an HTML document, be sure to mention :ref:\\`what the diagnose() function says \\` about that document. When reporting an error in this documentation, please mention which translation you're reading. API documentation ^^^^^^^^^^^^^^^^^ This document is written like an instruction manual, but you can also read :doc:\\`traditional API documentation \\` generated from the Beautiful Soup source code. If you want details about Beautiful Soup's internals, or a feature not covered in this document, try the API documentation. Quick Start =========== Here's an HTML document I'll be using as an example throughout this document. It's part of a story from \\*Alice in Wonderland\\*:: html\\_doc = \"\"\"The Dormouse's story\n\n**The Dormouse's story**\n\nOnce upon a time there were three little sisters; and their names were [Elsie](http://example.com/elsie)\n, [Lacie](http://example.com/lacie)\n and [Tillie](http://example.com/tillie)\n; and they lived at the bottom of a well.\n\n...\n\n\"\"\" Running the \"three sisters\" document through Beautiful Soup gives us a :py:class:\\`BeautifulSoup\\` object, which represents the document as a nested data structure:: from bs4 import BeautifulSoup soup = BeautifulSoup(html\\_doc, 'html.parser') print(soup.prettify()) # # # \\# The Dormouse's story # \\# # #\n\n\\# **\\# The Dormouse's story #** #\n\n#\n\n\\# Once upon a time there were three little sisters; and their names were # [\\# Elsie #](http://example.com/elsie)\n \\# , # [\\# Lacie #](http://example.com/lacie)\n \\# and # [\\# Tillie #](http://example.com/tillie)\n \\# ; and they lived at the bottom of a well. #\n\n#\n\n\\# ... #\n\n\\# # Here are some simple ways to navigate that data structure:: soup.title # The Dormouse's story soup.title.name # u'title' soup.title.string # u'The Dormouse's story' soup.title.parent.name # u'head' soup.p #\n\n**The Dormouse's story**\n\nsoup.p\\['class'\\] # u'title' soup.a # [Elsie](http://example.com/elsie)\n soup.find\\_all('a') # \\[[Elsie](http://example.com/elsie)\\\n, # [Lacie](http://example.com/lacie)\\\n, # [Tillie](http://example.com/tillie)\\\n\\] soup.find(id=\"link3\") # [Tillie](http://example.com/tillie)\n One common task is extracting all the URLs found within a page's tags:: for link in soup.find\\_all('a'): print(link.get('href')) # http://example.com/elsie # http://example.com/lacie # http://example.com/tillie Another common task is extracting all the text from a page:: print(soup.get\\_text()) # The Dormouse's story # # The Dormouse's story # # Once upon a time there were three little sisters; and their names were # Elsie, # Lacie and # Tillie; # and they lived at the bottom of a well. # # ... Does this look like what you need? If so, read on. Installing Beautiful Soup ========================= If you're using a recent version of Debian or Ubuntu Linux, you can install Beautiful Soup with the system package manager: :kbd:\\`$ apt-get install python3-bs4\\` Beautiful Soup 4 is published through PyPi, so if you can't install it with the system packager, you can install it with \\`\\`easy\\_install\\`\\` or \\`\\`pip\\`\\`. The package name is \\`\\`beautifulsoup4\\`\\`. Make sure you use the right version of \\`\\`pip\\`\\` or \\`\\`easy\\_install\\`\\` for your Python version (these may be named \\`\\`pip3\\`\\` and \\`\\`easy\\_install3\\`\\` respectively). :kbd:\\`$ easy\\_install beautifulsoup4\\` :kbd:\\`$ pip install beautifulsoup4\\` (The :py:class:\\`BeautifulSoup\\` package is \\*not\\* what you want. That's the previous major release, \\`Beautiful Soup 3\\`\\_. Lots of software uses BS3, so it's still available, but if you're writing new code you should install \\`\\`beautifulsoup4\\`\\`.) If you don't have \\`\\`easy\\_install\\`\\` or \\`\\`pip\\`\\` installed, you can \\`download the Beautiful Soup 4 source tarball \\`\\_ and install it with \\`\\`setup.py\\`\\`. :kbd:\\`$ python setup.py install\\` If all else fails, the license for Beautiful Soup allows you to package the entire library with your application. You can download the tarball, copy its \\`\\`bs4\\`\\` directory into your application's codebase, and use Beautiful Soup without installing it at all. I use Python 3.10 to develop Beautiful Soup, but it should work with other recent versions. .. \\_parser-installation: Installing a parser ------------------- Beautiful Soup supports the HTML parser included in Python's standard library, but it also supports a number of third-party Python parsers. One is the \\`lxml parser \\`\\_. Depending on your setup, you might install lxml with one of these commands: :kbd:\\`$ apt-get install python-lxml\\` :kbd:\\`$ easy\\_install lxml\\` :kbd:\\`$ pip install lxml\\` Another alternative is the pure-Python \\`html5lib parser \\`\\_, which parses HTML the way a web browser does. Depending on your setup, you might install html5lib with one of these commands: :kbd:\\`$ apt-get install python3-html5lib\\` :kbd:\\`$ pip install html5lib\\` This table summarizes the advantages and disadvantages of each parser library: +----------------------+--------------------------------------------+--------------------------------+--------------------------+ | Parser | Typical usage | Advantages | Disadvantages | +----------------------+--------------------------------------------+--------------------------------+--------------------------+ | Python's html.parser | \\`\\`BeautifulSoup(markup, \"html.parser\")\\`\\` | \\* Batteries included | \\* Not as fast as lxml, | | | | \\* Decent speed | less lenient than | | | | | html5lib. | +----------------------+--------------------------------------------+--------------------------------+--------------------------+ | lxml's HTML parser | \\`\\`BeautifulSoup(markup, \"lxml\")\\`\\` | \\* Very fast | \\* External C dependency | +----------------------+--------------------------------------------+--------------------------------+--------------------------+ | lxml's XML parser | \\`\\`BeautifulSoup(markup, \"lxml-xml\")\\`\\` | \\* Very fast | \\* External C dependency | | | \\`\\`BeautifulSoup(markup, \"xml\")\\`\\` | \\* The only currently supported | | | | | XML parser | | +----------------------+--------------------------------------------+--------------------------------+--------------------------+ | html5lib | \\`\\`BeautifulSoup(markup, \"html5lib\")\\`\\` | \\* Extremely lenient | \\* Very slow | | | | \\* Parses pages the same way a | \\* External Python | | | | web browser does | dependency | | | | \\* Creates valid HTML5 | | +----------------------+--------------------------------------------+--------------------------------+--------------------------+ If you can, I recommend you install and use lxml for speed. Note that if a document is invalid, different parsers will generate different Beautiful Soup trees for it. See \\`Differences between parsers\\`\\_ for details. Making the soup =============== To parse a document, pass it into the :py:class:\\`BeautifulSoup\\` constructor. You can pass in a string or an open filehandle:: from bs4 import BeautifulSoup with open(\"index.html\") as fp: soup = BeautifulSoup(fp, 'html.parser') soup = BeautifulSoup(\"a web page\", 'html.parser') First, the document is converted to Unicode, and HTML entities are converted to Unicode characters:: print(BeautifulSoup(\"Sacré bleu!\", \"html.parser\")) # Sacré bleu! Beautiful Soup then parses the document using the best available parser. It will use an HTML parser unless you specifically tell it to use an XML parser. (See \\`Parsing XML\\`\\_.) Kinds of objects ================ Beautiful Soup transforms a complex HTML document into a complex tree of Python objects. But you'll only ever have to deal with about four \\*kinds\\* of objects: :py:class:\\`Tag\\`, :py:class:\\`NavigableString\\`, :py:class:\\`BeautifulSoup\\`, and :py:class:\\`Comment\\`. These objects represent the HTML \\*elements\\* that comprise the page. .. py:class:: Tag A :py:class:\\`Tag\\` object corresponds to an XML or HTML tag in the original document. :: soup = BeautifulSoup('**Extremely bold**', 'html.parser') tag = soup.b type(tag) # Tags have a lot of attributes and methods, and I'll cover most of them in \\`Navigating the tree\\`\\_ and \\`Searching the tree\\`\\_. For now, the most important methods of a tag are for accessing its name and attributes. .. py:attribute:: name Every tag has a name:: tag.name # 'b' If you change a tag's name, the change will be reflected in any markup generated by Beautiful Soup down the line:: tag.name = \"blockquote\" tag #\n\n> Extremely bold\n\n.. py:attribute:: attrs An HTML or XML tag may have any number of attributes. The tag \\`\\`**\\`\\` has an attribute \"id\" whose value is \"boldest\". You can access a tag's attributes by treating the tag like a dictionary:: tag = BeautifulSoup('**bold**', 'html.parser').b tag\\['id'\\] # 'boldest' You can access the dictionary of attributes directly as \\`\\`.attrs\\`\\`:: tag.attrs # {'id': 'boldest'} tag.attrs.keys() # dict\\_keys(\\['id'\\]) You can add, remove, and modify a tag's attributes. Again, this is done by treating the tag as a dictionary:: tag\\['id'\\] = 'verybold' tag\\['another-attribute'\\] = 1 tag # del tag\\['id'\\] del tag\\['another-attribute'\\] tag # **bold** tag\\['id'\\] # KeyError: 'id' tag.get('id') # None .. \\_multivalue: Multi-valued attributes ----------------------- HTML 4 defines a few attributes that can have multiple values. HTML 5 removes a couple of them, but defines a few more. The most common multi-valued attribute is \\`\\`class\\`\\` (that is, a tag can have more than one CSS class). Others include \\`\\`rel\\`\\`, \\`\\`rev\\`\\`, \\`\\`accept-charset\\`\\`, \\`\\`headers\\`\\`, and \\`\\`accesskey\\`\\`. By default, Beautiful Soup stores the value(s) of a multi-valued attribute as a list:: css\\_soup = BeautifulSoup('\n\n', 'html.parser') css\\_soup.p\\['class'\\] # \\['body'\\] css\\_soup = BeautifulSoup('\n\n', 'html.parser') css\\_soup.p\\['class'\\] # \\['body', 'strikeout'\\] When you turn a tag back into a string, the values of any multi-valued attributes are consolidated:: rel\\_soup = BeautifulSoup('****\n\nBack to the homepage\n\n', 'html.parser') rel\\_soup.a\\['rel'\\] # \\['index', 'first'\\] rel\\_soup.a\\['rel'\\] = \\['index', 'contents'\\] print(rel\\_soup.p) #\n\nBack to the homepage\n\nIf an attribute \\*looks\\* like it has more than one value, but it's not a multi-valued attribute as defined by any version of the HTML standard, Beautiful Soup stores it as a simple string:: id\\_soup = BeautifulSoup('\n\n', 'html.parser') id\\_soup.p\\['id'\\] # 'my id' You can force all attributes to be stored as strings by passing \\`\\`multi\\_valued\\_attributes=None\\`\\` as a keyword argument into the :py:class:\\`BeautifulSoup\\` constructor:: no\\_list\\_soup = BeautifulSoup('\n\n', 'html.parser', multi\\_valued\\_attributes=None) no\\_list\\_soup.p\\['class'\\] # 'body strikeout' You can use \\`\\`get\\_attribute\\_list\\`\\` to always return the value in a list container, whether it's a string or multi-valued attribute value:: id\\_soup.p\\['id'\\] # 'my id' id\\_soup.p.get\\_attribute\\_list('id') # \\[\"my id\"\\] If you parse a document as XML, there are no multi-valued attributes:: xml\\_soup = BeautifulSoup('\n\n', 'xml') xml\\_soup.p\\['class'\\] # 'body strikeout' Again, you can configure this using the \\`\\`multi\\_valued\\_attributes\\`\\` argument:: class\\_is\\_multi= { '\\*' : 'class'} xml\\_soup = BeautifulSoup('\n\n', 'xml', multi\\_valued\\_attributes=class\\_is\\_multi) xml\\_soup.p\\['class'\\] # \\['body', 'strikeout'\\] You probably won't need to do this, but if you do, use the defaults as a guide. They implement the rules described in the HTML specification:: from bs4.builder import builder\\_registry builder\\_registry.lookup('html').DEFAULT\\_CDATA\\_LIST\\_ATTRIBUTES .. py:class:: NavigableString ----------------------------- A tag can contain strings as pieces of text. Beautiful Soup uses the :py:class:\\`NavigableString\\` class to contain these pieces of text:: soup = BeautifulSoup('**Extremely bold**', 'html.parser') tag = soup.b tag.string # 'Extremely bold' type(tag.string) # A :py:class:\\`NavigableString\\` is just like a Python Unicode string, except that it also supports some of the features described in \\`Navigating the tree\\`\\_ and \\`Searching the tree\\`\\_. You can convert a :py:class:\\`NavigableString\\` to a Unicode string with \\`\\`str\\`\\`:: unicode\\_string = str(tag.string) unicode\\_string # 'Extremely bold' type(unicode\\_string) # You can't edit a string in place, but you can replace one string with another, using :ref:\\`replace\\_with()\\`:: tag.string.replace\\_with(\"No longer bold\") tag # **No longer bold** :py:class:\\`NavigableString\\` supports most of the features described in \\`Navigating the tree\\`\\_ and \\`Searching the tree\\`\\_, but not all of them. In particular, since a string can't contain anything (the way a tag may contain a string or another tag), strings don't support the \\`\\`.contents\\`\\` or \\`\\`.string\\`\\` attributes, or the \\`\\`find()\\`\\` method. If you want to use a :py:class:\\`NavigableString\\` outside of Beautiful Soup, you should call \\`\\`unicode()\\`\\` on it to turn it into a normal Python Unicode string. If you don't, your string will carry around a reference to the entire Beautiful Soup parse tree, even when you're done using Beautiful Soup. This is a big waste of memory. .. BeautifulSoup --------------------------- The :py:class:\\`BeautifulSoup\\` object represents the parsed document as a whole. For most purposes, you can treat it as a :py:class:\\`Tag\\` object. This means it supports most of the methods described in \\`Navigating the tree\\`\\_ and \\`Searching the tree\\`\\_. You can also pass a :py:class:\\`BeautifulSoup\\` object into one of the methods defined in \\`Modifying the tree\\`\\_, just as you would a :py:class:\\`Tag\\`. This lets you do things like combine two parsed documents:: doc = BeautifulSoup(\"INSERT FOOTER HEREHere's the footer\", \"xml\") doc.find(text=\"INSERT FOOTER HERE\").replace\\_with(footer) # 'INSERT FOOTER HERE' print(doc) # \\# Since the :py:class:\\`BeautifulSoup\\` object doesn't correspond to an actual HTML or XML tag, it has no name and no attributes. But sometimes it's useful to reference its \\`\\`.name\\`\\` (such as when writing code that works with both :py:class:\\`Tag\\` and :py:class:\\`BeautifulSoup\\` objects), so it's been given the special \\`\\`.name\\`\\` \"\\[document\\]\":: soup.name # '\\[document\\]' Special strings --------------- :py:class:\\`Tag\\`, :py:class:\\`NavigableString\\`, and :py:class:\\`BeautifulSoup\\` cover almost everything you'll see in an HTML or XML file, but there are a few leftover bits. The main one you'll probably encounter is the :py:class:\\`Comment\\`. .. py:class:: Comment :: markup = \"\" soup = BeautifulSoup(markup, 'html.parser') comment = soup.b.string type(comment) # The :py:class:\\`Comment\\` object is just a special type of :py:class:\\`NavigableString\\`:: comment # 'Hey, buddy. Want to buy a used parser' But when it appears as part of an HTML document, a :py:class:\\`Comment\\` is displayed with special formatting:: print(soup.b.prettify()) # **\\# \\#** For HTML documents ^^^^^^^^^^^^^^^^^^ Beautiful Soup defines a few :py:class:\\`NavigableString\\` subclasses to contain strings found inside specific HTML tags. This makes it easier to pick out the main body of the page, by ignoring strings that probably represent programming directives found within the page. \\*(These classes are new in Beautiful Soup 4.9.0, and the html5lib parser doesn't use them.)\\* .. py:class:: Stylesheet A :py:class:\\`NavigableString\\` subclass that represents embedded CSS stylesheets; that is, any strings found inside a \\`\\`**","metadata":{"title":"The Dormouse's story","scrapeId":"e1a5182c-bd61-4c0b-8dd6-885753dfd3c2","sourceURL":"https://www.crummy.com/software/BeautifulSoup/bs4/doc/_sources/index.rst.txt","url":"https://www.crummy.com/software/BeautifulSoup/bs4/doc/_sources/index.rst.txt","statusCode":200}},{"markdown":"bs4[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/modules.html#bs4 \"Link to this heading\")\n\n==========================================================================================================\n\n*   [bs4 package](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html)\n    *   [Module contents](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4)\n        *   [`AttributeResemblesVariableWarning`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.AttributeResemblesVariableWarning)\n            *   [`AttributeResemblesVariableWarning.MESSAGE`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.AttributeResemblesVariableWarning.MESSAGE)\n                \n        *   [`BeautifulSoup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup)\n            *   [`BeautifulSoup.ASCII_SPACES`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.ASCII_SPACES)\n                \n            *   [`BeautifulSoup.DEFAULT_BUILDER_FEATURES`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.DEFAULT_BUILDER_FEATURES)\n                \n            *   [`BeautifulSoup.ROOT_TAG_NAME`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.ROOT_TAG_NAME)\n                \n            *   [`BeautifulSoup.contains_replacement_characters`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.contains_replacement_characters)\n                \n            *   [`BeautifulSoup.copy_self()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.copy_self)\n                \n            *   [`BeautifulSoup.declared_html_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.declared_html_encoding)\n                \n            *   [`BeautifulSoup.decode()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.decode)\n                \n            *   [`BeautifulSoup.insert_after()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.insert_after)\n                \n            *   [`BeautifulSoup.insert_before()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.insert_before)\n                \n            *   [`BeautifulSoup.is_xml`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.is_xml)\n                \n            *   [`BeautifulSoup.new_string()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.new_string)\n                \n            *   [`BeautifulSoup.new_tag()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.new_tag)\n                \n            *   [`BeautifulSoup.original_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.original_encoding)\n                \n            *   [`BeautifulSoup.reset()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.reset)\n                \n            *   [`BeautifulSoup.string_container()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.string_container)\n                \n        *   [`CData`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CData)\n            *   [`CData.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CData.PREFIX)\n                \n            *   [`CData.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CData.SUFFIX)\n                \n        *   [`CSS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS)\n            *   [`CSS.closest()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.closest)\n                \n            *   [`CSS.compile()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.compile)\n                \n            *   [`CSS.escape()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.escape)\n                \n            *   [`CSS.filter()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.filter)\n                \n            *   [`CSS.iselect()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.iselect)\n                \n            *   [`CSS.match()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.match)\n                \n            *   [`CSS.select()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.select)\n                \n            *   [`CSS.select_one()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.select_one)\n                \n        *   [`Comment`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Comment)\n            *   [`Comment.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Comment.PREFIX)\n                \n            *   [`Comment.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Comment.SUFFIX)\n                \n        *   [`Declaration`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Declaration)\n            *   [`Declaration.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Declaration.PREFIX)\n                \n            *   [`Declaration.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Declaration.SUFFIX)\n                \n        *   [`Doctype`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Doctype)\n            *   [`Doctype.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Doctype.PREFIX)\n                \n            *   [`Doctype.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Doctype.SUFFIX)\n                \n            *   [`Doctype.for_name_and_ids()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Doctype.for_name_and_ids)\n                \n        *   [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter)\n            *   [`ElementFilter.allow_string_creation()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.allow_string_creation)\n                \n            *   [`ElementFilter.allow_tag_creation()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.allow_tag_creation)\n                \n            *   [`ElementFilter.excludes_everything`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.excludes_everything)\n                \n            *   [`ElementFilter.filter()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.filter)\n                \n            *   [`ElementFilter.find()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.find)\n                \n            *   [`ElementFilter.find_all()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.find_all)\n                \n            *   [`ElementFilter.includes_everything`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.includes_everything)\n                \n            *   [`ElementFilter.match()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.match)\n                \n            *   [`ElementFilter.match_function`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.match_function)\n                \n        *   [`FeatureNotFound`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.FeatureNotFound)\n            \n        *   [`GuessedAtParserWarning`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.GuessedAtParserWarning)\n            *   [`GuessedAtParserWarning.MESSAGE`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.GuessedAtParserWarning.MESSAGE)\n                \n        *   [`MarkupResemblesLocatorWarning`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.MarkupResemblesLocatorWarning)\n            *   [`MarkupResemblesLocatorWarning.FILENAME_MESSAGE`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.MarkupResemblesLocatorWarning.FILENAME_MESSAGE)\n                \n            *   [`MarkupResemblesLocatorWarning.URL_MESSAGE`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.MarkupResemblesLocatorWarning.URL_MESSAGE)\n                \n        *   [`ParserRejectedMarkup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ParserRejectedMarkup)\n            \n        *   [`ProcessingInstruction`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ProcessingInstruction)\n            *   [`ProcessingInstruction.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ProcessingInstruction.PREFIX)\n                \n            *   [`ProcessingInstruction.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ProcessingInstruction.SUFFIX)\n                \n        *   [`ResultSet`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ResultSet)\n            *   [`ResultSet.source`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ResultSet.source)\n                \n        *   [`Script`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Script)\n            \n        *   [`StopParsing`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.StopParsing)\n            \n        *   [`Stylesheet`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Stylesheet)\n            \n        *   [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag)\n            *   [`Tag.append()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.append)\n                \n            *   [`Tag.attrs`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.attrs)\n                \n            *   [`Tag.can_be_empty_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.can_be_empty_element)\n                \n            *   [`Tag.cdata_list_attributes`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.cdata_list_attributes)\n                \n            *   [`Tag.children`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.children)\n                \n            *   [`Tag.clear()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.clear)\n                \n            *   [`Tag.contents`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.contents)\n                \n            *   [`Tag.copy_self()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.copy_self)\n                \n            *   [`Tag.css`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.css)\n                \n            *   [`Tag.decode()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.decode)\n                \n            *   [`Tag.decode_contents()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.decode_contents)\n                \n            *   [`Tag.descendants`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.descendants)\n                \n            *   [`Tag.encode()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.encode)\n                \n            *   [`Tag.encode_contents()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.encode_contents)\n                \n            *   [`Tag.extend()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.extend)\n                \n            *   [`Tag.find()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.find)\n                \n            *   [`Tag.find_all()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.find_all)\n                \n            *   [`Tag.get()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.get)\n                \n            *   [`Tag.get_attribute_list()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.get_attribute_list)\n                \n            *   [`Tag.has_attr()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.has_attr)\n                \n            *   [`Tag.index()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.index)\n                \n            *   [`Tag.insert()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.insert)\n                \n            *   [`Tag.interesting_string_types`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.interesting_string_types)\n                \n            *   [`Tag.isSelfClosing()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.isSelfClosing)\n                \n            *   [`Tag.is_empty_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.is_empty_element)\n                \n            *   [`Tag.name`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.name)\n                \n            *   [`Tag.namespace`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.namespace)\n                \n            *   [`Tag.parser_class`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.parser_class)\n                \n            *   [`Tag.prefix`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.prefix)\n                \n            *   [`Tag.preserve_whitespace_tags`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.preserve_whitespace_tags)\n                \n            *   [`Tag.prettify()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.prettify)\n                \n            *   [`Tag.replaceWithChildren()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.replaceWithChildren)\n                \n            *   [`Tag.replace_with_children()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.replace_with_children)\n                \n            *   [`Tag.select()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.select)\n                \n            *   [`Tag.select_one()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.select_one)\n                \n            *   [`Tag.self_and_descendants`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.self_and_descendants)\n                \n            *   [`Tag.smooth()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.smooth)\n                \n            *   [`Tag.sourceline`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.sourceline)\n                \n            *   [`Tag.sourcepos`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.sourcepos)\n                \n            *   [`Tag.string`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.string)\n                \n            *   [`Tag.strings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.strings)\n                \n            *   [`Tag.unwrap()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.unwrap)\n                \n        *   [`TemplateString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.TemplateString)\n            \n        *   [`UnicodeDammit`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit)\n            *   [`UnicodeDammit.CHARSET_ALIASES`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.CHARSET_ALIASES)\n                \n            *   [`UnicodeDammit.ENCODINGS_WITH_SMART_QUOTES`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.ENCODINGS_WITH_SMART_QUOTES)\n                \n            *   [`UnicodeDammit.MS_CHARS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.MS_CHARS)\n                \n            *   [`UnicodeDammit.WINDOWS_1252_TO_UTF8`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.WINDOWS_1252_TO_UTF8)\n                \n            *   [`UnicodeDammit.contains_replacement_characters`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.contains_replacement_characters)\n                \n            *   [`UnicodeDammit.declared_html_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.declared_html_encoding)\n                \n            *   [`UnicodeDammit.detwingle()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.detwingle)\n                \n            *   [`UnicodeDammit.find_codec()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.find_codec)\n                \n            *   [`UnicodeDammit.markup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.markup)\n                \n            *   [`UnicodeDammit.original_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.original_encoding)\n                \n            *   [`UnicodeDammit.smart_quotes_to`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.smart_quotes_to)\n                \n            *   [`UnicodeDammit.tried_encodings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.tried_encodings)\n                \n            *   [`UnicodeDammit.unicode_markup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.unicode_markup)\n                \n        *   [`UnusualUsageWarning`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnusualUsageWarning)\n            \n        *   [`XMLParsedAsHTMLWarning`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.XMLParsedAsHTMLWarning)\n            *   [`XMLParsedAsHTMLWarning.MESSAGE`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.XMLParsedAsHTMLWarning.MESSAGE)\n                \n    *   [Subpackages](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#subpackages)\n        *   [bs4.builder package](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html)\n            *   [Module contents](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#module-bs4.builder)\n                \n    *   [Submodules](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#submodules)\n        \n    *   [bs4.css module](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.css)\n        *   [`CSS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS)\n            *   [`CSS.closest()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.closest)\n                \n            *   [`CSS.compile()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.compile)\n                \n            *   [`CSS.escape()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.escape)\n                \n            *   [`CSS.filter()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.filter)\n                \n            *   [`CSS.iselect()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.iselect)\n                \n            *   [`CSS.match()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.match)\n                \n            *   [`CSS.select()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.select)\n                \n            *   [`CSS.select_one()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.select_one)\n                \n    *   [bs4.dammit module](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.dammit)\n        *   [`EncodingDetector`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector)\n            *   [`EncodingDetector.chardet_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.chardet_encoding)\n                \n            *   [`EncodingDetector.declared_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.declared_encoding)\n                \n            *   [`EncodingDetector.encodings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.encodings)\n                \n            *   [`EncodingDetector.exclude_encodings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.exclude_encodings)\n                \n            *   [`EncodingDetector.find_declared_encoding()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.find_declared_encoding)\n                \n            *   [`EncodingDetector.is_html`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.is_html)\n                \n            *   [`EncodingDetector.known_definite_encodings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.known_definite_encodings)\n                \n            *   [`EncodingDetector.markup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.markup)\n                \n            *   [`EncodingDetector.sniffed_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.sniffed_encoding)\n                \n            *   [`EncodingDetector.strip_byte_order_mark()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.strip_byte_order_mark)\n                \n            *   [`EncodingDetector.user_encodings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.user_encodings)\n                \n        *   [`EntitySubstitution`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution)\n            *   [`EntitySubstitution.AMPERSAND_OR_BRACKET`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.AMPERSAND_OR_BRACKET)\n                \n            *   [`EntitySubstitution.ANY_ENTITY_RE`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.ANY_ENTITY_RE)\n                \n            *   [`EntitySubstitution.BARE_AMPERSAND_OR_BRACKET`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.BARE_AMPERSAND_OR_BRACKET)\n                \n            *   [`EntitySubstitution.CHARACTER_TO_HTML_ENTITY`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.CHARACTER_TO_HTML_ENTITY)\n                \n            *   [`EntitySubstitution.CHARACTER_TO_HTML_ENTITY_RE`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.CHARACTER_TO_HTML_ENTITY_RE)\n                \n            *   [`EntitySubstitution.CHARACTER_TO_HTML_ENTITY_WITH_AMPERSAND_RE`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.CHARACTER_TO_HTML_ENTITY_WITH_AMPERSAND_RE)\n                \n            *   [`EntitySubstitution.CHARACTER_TO_XML_ENTITY`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.CHARACTER_TO_XML_ENTITY)\n                \n            *   [`EntitySubstitution.HTML_ENTITY_TO_CHARACTER`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.HTML_ENTITY_TO_CHARACTER)\n                \n            *   [`EntitySubstitution.quoted_attribute_value()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.quoted_attribute_value)\n                \n            *   [`EntitySubstitution.substitute_html()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.substitute_html)\n                \n            *   [`EntitySubstitution.substitute_html5()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.substitute_html5)\n                \n            *   [`EntitySubstitution.substitute_html5_raw()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.substitute_html5_raw)\n                \n            *   [`EntitySubstitution.substitute_xml()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.substitute_xml)\n                \n            *   [`EntitySubstitution.substitute_xml_containing_entities()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.substitute_xml_containing_entities)\n                \n        *   [`UnicodeDammit`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit)\n            *   [`UnicodeDammit.CHARSET_ALIASES`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.CHARSET_ALIASES)\n                \n            *   [`UnicodeDammit.ENCODINGS_WITH_SMART_QUOTES`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.ENCODINGS_WITH_SMART_QUOTES)\n                \n            *   [`UnicodeDammit.MS_CHARS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.MS_CHARS)\n                \n            *   [`UnicodeDammit.WINDOWS_1252_TO_UTF8`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.WINDOWS_1252_TO_UTF8)\n                \n            *   [`UnicodeDammit.contains_replacement_characters`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.contains_replacement_characters)\n                \n            *   [`UnicodeDammit.declared_html_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.declared_html_encoding)\n                \n            *   [`UnicodeDammit.detwingle()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.detwingle)\n                \n            *   [`UnicodeDammit.find_codec()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.find_codec)\n                \n            *   [`UnicodeDammit.markup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.markup)\n                \n            *   [`UnicodeDammit.original_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.original_encoding)\n                \n            *   [`UnicodeDammit.smart_quotes_to`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.smart_quotes_to)\n                \n            *   [`UnicodeDammit.tried_encodings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.tried_encodings)\n                \n            *   [`UnicodeDammit.unicode_markup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.unicode_markup)\n                \n    *   [bs4.element module](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.element)\n        *   [`AttributeDict`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeDict)\n            \n        *   [`AttributeValueList`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeValueList)\n            \n        *   [`AttributeValueWithCharsetSubstitution`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeValueWithCharsetSubstitution)\n            *   [`AttributeValueWithCharsetSubstitution.substitute_encoding()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeValueWithCharsetSubstitution.substitute_encoding)\n                \n        *   [`CData`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData)\n            *   [`CData.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.PREFIX)\n                \n            *   [`CData.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.SUFFIX)\n                \n            *   [`CData.next_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.next_element)\n                \n            *   [`CData.next_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.next_sibling)\n                \n            *   [`CData.parent`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.parent)\n                \n            *   [`CData.previous_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.previous_element)\n                \n            *   [`CData.previous_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.previous_sibling)\n                \n        *   [`CharsetMetaAttributeValue`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CharsetMetaAttributeValue)\n            *   [`CharsetMetaAttributeValue.substitute_encoding()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CharsetMetaAttributeValue.substitute_encoding)\n                \n        *   [`Comment`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment)\n            *   [`Comment.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.PREFIX)\n                \n            *   [`Comment.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.SUFFIX)\n                \n            *   [`Comment.next_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.next_element)\n                \n            *   [`Comment.next_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.next_sibling)\n                \n            *   [`Comment.parent`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.parent)\n                \n            *   [`Comment.previous_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.previous_element)\n                \n            *   [`Comment.previous_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.previous_sibling)\n                \n        *   [`ContentMetaAttributeValue`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ContentMetaAttributeValue)\n            *   [`ContentMetaAttributeValue.CHARSET_RE`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ContentMetaAttributeValue.CHARSET_RE)\n                \n            *   [`ContentMetaAttributeValue.substitute_encoding()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ContentMetaAttributeValue.substitute_encoding)\n                \n        *   [`DEFAULT_OUTPUT_ENCODING`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.DEFAULT_OUTPUT_ENCODING)\n            \n        *   [`Declaration`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration)\n            *   [`Declaration.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.PREFIX)\n                \n            *   [`Declaration.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.SUFFIX)\n                \n            *   [`Declaration.next_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.next_element)\n                \n            *   [`Declaration.next_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.next_sibling)\n                \n            *   [`Declaration.parent`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.parent)\n                \n            *   [`Declaration.previous_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.previous_element)\n                \n            *   [`Declaration.previous_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.previous_sibling)\n                \n        *   [`Doctype`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype)\n            *   [`Doctype.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.PREFIX)\n                \n            *   [`Doctype.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.SUFFIX)\n                \n            *   [`Doctype.for_name_and_ids()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.for_name_and_ids)\n                \n            *   [`Doctype.next_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.next_element)\n                \n            *   [`Doctype.next_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.next_sibling)\n                \n            *   [`Doctype.parent`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.parent)\n                \n            *   [`Doctype.previous_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.previous_element)\n                \n            *   [`Doctype.previous_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.previous_sibling)\n                \n        *   [`HTMLAttributeDict`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.HTMLAttributeDict)\n            \n        *   [`NamespacedAttribute`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NamespacedAttribute)\n            *   [`NamespacedAttribute.name`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NamespacedAttribute.name)\n                \n            *   [`NamespacedAttribute.namespace`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NamespacedAttribute.namespace)\n                \n            *   [`NamespacedAttribute.prefix`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NamespacedAttribute.prefix)\n                \n        *   [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString)\n            *   [`NavigableString.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString.PREFIX)\n                \n            *   [`NavigableString.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString.SUFFIX)\n                \n            *   [`NavigableString.output_ready()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString.output_ready)\n                \n            *   [`NavigableString.strings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString.strings)\n                \n        *   [`PYTHON_SPECIFIC_ENCODINGS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PYTHON_SPECIFIC_ENCODINGS)\n            \n        *   [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement)\n            *   [`PageElement.decompose()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.decompose)\n                \n            *   [`PageElement.decomposed`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.decomposed)\n                \n            *   [`PageElement.extract()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.extract)\n                \n            *   [`PageElement.find_all_next()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_all_next)\n                \n            *   [`PageElement.find_all_previous()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_all_previous)\n                \n            *   [`PageElement.find_next()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_next)\n                \n            *   [`PageElement.find_next_sibling()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_next_sibling)\n                \n            *   [`PageElement.find_next_siblings()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_next_siblings)\n                \n            *   [`PageElement.find_parent()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_parent)\n                \n            *   [`PageElement.find_parents()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_parents)\n                \n            *   [`PageElement.find_previous()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_previous)\n                \n            *   [`PageElement.find_previous_sibling()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_previous_sibling)\n                \n            *   [`PageElement.find_previous_siblings()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_previous_siblings)\n                \n            *   [`PageElement.format_string()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.format_string)\n                \n            *   [`PageElement.formatter_for_name()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.formatter_for_name)\n                \n            *   [`PageElement.getText()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.getText)\n                \n            *   [`PageElement.get_text()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.get_text)\n                \n            *   [`PageElement.hidden`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.hidden)\n                \n            *   [`PageElement.insert_after()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.insert_after)\n                \n            *   [`PageElement.insert_before()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.insert_before)\n                \n            *   [`PageElement.known_xml`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.known_xml)\n                \n            *   [`PageElement.next`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.next)\n                \n            *   [`PageElement.next_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.next_element)\n                \n            *   [`PageElement.next_elements`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.next_elements)\n                \n            *   [`PageElement.next_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.next_sibling)\n                \n            *   [`PageElement.next_siblings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.next_siblings)\n                \n            *   [`PageElement.parent`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.parent)\n                \n            *   [`PageElement.parents`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.parents)\n                \n            *   [`PageElement.previous`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.previous)\n                \n            *   [`PageElement.previous_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.previous_element)\n                \n            *   [`PageElement.previous_elements`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.previous_elements)\n                \n            *   [`PageElement.previous_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.previous_sibling)\n                \n            *   [`PageElement.previous_siblings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.previous_siblings)\n                \n            *   [`PageElement.replace_with()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.replace_with)\n                \n            *   [`PageElement.self_and_next_elements`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.self_and_next_elements)\n                \n            *   [`PageElement.self_and_next_siblings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.self_and_next_siblings)\n                \n            *   [`PageElement.self_and_parents`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.self_and_parents)\n                \n            *   [`PageElement.self_and_previous_elements`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.self_and_previous_elements)\n                \n            *   [`PageElement.self_and_previous_siblings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.self_and_previous_siblings)\n                \n            *   [`PageElement.setup()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.setup)\n                \n            *   [`PageElement.stripped_strings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.stripped_strings)\n                \n            *   [`PageElement.text`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.text)\n                \n            *   [`PageElement.wrap()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.wrap)\n                \n        *   [`PreformattedString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString)\n            *   [`PreformattedString.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString.PREFIX)\n                \n            *   [`PreformattedString.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString.SUFFIX)\n                \n            *   [`PreformattedString.output_ready()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString.output_ready)\n                \n        *   [`ProcessingInstruction`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction)\n            *   [`ProcessingInstruction.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.PREFIX)\n                \n            *   [`ProcessingInstruction.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.SUFFIX)\n                \n            *   [`ProcessingInstruction.next_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.next_element)\n                \n            *   [`ProcessingInstruction.next_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.next_sibling)\n                \n            *   [`ProcessingInstruction.parent`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.parent)\n                \n            *   [`ProcessingInstruction.previous_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.previous_element)\n                \n            *   [`ProcessingInstruction.previous_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.previous_sibling)\n                \n        *   [`ResultSet`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ResultSet)\n            *   [`ResultSet.source`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ResultSet.source)\n                \n        *   [`RubyParenthesisString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.RubyParenthesisString)\n            \n        *   [`RubyTextString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.RubyTextString)\n            \n        *   [`Script`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Script)\n            \n        *   [`Stylesheet`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Stylesheet)\n            \n        *   [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag)\n            *   [`Tag.append()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.append)\n                \n            *   [`Tag.attrs`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.attrs)\n                \n            *   [`Tag.can_be_empty_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.can_be_empty_element)\n                \n            *   [`Tag.cdata_list_attributes`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.cdata_list_attributes)\n                \n            *   [`Tag.children`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.children)\n                \n            *   [`Tag.clear()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.clear)\n                \n            *   [`Tag.contents`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.contents)\n                \n            *   [`Tag.copy_self()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.copy_self)\n                \n            *   [`Tag.css`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.css)\n                \n            *   [`Tag.decode()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.decode)\n                \n            *   [`Tag.decode_contents()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.decode_contents)\n                \n            *   [`Tag.descendants`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.descendants)\n                \n            *   [`Tag.encode()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.encode)\n                \n            *   [`Tag.encode_contents()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.encode_contents)\n                \n            *   [`Tag.extend()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.extend)\n                \n            *   [`Tag.find()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.find)\n                \n            *   [`Tag.find_all()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.find_all)\n                \n            *   [`Tag.get()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.get)\n                \n            *   [`Tag.get_attribute_list()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.get_attribute_list)\n                \n            *   [`Tag.has_attr()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.has_attr)\n                \n            *   [`Tag.index()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.index)\n                \n            *   [`Tag.insert()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.insert)\n                \n            *   [`Tag.interesting_string_types`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.interesting_string_types)\n                \n            *   [`Tag.isSelfClosing()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.isSelfClosing)\n                \n            *   [`Tag.is_empty_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.is_empty_element)\n                \n            *   [`Tag.name`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.name)\n                \n            *   [`Tag.namespace`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.namespace)\n                \n            *   [`Tag.next_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.next_element)\n                \n            *   [`Tag.next_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.next_sibling)\n                \n            *   [`Tag.parent`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.parent)\n                \n            *   [`Tag.parser_class`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.parser_class)\n                \n            *   [`Tag.prefix`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.prefix)\n                \n            *   [`Tag.preserve_whitespace_tags`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.preserve_whitespace_tags)\n                \n            *   [`Tag.prettify()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.prettify)\n                \n            *   [`Tag.previous_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.previous_element)\n                \n            *   [`Tag.previous_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.previous_sibling)\n                \n            *   [`Tag.replaceWithChildren()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.replaceWithChildren)\n                \n            *   [`Tag.replace_with_children()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.replace_with_children)\n                \n            *   [`Tag.select()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.select)\n                \n            *   [`Tag.select_one()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.select_one)\n                \n            *   [`Tag.self_and_descendants`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.self_and_descendants)\n                \n            *   [`Tag.smooth()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.smooth)\n                \n            *   [`Tag.sourceline`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.sourceline)\n                \n            *   [`Tag.sourcepos`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.sourcepos)\n                \n            *   [`Tag.string`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.string)\n                \n            *   [`Tag.strings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.strings)\n                \n            *   [`Tag.unwrap()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.unwrap)\n                \n        *   [`TemplateString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.TemplateString)\n            \n        *   [`XMLAttributeDict`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.XMLAttributeDict)\n            \n        *   [`XMLProcessingInstruction`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.XMLProcessingInstruction)\n            *   [`XMLProcessingInstruction.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.XMLProcessingInstruction.PREFIX)\n                \n            *   [`XMLProcessingInstruction.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.XMLProcessingInstruction.SUFFIX)\n                \n        *   [`nonwhitespace_re`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.nonwhitespace_re)\n            \n    *   [bs4.filter module](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.filter)\n        *   [`AttributeValueMatchRule`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.AttributeValueMatchRule)\n            *   [`AttributeValueMatchRule.function`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.AttributeValueMatchRule.function)\n                \n        *   [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter)\n            *   [`ElementFilter.allow_string_creation()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.allow_string_creation)\n                \n            *   [`ElementFilter.allow_tag_creation()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.allow_tag_creation)\n                \n            *   [`ElementFilter.excludes_everything`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.excludes_everything)\n                \n            *   [`ElementFilter.filter()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.filter)\n                \n            *   [`ElementFilter.find()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.find)\n                \n            *   [`ElementFilter.find_all()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.find_all)\n                \n            *   [`ElementFilter.includes_everything`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.includes_everything)\n                \n            *   [`ElementFilter.match()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.match)\n                \n            *   [`ElementFilter.match_function`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.match_function)\n                \n        *   [`MatchRule`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule)\n            *   [`MatchRule.exclude_everything`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule.exclude_everything)\n                \n            *   [`MatchRule.matches_string()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule.matches_string)\n                \n            *   [`MatchRule.pattern`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule.pattern)\n                \n            *   [`MatchRule.present`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule.present)\n                \n            *   [`MatchRule.string`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule.string)\n                \n        *   [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer)\n            *   [`SoupStrainer.allow_string_creation()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.allow_string_creation)\n                \n            *   [`SoupStrainer.allow_tag_creation()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.allow_tag_creation)\n                \n            *   [`SoupStrainer.attribute_rules`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.attribute_rules)\n                \n            *   [`SoupStrainer.excludes_everything`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.excludes_everything)\n                \n            *   [`SoupStrainer.includes_everything`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.includes_everything)\n                \n            *   [`SoupStrainer.match()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.match)\n                \n            *   [`SoupStrainer.matches_any_string_rule()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.matches_any_string_rule)\n                \n            *   [`SoupStrainer.matches_tag()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.matches_tag)\n                \n            *   [`SoupStrainer.name_rules`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.name_rules)\n                \n            *   [`SoupStrainer.search_tag()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.search_tag)\n                \n            *   [`SoupStrainer.string_rules`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.string_rules)\n                \n        *   [`StringMatchRule`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.StringMatchRule)\n            *   [`StringMatchRule.function`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.StringMatchRule.function)\n                \n        *   [`TagNameMatchRule`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.TagNameMatchRule)\n            *   [`TagNameMatchRule.function`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.TagNameMatchRule.function)\n                \n            *   [`TagNameMatchRule.matches_tag()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.TagNameMatchRule.matches_tag)\n                \n    *   [bs4.formatter module](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.formatter)\n        *   [`Formatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter)\n            *   [`Formatter.HTML`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.HTML)\n                \n            *   [`Formatter.HTML_DEFAULTS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.HTML_DEFAULTS)\n                \n            *   [`Formatter.XML`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.XML)\n                \n            *   [`Formatter.attribute_value()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.attribute_value)\n                \n            *   [`Formatter.attributes()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.attributes)\n                \n            *   [`Formatter.empty_attributes_are_booleans`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.empty_attributes_are_booleans)\n                \n            *   [`Formatter.substitute()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.substitute)\n                \n        *   [`HTMLFormatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.HTMLFormatter)\n            *   [`HTMLFormatter.REGISTRY`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.HTMLFormatter.REGISTRY)\n                \n        *   [`XMLFormatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.XMLFormatter)\n            *   [`XMLFormatter.REGISTRY`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.XMLFormatter.REGISTRY)\n                \n    *   [bs4.\\_typing module](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4._typing)\n        *   [`_AttributeValues`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._AttributeValues)\n            \n        *   [`_BaseStrainable`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._BaseStrainable)\n            \n        *   [`_BaseStrainableAttribute`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._BaseStrainableAttribute)\n            \n        *   [`_BaseStrainableElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._BaseStrainableElement)\n            \n        *   [`_Encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._Encoding)\n            \n        *   [`_Encodings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._Encodings)\n            \n        *   [`_IncomingMarkup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._IncomingMarkup)\n            \n        *   [`_InsertableElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._InsertableElement)\n            \n        *   [`_InvertedNamespaceMapping`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._InvertedNamespaceMapping)\n            \n        *   [`_NamespaceMapping`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._NamespaceMapping)\n            \n        *   [`_NamespacePrefix`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._NamespacePrefix)\n            \n        *   [`_NamespaceURL`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._NamespaceURL)\n            \n        *   [`_OneElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._OneElement)\n            \n        *   [`_PageElementMatchFunction`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._PageElementMatchFunction)\n            \n        *   [`_RawAttributeValue`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RawAttributeValue)\n            \n        *   [`_RawAttributeValues`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RawAttributeValues)\n            \n        *   [`_RawMarkup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RawMarkup)\n            \n        *   [`_RawOrProcessedAttributeValues`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RawOrProcessedAttributeValues)\n            \n        *   [`_RegularExpressionProtocol`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol)\n            *   [`_RegularExpressionProtocol._abc_impl`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol._abc_impl)\n                \n            *   [`_RegularExpressionProtocol._is_protocol`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol._is_protocol)\n                \n            *   [`_RegularExpressionProtocol._is_runtime_protocol`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol._is_runtime_protocol)\n                \n            *   [`_RegularExpressionProtocol.pattern`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol.pattern)\n                \n            *   [`_RegularExpressionProtocol.search()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol.search)\n                \n        *   [`_StrainableAttribute`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._StrainableAttribute)\n            \n        *   [`_StrainableAttributes`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._StrainableAttributes)\n            \n        *   [`_StrainableElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._StrainableElement)\n            \n        *   [`_StrainableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._StrainableString)\n            \n        *   [`_StringMatchFunction`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._StringMatchFunction)\n            \n        *   [`_TagMatchFunction`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._TagMatchFunction)\n            \n    *   [bs4.diagnose module](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.diagnose)\n        *   [`AnnouncingParser`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser)\n            *   [`AnnouncingParser.handle_charref()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_charref)\n                \n            *   [`AnnouncingParser.handle_comment()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_comment)\n                \n            *   [`AnnouncingParser.handle_data()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_data)\n                \n            *   [`AnnouncingParser.handle_decl()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_decl)\n                \n            *   [`AnnouncingParser.handle_endtag()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_endtag)\n                \n            *   [`AnnouncingParser.handle_entityref()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_entityref)\n                \n            *   [`AnnouncingParser.handle_pi()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_pi)\n                \n            *   [`AnnouncingParser.handle_starttag()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_starttag)\n                \n            *   [`AnnouncingParser.unknown_decl()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.unknown_decl)\n                \n        *   [`benchmark_parsers()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.benchmark_parsers)\n            \n        *   [`diagnose()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.diagnose)\n            \n        *   [`htmlparser_trace()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.htmlparser_trace)\n            \n        *   [`lxml_trace()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.lxml_trace)\n            \n        *   [`profile()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.profile)\n            \n\n### Quick search","metadata":{"language":"en,ja,ko,ru,pt,zh","title":"bs4 — Beautiful Soup 4.13.0 documentation","viewport":["width=device-width, initial-scale=1.0","width=device-width, initial-scale=1"],"scrapeId":"c744658d-036a-47bb-8609-7b643d6868c2","sourceURL":"https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/modules.html","url":"https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/modules.html","statusCode":200}},{"markdown":"bs4 === .. toctree:: :maxdepth: 4 bs4","metadata":{"scrapeId":"7ceacc8e-2a8c-4d22-8fe4-f1f320c54987","sourceURL":"https://www.crummy.com/software/BeautifulSoup/bs4/doc/_sources/api/modules.rst.txt","url":"https://www.crummy.com/software/BeautifulSoup/bs4/doc/_sources/api/modules.rst.txt","statusCode":200}},{"markdown":"bs4.builder package[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4-builder-package \"Link to this heading\")\n\n==============================================================================================================================================\n\nModule contents[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#module-bs4.builder \"Link to this heading\")\n\n-----------------------------------------------------------------------------------------------------------------------------------------\n\n_class_ bs4.builder.DetectsXMLParsedAsHTML[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.DetectsXMLParsedAsHTML \"Link to this definition\")\n\nBases: [`object`](https://docs.python.org/3/library/functions.html#object \"(in Python v3.13)\")\n\nA mixin class for any class (a TreeBuilder, or some class used by a TreeBuilder) that's in a position to detect whether an XML document is being incorrectly parsed as HTML, and issue an appropriate warning.\n\nThis requires being able to observe an incoming processing instruction that might be an XML declaration, and also able to observe tags as they're opened. If you can't do that for a given [`TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n, there's a less reliable implementation based on examining the raw markup.\n\nLOOKS\\_LIKE\\_HTML_: [Pattern](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_ _\\= re.compile('<\\[^ +\\]html', re.IGNORECASE)_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.DetectsXMLParsedAsHTML.LOOKS_LIKE_HTML \"Link to this definition\")\n\nRegular expression for seeing if string markup has an <html> tag.\n\nLOOKS\\_LIKE\\_HTML\\_B_: [Pattern](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\n\\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n\\]_ _\\= re.compile(b'<\\[^ +\\]html', re.IGNORECASE)_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.DetectsXMLParsedAsHTML.LOOKS_LIKE_HTML_B \"Link to this definition\")\n\nRegular expression for seeing if byte markup has an <html> tag.\n\nXML\\_PREFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '<?xml'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.DetectsXMLParsedAsHTML.XML_PREFIX \"Link to this definition\")\n\nThe start of an XML document string.\n\nXML\\_PREFIX\\_B_: [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_ _\\= b'<?xml'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.DetectsXMLParsedAsHTML.XML_PREFIX_B \"Link to this definition\")\n\nThe start of an XML document bytestring.\n\n_classmethod_ warn\\_if\\_markup\\_looks\\_like\\_xml(_markup: \\_RawMarkup | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_, _stacklevel: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 3_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.DetectsXMLParsedAsHTML.warn_if_markup_looks_like_xml \"Link to this definition\")\n\nPerform a check on some markup to see if it looks like XML that's not XHTML. If so, issue a warning.\n\nThis is much less reliable than doing the check while parsing, but some of the tree builders can't do that.\n\nParameters:\n\n**stacklevel** -- The stacklevel of the code calling this function.\n\nReturns:\n\nTrue if the markup looks like non-XHTML XML, False otherwise.\n\n_class_ bs4.builder.HTML5TreeBuilder(_multi\\_valued\\_attributes: Dict\\[str_, _Set\\[str\\]\\] \\= <object object>_, _preserve\\_whitespace\\_tags: Set\\[str\\] \\= <object object>_, _store\\_line\\_numbers: bool \\= <object object>_, _string\\_containers: Dict\\[str_, _Type\\[NavigableString\\]\\] \\= <object object>_, _empty\\_element\\_tags: Set\\[str\\] \\= <object object>_, _attribute\\_dict\\_class: Type\\[AttributeDict\\] \\= <class 'bs4.element.AttributeDict'>_, _attribute\\_value\\_list\\_class: Type\\[AttributeValueList\\] \\= <class 'bs4.element.AttributeValueList'>_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTML5TreeBuilder \"Link to this definition\")\n\nBases: [`HTMLTreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLTreeBuilder \"bs4.builder.HTMLTreeBuilder\")\n\nUse [html5lib](https://github.com/html5lib/html5lib-python)\n to build a tree.\n\nNote that [`HTML5TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTML5TreeBuilder \"bs4.builder.HTML5TreeBuilder\")\n does not support some common HTML [`TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n features. Some of these features could theoretically be implemented, but at the very least it's quite difficult, because html5lib moves the parse tree around as it's being built.\n\nSpecifically:\n\n*   This [`TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n     doesn't use different subclasses of [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\n     (e.g. [`Script`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#Script \"Script\")\n    ) based on the name of the tag in which the string was found.\n    \n*   You can't use a [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#SoupStrainer \"SoupStrainer\")\n     to parse only part of a document.\n    \n\nNAME_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= 'html5lib'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTML5TreeBuilder.NAME \"Link to this definition\")\n\nTRACKS\\_LINE\\_NUMBERS_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_ _\\= True_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTML5TreeBuilder.TRACKS_LINE_NUMBERS \"Link to this definition\")\n\nhtml5lib can tell us which line number and position in the original file is the source of an element.\n\nfeatures_: [Sequence](https://docs.python.org/3/library/typing.html#typing.Sequence \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_ _\\= \\['html5lib', 'permissive', 'html5', 'html'\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTML5TreeBuilder.features \"Link to this definition\")\n\nfeed(_markup: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTML5TreeBuilder.feed \"Link to this definition\")\n\nRun some incoming markup through some parsing process, populating the [`BeautifulSoup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n object in `HTML5TreeBuilder.soup`.\n\ntest\\_fragment\\_to\\_document(_fragment: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTML5TreeBuilder.test_fragment_to_document \"Link to this definition\")\n\nSee [`TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n.\n\nuser\\_specified\\_encoding_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTML5TreeBuilder.user_specified_encoding \"Link to this definition\")\n\n_class_ bs4.builder.HTMLParserTreeBuilder(_parser\\_args: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _parser\\_kwargs: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\*\\*kwargs: [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLParserTreeBuilder \"Link to this definition\")\n\nBases: [`HTMLTreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLTreeBuilder \"bs4.builder.HTMLTreeBuilder\")\n\nA Beautiful soup [`bs4.builder.TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n that uses the [`html.parser.HTMLParser`](https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser \"(in Python v3.13)\")\n parser, found in the Python standard library.\n\nNAME_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= 'html.parser'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLParserTreeBuilder.NAME \"Link to this definition\")\n\nTRACKS\\_LINE\\_NUMBERS_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_ _\\= True_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLParserTreeBuilder.TRACKS_LINE_NUMBERS \"Link to this definition\")\n\nThe html.parser knows which line number and position in the original file is the source of an element.\n\nfeatures_: Iterable\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_ _\\= \\['html.parser', 'html', 'strict'\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLParserTreeBuilder.features \"Link to this definition\")\n\nfeed(_markup: \\_RawMarkup_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLParserTreeBuilder.feed \"Link to this definition\")\n\nRun incoming markup through some parsing process.\n\nis\\_xml_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_ _\\= False_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLParserTreeBuilder.is_xml \"Link to this definition\")\n\nparser\\_args_: Tuple\\[Iterable\\[Any\\], Dict\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, Any\\]\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLParserTreeBuilder.parser_args \"Link to this definition\")\n\npicklable_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_ _\\= True_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLParserTreeBuilder.picklable \"Link to this definition\")\n\nprepare\\_markup(_markup: \\_RawMarkup_, _user\\_specified\\_encoding: \\_Encoding | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _document\\_declared\\_encoding: \\_Encoding | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _exclude\\_encodings: \\_Encodings | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_) → Iterable\\[Tuple\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, \\_Encoding | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\\\n, \\_Encoding | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\\\n, [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\]\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLParserTreeBuilder.prepare_markup \"Link to this definition\")\n\nRun any preliminary steps necessary to make incoming markup acceptable to the parser.\n\nParameters:\n\n*   **markup** -- Some markup -- probably a bytestring.\n    \n*   **user\\_specified\\_encoding** -- The user asked to try this encoding.\n    \n*   **document\\_declared\\_encoding** -- The markup itself claims to be in this encoding.\n    \n*   **exclude\\_encodings** -- The user asked \\_not\\_ to try any of these encodings.\n    \n\nYield:\n\nA series of 4-tuples: (markup, encoding, declared encoding,\n\nhas undergone character replacement)\n\nEach 4-tuple represents a strategy for parsing the document. This TreeBuilder uses Unicode, Dammit to convert the markup into Unicode, so the `markup` element of the tuple will always be a string.\n\n_class_ bs4.builder.HTMLTreeBuilder(_multi\\_valued\\_attributes: Dict\\[str_, _Set\\[str\\]\\] \\= <object object>_, _preserve\\_whitespace\\_tags: Set\\[str\\] \\= <object object>_, _store\\_line\\_numbers: bool \\= <object object>_, _string\\_containers: Dict\\[str_, _Type\\[NavigableString\\]\\] \\= <object object>_, _empty\\_element\\_tags: Set\\[str\\] \\= <object object>_, _attribute\\_dict\\_class: Type\\[AttributeDict\\] \\= <class 'bs4.element.AttributeDict'>_, _attribute\\_value\\_list\\_class: Type\\[AttributeValueList\\] \\= <class 'bs4.element.AttributeValueList'>_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLTreeBuilder \"Link to this definition\")\n\nBases: [`TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n\nThis TreeBuilder knows facts about HTML, such as which tags are treated specially by the HTML standard.\n\nDEFAULT\\_BLOCK\\_ELEMENTS_: Set\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_ _\\= {'address', 'article', 'aside', 'blockquote', 'canvas', 'dd', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'header', 'hr', 'li', 'main', 'nav', 'noscript', 'ol', 'output', 'p', 'pre', 'section', 'table', 'tfoot', 'ul', 'video'}_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLTreeBuilder.DEFAULT_BLOCK_ELEMENTS \"Link to this definition\")\n\nThe HTML standard defines these tags as block-level elements. Beautiful Soup does not treat these elements differently from other elements, but it may do so eventually, and this information is available if you need to use it.\n\nDEFAULT\\_CDATA\\_LIST\\_ATTRIBUTES_: Dict\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, Set\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]\\]_ _\\= {'\\*': {'accesskey', 'class', 'dropzone'}, 'a': {'rel', 'rev'}, 'area': {'rel'}, 'form': {'accept-charset'}, 'icon': {'sizes'}, 'iframe': {'sandbox'}, 'link': {'rel', 'rev'}, 'object': {'archive'}, 'output': {'for'}, 'td': {'headers'}, 'th': {'headers'}}_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLTreeBuilder.DEFAULT_CDATA_LIST_ATTRIBUTES \"Link to this definition\")\n\nThe HTML standard defines these attributes as containing a space-separated list of values, not a single value. That is, class=\"foo bar\" means that the 'class' attribute has two values, 'foo' and 'bar', not the single value 'foo bar'. When we encounter one of these attributes, we will parse its value into a list of values if possible. Upon output, the list will be converted back into a string.\n\nDEFAULT\\_EMPTY\\_ELEMENT\\_TAGS_: Set\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_ _\\= {'area', 'base', 'basefont', 'bgsound', 'br', 'col', 'command', 'embed', 'frame', 'hr', 'image', 'img', 'input', 'isindex', 'keygen', 'link', 'menuitem', 'meta', 'nextid', 'param', 'source', 'spacer', 'track', 'wbr'}_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLTreeBuilder.DEFAULT_EMPTY_ELEMENT_TAGS \"Link to this definition\")\n\nSome HTML tags are defined as having no contents. Beautiful Soup treats these specially.\n\nDEFAULT\\_PRESERVE\\_WHITESPACE\\_TAGS_: [set](https://docs.python.org/3/library/stdtypes.html#set \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_ _\\= {'pre', 'textarea'}_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLTreeBuilder.DEFAULT_PRESERVE_WHITESPACE_TAGS \"Link to this definition\")\n\nBy default, whitespace inside these HTML tags will be preserved rather than being collapsed.\n\nDEFAULT\\_STRING\\_CONTAINERS_: Dict\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, Type\\[[bs4.element.NavigableString](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\\\n\\]\\]_ _\\= {'rp': <class 'bs4.element.RubyParenthesisString'>, 'rt': <class 'bs4.element.RubyTextString'>, 'script': <class 'bs4.element.Script'>, 'style': <class 'bs4.element.Stylesheet'>, 'template': <class 'bs4.element.TemplateString'>}_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLTreeBuilder.DEFAULT_STRING_CONTAINERS \"Link to this definition\")\n\nThese HTML tags need special treatment so they can be represented by a string class other than [`bs4.element.NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n.\n\nFor some of these tags, it's because the HTML standard defines an unusual content model for them. I made this list by going through the HTML spec ([https://html.spec.whatwg.org/#metadata-content](https://html.spec.whatwg.org/#metadata-content)\n) and looking for \"metadata content\" elements that can contain strings.\n\nThe Ruby tags (<rt> and <rp>) are here despite being normal \"phrasing content\" tags, because the content they contain is qualitatively different from other text in the document, and it can be useful to be able to distinguish it.\n\nTODO: Arguably <noscript> could go here but it seems qualitatively different from the other tags.\n\n_class_ bs4.builder.LXMLTreeBuilder(_parser: XMLParser | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _empty\\_element\\_tags: [Set](https://docs.python.org/3/library/typing.html#typing.Set \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\*\\*kwargs: [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilder \"Link to this definition\")\n\nBases: [`HTMLTreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLTreeBuilder \"bs4.builder.HTMLTreeBuilder\")\n, [`LXMLTreeBuilderForXML`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML \"bs4.builder._lxml.LXMLTreeBuilderForXML\")\n\nALTERNATE\\_NAMES_: Iterable\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_ _\\= \\['lxml-html'\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilder.ALTERNATE_NAMES \"Link to this definition\")\n\nNAME_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= 'lxml'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilder.NAME \"Link to this definition\")\n\ndefault\\_parser(_encoding: \\_Encoding | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_) → \\_ParserOrParserClass[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilder.default_parser \"Link to this definition\")\n\nFind the default parser for the given encoding.\n\nReturns:\n\nEither a parser object or a class, which will be instantiated with default arguments.\n\nfeatures_: Iterable\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_ _\\= \\['lxml-html', 'lxml', 'html', 'fast', 'permissive'\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilder.features \"Link to this definition\")\n\nfeed(_markup: \\_RawMarkup_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilder.feed \"Link to this definition\")\n\nRun incoming markup through some parsing process.\n\nis\\_xml_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_ _\\= False_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilder.is_xml \"Link to this definition\")\n\ntest\\_fragment\\_to\\_document(_fragment: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilder.test_fragment_to_document \"Link to this definition\")\n\nSee [`TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n.\n\n_class_ bs4.builder.LXMLTreeBuilderForXML(_parser: XMLParser | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _empty\\_element\\_tags: [Set](https://docs.python.org/3/library/typing.html#typing.Set \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\*\\*kwargs: [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML \"Link to this definition\")\n\nBases: [`TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n\nALTERNATE\\_NAMES_: Iterable\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_ _\\= \\['xml'\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.ALTERNATE_NAMES \"Link to this definition\")\n\nCHUNK\\_SIZE_: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n_ _\\= 512_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.CHUNK_SIZE \"Link to this definition\")\n\nDEFAULT\\_NSMAPS_: \\_NamespaceMapping_ _\\= {'xml': 'http://www.w3.org/XML/1998/namespace'}_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.DEFAULT_NSMAPS \"Link to this definition\")\n\nDEFAULT\\_NSMAPS\\_INVERTED_: \\_InvertedNamespaceMapping_ _\\= {'http://www.w3.org/XML/1998/namespace': 'xml'}_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.DEFAULT_NSMAPS_INVERTED \"Link to this definition\")\n\nDEFAULT\\_PARSER\\_CLASS[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.DEFAULT_PARSER_CLASS \"Link to this definition\")\n\nalias of `XMLParser`\n\nNAME_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= 'lxml-xml'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.NAME \"Link to this definition\")\n\nclose() → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.close \"Link to this definition\")\n\ncomment(_text: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.comment \"Link to this definition\")\n\nHandle comments as Comment objects.\n\ndata(_data: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.data \"Link to this definition\")\n\ndefault\\_parser(_encoding: \\_Encoding | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_) → \\_ParserOrParserClass[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.default_parser \"Link to this definition\")\n\nFind the default parser for the given encoding.\n\nReturns:\n\nEither a parser object or a class, which will be instantiated with default arguments.\n\ndoctype(_name: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _pubid: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _system: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.doctype \"Link to this definition\")\n\nend(_name: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.end \"Link to this definition\")\n\nfeatures_: Iterable\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_ _\\= \\['lxml-xml', 'lxml', 'xml', 'fast', 'permissive'\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.features \"Link to this definition\")\n\nfeed(_markup: \\_RawMarkup_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.feed \"Link to this definition\")\n\nRun incoming markup through some parsing process.\n\ninitialize\\_soup(_soup: [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.initialize_soup \"Link to this definition\")\n\nLet the BeautifulSoup object know about the standard namespace mapping.\n\nParameters:\n\n**soup** -- A [`BeautifulSoup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n.\n\nis\\_xml_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_ _\\= True_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.is_xml \"Link to this definition\")\n\nnsmaps_: List\\[\\_InvertedNamespaceMapping | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.nsmaps \"Link to this definition\")\n\nparser_: Any_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.parser \"Link to this definition\")\n\nparser\\_for(_encoding: \\_Encoding | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_) → \\_LXMLParser[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.parser_for \"Link to this definition\")\n\nInstantiate an appropriate parser for the given encoding.\n\nParameters:\n\n**encoding** -- A string.\n\nReturns:\n\nA parser object such as an `etree.XMLParser`.\n\npi(_target: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _data: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.pi \"Link to this definition\")\n\nprepare\\_markup(_markup: \\_RawMarkup_, _user\\_specified\\_encoding: \\_Encoding | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _document\\_declared\\_encoding: \\_Encoding | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _exclude\\_encodings: \\_Encodings | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_) → Iterable\\[Tuple\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n, \\_Encoding | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\\\n, \\_Encoding | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\\\n, [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\]\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.prepare_markup \"Link to this definition\")\n\nRun any preliminary steps necessary to make incoming markup acceptable to the parser.\n\nlxml really wants to get a bytestring and convert it to Unicode itself. So instead of using UnicodeDammit to convert the bytestring to Unicode using different encodings, this implementation uses EncodingDetector to iterate over the encodings, and tell lxml to try to parse the document as each one in turn.\n\nParameters:\n\n*   **markup** -- Some markup -- hopefully a bytestring.\n    \n*   **user\\_specified\\_encoding** -- The user asked to try this encoding.\n    \n*   **document\\_declared\\_encoding** -- The markup itself claims to be in this encoding.\n    \n*   **exclude\\_encodings** -- The user asked \\_not\\_ to try any of these encodings.\n    \n\nYield:\n\nA series of 4-tuples: (markup, encoding, declared encoding, has undergone character replacement)\n\nEach 4-tuple represents a strategy for converting the document to Unicode and parsing it. Each strategy will be tried in turn.\n\nprocessing\\_instruction\\_class_: Type\\[[ProcessingInstruction](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#ProcessingInstruction \"ProcessingInstruction\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.processing_instruction_class \"Link to this definition\")\n\nstart(_tag: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_, _attrs: Dict\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n\\]_, _nsmap: \\_NamespaceMapping \\= {}_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.start \"Link to this definition\")\n\ntest\\_fragment\\_to\\_document(_fragment: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.test_fragment_to_document \"Link to this definition\")\n\nSee [`TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n.\n\n_exception_ bs4.builder.ParserRejectedMarkup(_message\\_or\\_exception: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [Exception](https://docs.python.org/3/library/exceptions.html#Exception \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.ParserRejectedMarkup \"Link to this definition\")\n\nBases: [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception \"(in Python v3.13)\")\n\nAn Exception to be raised when the underlying parser simply refuses to parse the given markup.\n\n_class_ bs4.builder.TreeBuilder(_multi\\_valued\\_attributes: Dict\\[str_, _Set\\[str\\]\\] \\= <object object>_, _preserve\\_whitespace\\_tags: Set\\[str\\] \\= <object object>_, _store\\_line\\_numbers: bool \\= <object object>_, _string\\_containers: Dict\\[str_, _Type\\[NavigableString\\]\\] \\= <object object>_, _empty\\_element\\_tags: Set\\[str\\] \\= <object object>_, _attribute\\_dict\\_class: Type\\[AttributeDict\\] \\= <class 'bs4.element.AttributeDict'>_, _attribute\\_value\\_list\\_class: Type\\[AttributeValueList\\] \\= <class 'bs4.element.AttributeValueList'>_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"Link to this definition\")\n\nBases: [`object`](https://docs.python.org/3/library/functions.html#object \"(in Python v3.13)\")\n\nTurn a textual document into a Beautiful Soup object tree.\n\nThis is an abstract superclass which smooths out the behavior of different parser libraries into a single, unified interface.\n\nParameters:\n\n*   **multi\\_valued\\_attributes** --\n    \n    If this is set to None, the TreeBuilder will not turn any values for attributes like 'class' into lists. Setting this to a dictionary will customize this behavior; look at [`bs4.builder.HTMLTreeBuilder.DEFAULT_CDATA_LIST_ATTRIBUTES`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLTreeBuilder.DEFAULT_CDATA_LIST_ATTRIBUTES \"bs4.builder.HTMLTreeBuilder.DEFAULT_CDATA_LIST_ATTRIBUTES\")\n     for an example.\n    \n    Internally, these are called \"CDATA list attributes\", but that probably doesn't make sense to an end-user, so the argument name is `multi_valued_attributes`.\n    \n*   **preserve\\_whitespace\\_tags** -- A set of tags to treat the way <pre> tags are treated in HTML. Tags in this set are immune from pretty-printing; their contents will always be output as-is.\n    \n*   **string\\_containers** -- A dictionary mapping tag names to the classes that should be instantiated to contain the textual contents of those tags. The default is to use NavigableString for every tag, no matter what the name. You can override the default by changing [`DEFAULT_STRING_CONTAINERS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.DEFAULT_STRING_CONTAINERS \"bs4.builder.TreeBuilder.DEFAULT_STRING_CONTAINERS\")\n    .\n    \n*   **store\\_line\\_numbers** -- If the parser keeps track of the line numbers and positions of the original markup, that information will, by default, be stored in each corresponding [`bs4.element.Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n     object. You can turn this off by passing store\\_line\\_numbers=False; then Tag.sourcepos and Tag.sourceline will always be None. If the parser you're using doesn't keep track of this information, then store\\_line\\_numbers is irrelevant.\n    \n*   **attribute\\_dict\\_class** -- The value of a multi-valued attribute (such as HTML's 'class') willl be stored in an instance of this class. The default is Beautiful Soup's built-in [`AttributeValueList`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeValueList \"bs4.element.AttributeValueList\")\n    , which is a normal Python list, and you will probably never need to change it.\n    \n\nALTERNATE\\_NAMES_: Iterable\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_ _\\= \\[\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.ALTERNATE_NAMES \"Link to this definition\")\n\nDEFAULT\\_CDATA\\_LIST\\_ATTRIBUTES_: Dict\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, Set\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]\\]_ _\\= {}_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.DEFAULT_CDATA_LIST_ATTRIBUTES \"Link to this definition\")\n\nA value for these tag/attribute combinations is a space- or comma-separated list of CDATA, rather than a single CDATA.\n\nDEFAULT\\_EMPTY\\_ELEMENT\\_TAGS_: Set\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_ _\\= None_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.DEFAULT_EMPTY_ELEMENT_TAGS \"Link to this definition\")\n\nBy default, tags are treated as empty-element tags if they have no contents--that is, using XML rules. HTMLTreeBuilder defines a different set of DEFAULT\\_EMPTY\\_ELEMENT\\_TAGS based on the HTML 4 and HTML5 standards.\n\nDEFAULT\\_PRESERVE\\_WHITESPACE\\_TAGS_: Set\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_ _\\= {}_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.DEFAULT_PRESERVE_WHITESPACE_TAGS \"Link to this definition\")\n\nWhitespace should be preserved inside these tags.\n\nDEFAULT\\_STRING\\_CONTAINERS_: Dict\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, Type\\[[bs4.element.NavigableString](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\\\n\\]\\]_ _\\= {}_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.DEFAULT_STRING_CONTAINERS \"Link to this definition\")\n\nThe textual contents of tags with these names should be instantiated with some class other than [`bs4.element.NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n.\n\nNAME_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '\\[Unknown tree builder\\]'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.NAME \"Link to this definition\")\n\nTRACKS\\_LINE\\_NUMBERS_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_ _\\= False_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.TRACKS_LINE_NUMBERS \"Link to this definition\")\n\nMost parsers don't keep track of line numbers.\n\ncan\\_be\\_empty\\_element(_tag\\_name: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.can_be_empty_element \"Link to this definition\")\n\nMight a tag with this name be an empty-element tag?\n\nThe final markup may or may not actually present this tag as self-closing.\n\nFor instance: an HTMLBuilder does not consider a <p> tag to be an empty-element tag (it's not in HTMLBuilder.empty\\_element\\_tags). This means an empty <p> tag will be presented as \"<p></p>\", not \"<p/>\" or \"<p>\".\n\nThe default implementation has no opinion about which tags are empty-element tags, so a tag will be presented as an empty-element tag if and only if it has no children. \"<foo></foo>\" will become \"<foo/>\", and \"<foo>bar</foo>\" will be left alone.\n\nParameters:\n\n**tag\\_name** -- The name of a markup tag.\n\nfeatures_: Iterable\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_ _\\= \\[\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.features \"Link to this definition\")\n\nfeed(_markup: \\_RawMarkup_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.feed \"Link to this definition\")\n\nRun incoming markup through some parsing process.\n\ninitialize\\_soup(_soup: [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.initialize_soup \"Link to this definition\")\n\nThe BeautifulSoup object has been initialized and is now being associated with the TreeBuilder.\n\nParameters:\n\n**soup** -- A BeautifulSoup object.\n\nis\\_xml_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_ _\\= False_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.is_xml \"Link to this definition\")\n\npicklable_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_ _\\= False_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.picklable \"Link to this definition\")\n\nreset() → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.reset \"Link to this definition\")\n\nDo any work necessary to reset the underlying parser for a new document.\n\nBy default, this does nothing.\n\n_class_ bs4.builder.TreeBuilderRegistry[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilderRegistry \"Link to this definition\")\n\nBases: [`object`](https://docs.python.org/3/library/functions.html#object \"(in Python v3.13)\")\n\nA way of looking up TreeBuilder subclasses by their name or by desired features.\n\nbuilders_: [List](https://docs.python.org/3/library/typing.html#typing.List \"(in Python v3.13)\")\n\\[[Type](https://docs.python.org/3/library/typing.html#typing.Type \"(in Python v3.13)\")\\\n\\[[TreeBuilder](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\\\n\\]\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilderRegistry.builders \"Link to this definition\")\n\nbuilders\\_for\\_feature_: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [List](https://docs.python.org/3/library/typing.html#typing.List \"(in Python v3.13)\")\\\n\\[[Type](https://docs.python.org/3/library/typing.html#typing.Type \"(in Python v3.13)\")\\\n\\[[TreeBuilder](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\\\n\\]\\]\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilderRegistry.builders_for_feature \"Link to this definition\")\n\nlookup(_\\*features: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [Type](https://docs.python.org/3/library/typing.html#typing.Type \"(in Python v3.13)\")\n\\[[TreeBuilder](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilderRegistry.lookup \"Link to this definition\")\n\nLook up a TreeBuilder subclass with the desired features.\n\nParameters:\n\n**features** -- A list of features to look for. If none are provided, the most recently registered TreeBuilder subclass will be used.\n\nReturns:\n\nA TreeBuilder subclass, or None if there's no registered subclass with all the requested features.\n\nregister(_treebuilder\\_class: [type](https://docs.python.org/3/library/functions.html#type \"(in Python v3.13)\")\n\\[[TreeBuilder](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\\\n\\]_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilderRegistry.register \"Link to this definition\")\n\nRegister a treebuilder based on its advertised features.\n\nParameters:\n\n**treebuilder\\_class** -- A subclass of [`TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n. its [`TreeBuilder.features`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.features \"bs4.builder.TreeBuilder.features\")\n attribute should list its features.\n\n### [Table of Contents](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html)\n\n*   [bs4.builder package](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#)\n    *   [Module contents](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#module-bs4.builder)\n        *   [`DetectsXMLParsedAsHTML`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.DetectsXMLParsedAsHTML)\n            *   [`DetectsXMLParsedAsHTML.LOOKS_LIKE_HTML`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.DetectsXMLParsedAsHTML.LOOKS_LIKE_HTML)\n                \n            *   [`DetectsXMLParsedAsHTML.LOOKS_LIKE_HTML_B`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.DetectsXMLParsedAsHTML.LOOKS_LIKE_HTML_B)\n                \n            *   [`DetectsXMLParsedAsHTML.XML_PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.DetectsXMLParsedAsHTML.XML_PREFIX)\n                \n            *   [`DetectsXMLParsedAsHTML.XML_PREFIX_B`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.DetectsXMLParsedAsHTML.XML_PREFIX_B)\n                \n            *   [`DetectsXMLParsedAsHTML.warn_if_markup_looks_like_xml()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.DetectsXMLParsedAsHTML.warn_if_markup_looks_like_xml)\n                \n        *   [`HTML5TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTML5TreeBuilder)\n            *   [`HTML5TreeBuilder.NAME`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTML5TreeBuilder.NAME)\n                \n            *   [`HTML5TreeBuilder.TRACKS_LINE_NUMBERS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTML5TreeBuilder.TRACKS_LINE_NUMBERS)\n                \n            *   [`HTML5TreeBuilder.features`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTML5TreeBuilder.features)\n                \n            *   [`HTML5TreeBuilder.feed()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTML5TreeBuilder.feed)\n                \n            *   [`HTML5TreeBuilder.test_fragment_to_document()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTML5TreeBuilder.test_fragment_to_document)\n                \n            *   [`HTML5TreeBuilder.user_specified_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTML5TreeBuilder.user_specified_encoding)\n                \n        *   [`HTMLParserTreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLParserTreeBuilder)\n            *   [`HTMLParserTreeBuilder.NAME`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLParserTreeBuilder.NAME)\n                \n            *   [`HTMLParserTreeBuilder.TRACKS_LINE_NUMBERS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLParserTreeBuilder.TRACKS_LINE_NUMBERS)\n                \n            *   [`HTMLParserTreeBuilder.features`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLParserTreeBuilder.features)\n                \n            *   [`HTMLParserTreeBuilder.feed()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLParserTreeBuilder.feed)\n                \n            *   [`HTMLParserTreeBuilder.is_xml`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLParserTreeBuilder.is_xml)\n                \n            *   [`HTMLParserTreeBuilder.parser_args`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLParserTreeBuilder.parser_args)\n                \n            *   [`HTMLParserTreeBuilder.picklable`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLParserTreeBuilder.picklable)\n                \n            *   [`HTMLParserTreeBuilder.prepare_markup()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLParserTreeBuilder.prepare_markup)\n                \n        *   [`HTMLTreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLTreeBuilder)\n            *   [`HTMLTreeBuilder.DEFAULT_BLOCK_ELEMENTS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLTreeBuilder.DEFAULT_BLOCK_ELEMENTS)\n                \n            *   [`HTMLTreeBuilder.DEFAULT_CDATA_LIST_ATTRIBUTES`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLTreeBuilder.DEFAULT_CDATA_LIST_ATTRIBUTES)\n                \n            *   [`HTMLTreeBuilder.DEFAULT_EMPTY_ELEMENT_TAGS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLTreeBuilder.DEFAULT_EMPTY_ELEMENT_TAGS)\n                \n            *   [`HTMLTreeBuilder.DEFAULT_PRESERVE_WHITESPACE_TAGS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLTreeBuilder.DEFAULT_PRESERVE_WHITESPACE_TAGS)\n                \n            *   [`HTMLTreeBuilder.DEFAULT_STRING_CONTAINERS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.HTMLTreeBuilder.DEFAULT_STRING_CONTAINERS)\n                \n        *   [`LXMLTreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilder)\n            *   [`LXMLTreeBuilder.ALTERNATE_NAMES`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilder.ALTERNATE_NAMES)\n                \n            *   [`LXMLTreeBuilder.NAME`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilder.NAME)\n                \n            *   [`LXMLTreeBuilder.default_parser()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilder.default_parser)\n                \n            *   [`LXMLTreeBuilder.features`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilder.features)\n                \n            *   [`LXMLTreeBuilder.feed()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilder.feed)\n                \n            *   [`LXMLTreeBuilder.is_xml`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilder.is_xml)\n                \n            *   [`LXMLTreeBuilder.test_fragment_to_document()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilder.test_fragment_to_document)\n                \n        *   [`LXMLTreeBuilderForXML`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML)\n            *   [`LXMLTreeBuilderForXML.ALTERNATE_NAMES`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.ALTERNATE_NAMES)\n                \n            *   [`LXMLTreeBuilderForXML.CHUNK_SIZE`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.CHUNK_SIZE)\n                \n            *   [`LXMLTreeBuilderForXML.DEFAULT_NSMAPS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.DEFAULT_NSMAPS)\n                \n            *   [`LXMLTreeBuilderForXML.DEFAULT_NSMAPS_INVERTED`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.DEFAULT_NSMAPS_INVERTED)\n                \n            *   [`LXMLTreeBuilderForXML.DEFAULT_PARSER_CLASS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.DEFAULT_PARSER_CLASS)\n                \n            *   [`LXMLTreeBuilderForXML.NAME`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.NAME)\n                \n            *   [`LXMLTreeBuilderForXML.close()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.close)\n                \n            *   [`LXMLTreeBuilderForXML.comment()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.comment)\n                \n            *   [`LXMLTreeBuilderForXML.data()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.data)\n                \n            *   [`LXMLTreeBuilderForXML.default_parser()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.default_parser)\n                \n            *   [`LXMLTreeBuilderForXML.doctype()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.doctype)\n                \n            *   [`LXMLTreeBuilderForXML.end()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.end)\n                \n            *   [`LXMLTreeBuilderForXML.features`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.features)\n                \n            *   [`LXMLTreeBuilderForXML.feed()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.feed)\n                \n            *   [`LXMLTreeBuilderForXML.initialize_soup()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.initialize_soup)\n                \n            *   [`LXMLTreeBuilderForXML.is_xml`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.is_xml)\n                \n            *   [`LXMLTreeBuilderForXML.nsmaps`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.nsmaps)\n                \n            *   [`LXMLTreeBuilderForXML.parser`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.parser)\n                \n            *   [`LXMLTreeBuilderForXML.parser_for()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.parser_for)\n                \n            *   [`LXMLTreeBuilderForXML.pi()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.pi)\n                \n            *   [`LXMLTreeBuilderForXML.prepare_markup()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.prepare_markup)\n                \n            *   [`LXMLTreeBuilderForXML.processing_instruction_class`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.processing_instruction_class)\n                \n            *   [`LXMLTreeBuilderForXML.start()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.start)\n                \n            *   [`LXMLTreeBuilderForXML.test_fragment_to_document()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.LXMLTreeBuilderForXML.test_fragment_to_document)\n                \n        *   [`ParserRejectedMarkup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.ParserRejectedMarkup)\n            \n        *   [`TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder)\n            *   [`TreeBuilder.ALTERNATE_NAMES`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.ALTERNATE_NAMES)\n                \n            *   [`TreeBuilder.DEFAULT_CDATA_LIST_ATTRIBUTES`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.DEFAULT_CDATA_LIST_ATTRIBUTES)\n                \n            *   [`TreeBuilder.DEFAULT_EMPTY_ELEMENT_TAGS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.DEFAULT_EMPTY_ELEMENT_TAGS)\n                \n            *   [`TreeBuilder.DEFAULT_PRESERVE_WHITESPACE_TAGS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.DEFAULT_PRESERVE_WHITESPACE_TAGS)\n                \n            *   [`TreeBuilder.DEFAULT_STRING_CONTAINERS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.DEFAULT_STRING_CONTAINERS)\n                \n            *   [`TreeBuilder.NAME`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.NAME)\n                \n            *   [`TreeBuilder.TRACKS_LINE_NUMBERS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.TRACKS_LINE_NUMBERS)\n                \n            *   [`TreeBuilder.can_be_empty_element()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.can_be_empty_element)\n                \n            *   [`TreeBuilder.features`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.features)\n                \n            *   [`TreeBuilder.feed()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.feed)\n                \n            *   [`TreeBuilder.initialize_soup()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.initialize_soup)\n                \n            *   [`TreeBuilder.is_xml`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.is_xml)\n                \n            *   [`TreeBuilder.picklable`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.picklable)\n                \n            *   [`TreeBuilder.reset()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder.reset)\n                \n        *   [`TreeBuilderRegistry`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilderRegistry)\n            *   [`TreeBuilderRegistry.builders`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilderRegistry.builders)\n                \n            *   [`TreeBuilderRegistry.builders_for_feature`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilderRegistry.builders_for_feature)\n                \n            *   [`TreeBuilderRegistry.lookup()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilderRegistry.lookup)\n                \n            *   [`TreeBuilderRegistry.register()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilderRegistry.register)\n                \n\n### Quick search","metadata":{"language":"en,ja,ko,ru,pt,zh","title":"bs4.builder package — Beautiful Soup 4.13.0 documentation","viewport":["width=device-width, initial-scale=1.0","width=device-width, initial-scale=1"],"scrapeId":"999dc9c0-d641-4c3c-88ad-0241ab7fea19","sourceURL":"https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html","url":"https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html","statusCode":200}},{"markdown":"bs4 package[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4-package \"Link to this heading\")\n\n======================================================================================================================\n\nModule contents[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4 \"Link to this heading\")\n\n-------------------------------------------------------------------------------------------------------------------------\n\nBeautiful Soup Elixir and Tonic - \"The Screen-Scraper's Friend\".\n\n[http://www.crummy.com/software/BeautifulSoup/](http://www.crummy.com/software/BeautifulSoup/)\n\nBeautiful Soup uses a pluggable XML or HTML parser to parse a (possibly invalid) document into a tree representation. Beautiful Soup provides methods and Pythonic idioms that make it easy to navigate, search, and modify the parse tree.\n\nBeautiful Soup works with Python 3.7 and up. It works better if lxml and/or html5lib is installed, but they are not required.\n\nFor more than you ever wanted to know about Beautiful Soup, see the documentation: [http://www.crummy.com/software/BeautifulSoup/bs4/doc/](http://www.crummy.com/software/BeautifulSoup/bs4/doc/)\n\n_exception_ bs4.AttributeResemblesVariableWarning[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.AttributeResemblesVariableWarning \"Link to this definition\")\n\nBases: [`UnusualUsageWarning`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnusualUsageWarning \"bs4._warnings.UnusualUsageWarning\")\n, [`SyntaxWarning`](https://docs.python.org/3/library/exceptions.html#SyntaxWarning \"(in Python v3.13)\")\n\nThe warning issued when Beautiful Soup suspects a provided attribute name may actually be the misspelled name of a Beautiful Soup variable. Generally speaking, this is only used in cases like \"\\_class\" where it's very unlikely the user would be referencing an XML attribute with that name.\n\nMESSAGE_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '%(original)r is an unusual attribute name and is a common misspelling for %(autocorrect)r.\\\\n\\\\nIf you meant %(autocorrect)r, change your code to use it, and this warning will go away.\\\\n\\\\nIf you really did mean to check the %(original)r attribute, this warning is spurious and can be filtered. To make it go away, run this code before creating your BeautifulSoup object:\\\\n\\\\n    from bs4 import AttributeResemblesVariableWarning\\\\n    import warnings\\\\n\\\\n    warnings.filterwarnings(\"ignore\", category=AttributeResemblesVariableWarning)\\\\n'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.AttributeResemblesVariableWarning.MESSAGE \"Link to this definition\")\n\n_class_ bs4.BeautifulSoup(_markup: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n | [IO](https://docs.python.org/3/library/typing.html#typing.IO \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [IO](https://docs.python.org/3/library/typing.html#typing.IO \"(in Python v3.13)\")\n\\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n\\] \\= ''_, _features: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [Sequence](https://docs.python.org/3/library/typing.html#typing.Sequence \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _builder: [TreeBuilder](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n | [Type](https://docs.python.org/3/library/typing.html#typing.Type \"(in Python v3.13)\")\n\\[[TreeBuilder](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _parse\\_only: [SoupStrainer](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer \"bs4.filter.SoupStrainer\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _from\\_encoding: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _exclude\\_encodings: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _element\\_classes: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[Type](https://docs.python.org/3/library/typing.html#typing.Type \"(in Python v3.13)\")\\\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\], [Type](https://docs.python.org/3/library/typing.html#typing.Type \"(in Python v3.13)\")\\\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\*\\*kwargs: [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"Link to this definition\")\n\nBases: [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n\nA data structure representing a parsed HTML or XML document.\n\nMost of the methods you'll call on a BeautifulSoup object are inherited from PageElement or Tag.\n\nInternally, this class defines the basic interface called by the tree builders when converting an HTML/XML document into a data structure. The interface abstracts away the differences between parsers. To write a new tree builder, you'll need to understand these methods as a whole.\n\nThese methods will be called by the BeautifulSoup constructor:\n\n*   reset()\n    \n*   feed(markup)\n    \n\nThe tree builder may call these methods from its feed() implementation:\n\n*   handle\\_starttag(name, attrs) # See note about return value\n    \n*   handle\\_endtag(name)\n    \n*   handle\\_data(data) # Appends to the current data node\n    \n*   endData(containerClass) # Ends the current data node\n    \n\nNo matter how complicated the underlying parser is, you should be able to build a tree using 'start tag' events, 'end tag' events, 'data' events, and \"done with data\" events.\n\nIf you encounter an empty-element tag (aka a self-closing tag, like HTML's <br> tag), call handle\\_starttag and then handle\\_endtag.\n\nASCII\\_SPACES_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= ' \\\\n\\\\t\\\\x0c\\\\r'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.ASCII_SPACES \"Link to this definition\")\n\nA string containing all ASCII whitespace characters, used in during parsing to detect data chunks that seem 'empty'.\n\nDEFAULT\\_BUILDER\\_FEATURES_: [Sequence](https://docs.python.org/3/library/typing.html#typing.Sequence \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_ _\\= \\['html', 'fast'\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.DEFAULT_BUILDER_FEATURES \"Link to this definition\")\n\nIf the end-user gives no indication which tree builder they want, look for one with these features.\n\nROOT\\_TAG\\_NAME_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '\\[document\\]'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.ROOT_TAG_NAME \"Link to this definition\")\n\nSince [`BeautifulSoup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n subclasses [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n, it's possible to treat it as a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n with a [`Tag.name`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.name \"bs4.Tag.name\")\n. Hoever, this name makes it clear the [`BeautifulSoup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n object isn't a real markup tag.\n\ncontains\\_replacement\\_characters_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.contains_replacement_characters \"Link to this definition\")\n\nThis is True if the markup that was parsed contains U+FFFD REPLACEMENT\\_CHARACTER characters which were not present in the original markup. These mark character sequences that could not be represented in Unicode.\n\ncopy\\_self() → [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.copy_self \"Link to this definition\")\n\nCreate a new BeautifulSoup object with the same TreeBuilder, but not associated with any markup.\n\nThis is the first step of the deepcopy process.\n\ndeclared\\_html\\_encoding_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.declared_html_encoding \"Link to this definition\")\n\nThe character encoding, if any, that was explicitly defined in the original document. This may or may not match [`BeautifulSoup.original_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.original_encoding \"bs4.BeautifulSoup.original_encoding\")\n.\n\ndecode(_indent\\_level: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _eventual\\_encoding: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n \\= 'utf-8'_, _formatter: [Formatter](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter \"bs4.formatter.Formatter\")\n | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n \\= 'minimal'_, _iterator: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\*\\*kwargs: [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.13)\")\n_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.decode \"Link to this definition\")\n\nReturns a string representation of the parse tree\n\nas a full HTML or XML document.\n\nParameters:\n\n*   **indent\\_level** -- Each line of the rendering will be indented this many levels. (The `formatter` decides what a 'level' means, in terms of spaces or other characters output.) This is used internally in recursive calls while pretty-printing.\n    \n*   **eventual\\_encoding** -- The encoding of the final document. If this is None, the document will be a Unicode string.\n    \n*   **formatter** -- Either a [`Formatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter \"bs4.formatter.Formatter\")\n     object, or a string naming one of the standard formatters.\n    \n*   **iterator** -- The iterator to use when navigating over the parse tree. This is only used by [`Tag.decode_contents`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.decode_contents \"bs4.Tag.decode_contents\")\n     and you probably won't need to use it.\n    \n\ninsert\\_after(_\\*args: [PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [List](https://docs.python.org/3/library/typing.html#typing.List \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.insert_after \"Link to this definition\")\n\nThis method is part of the PageElement API, but [`BeautifulSoup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n doesn't implement it because there is nothing before or after it in the parse tree.\n\ninsert\\_before(_\\*args: [PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [List](https://docs.python.org/3/library/typing.html#typing.List \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.insert_before \"Link to this definition\")\n\nThis method is part of the PageElement API, but [`BeautifulSoup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n doesn't implement it because there is nothing before or after it in the parse tree.\n\nis\\_xml_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.is_xml \"Link to this definition\")\n\nnew\\_string(_s: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _subclass: [Type](https://docs.python.org/3/library/typing.html#typing.Type \"(in Python v3.13)\")\n\\[[NavigableString](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_) → [NavigableString](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.new_string \"Link to this definition\")\n\nCreate a new [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\n associated with this [`BeautifulSoup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n object.\n\nParameters:\n\n*   **s** -- The string content of the [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\n    \n*   **subclass** -- The subclass of [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\n    , if any, to use. If a document is being processed, an appropriate subclass for the current location in the document will be determined automatically.\n    \n\nnew\\_tag(_name: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _namespace: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _nsprefix: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _attrs: Mapping\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n | [NamespacedAttribute](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NamespacedAttribute \"bs4.element.NamespacedAttribute\")\\\n, \\_RawAttributeValue\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _sourceline: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _sourcepos: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _string: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\*\\*kwattrs: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.new_tag \"Link to this definition\")\n\nCreate a new Tag associated with this BeautifulSoup object.\n\nParameters:\n\n*   **name** -- The name of the new Tag.\n    \n*   **namespace** -- The URI of the new Tag's XML namespace, if any.\n    \n*   **prefix** -- The prefix for the new Tag's XML namespace, if any.\n    \n*   **attrs** -- A dictionary of this Tag's attribute values; can be used instead of `kwattrs` for attributes like 'class' that are reserved words in Python.\n    \n*   **sourceline** -- The line number where this tag was (purportedly) found in its source document.\n    \n*   **sourcepos** -- The character position within `sourceline` where this tag was (purportedly) found.\n    \n*   **string** -- String content for the new Tag, if any.\n    \n*   **kwattrs** -- Keyword arguments for the new Tag's attribute values.\n    \n\noriginal\\_encoding_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.original_encoding \"Link to this definition\")\n\nBeautiful Soup's best guess as to the character encoding of the original document.\n\nreset() → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.reset \"Link to this definition\")\n\nReset this object to a state as though it had never parsed any markup.\n\nstring\\_container(_base\\_class: [Type](https://docs.python.org/3/library/typing.html#typing.Type \"(in Python v3.13)\")\n\\[[NavigableString](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_) → [Type](https://docs.python.org/3/library/typing.html#typing.Type \"(in Python v3.13)\")\n\\[[NavigableString](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.string_container \"Link to this definition\")\n\nFind the class that should be instantiated to hold a given kind of string.\n\nThis may be a built-in Beautiful Soup class or a custom class passed in to the BeautifulSoup constructor.\n\n_class_ bs4.CData(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CData \"Link to this definition\")\n\nBases: [`PreformattedString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString \"bs4.element.PreformattedString\")\n\nA [CDATA section](https://dev.w3.org/html5/spec-LC/syntax.html#cdata-sections)\n.\n\nPREFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '<!\\[CDATA\\['_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CData.PREFIX \"Link to this definition\")\\\n\\\nA string prepended to the body of the 'real' string when formatting it as part of a document, such as the '<!--' in an HTML comment.\\\n\\\nSUFFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n_ _\\= '\\]\\]>'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CData.SUFFIX \"Link to this definition\")\n\nA string appended to the body of the 'real' string when formatting it as part of a document, such as the '-->' in an HTML comment.\n\n_class_ bs4.CSS(_tag: [element.Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n_, _api: ModuleType | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS \"Link to this definition\")\n\nBases: [`object`](https://docs.python.org/3/library/functions.html#object \"(in Python v3.13)\")\n\nA proxy object against the `soupsieve` library, to simplify its CSS selector API.\n\nYou don't need to instantiate this class yourself; instead, use [`element.Tag.css`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.css \"bs4.element.Tag.css\")\n.\n\nParameters:\n\n*   **tag** -- All CSS selectors run by this object will use this as their starting point.\n    \n*   **api** -- An optional drop-in replacement for the `soupsieve` module, intended for use in unit tests.\n    \n\nclosest(_select: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _namespaces: \\_NamespaceMapping | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _flags: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _\\*\\*kwargs: Any_) → [element.Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.closest \"Link to this definition\")\n\nFind the [`element.Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n closest to this one that matches the given selector.\n\nThis uses the Soup Sieve library. For more information, see that library's documentation for the [soupsieve.closest()](https://facelessuser.github.io/soupsieve/api/#soupsieveclosest)\n method.\n\nParameters:\n\n*   **selector** -- A string containing a CSS selector.\n    \n*   **namespaces** -- A dictionary mapping namespace prefixes used in the CSS selector to namespace URIs. By default, Beautiful Soup will pass in the prefixes it encountered while parsing the document.\n    \n*   **flags** --\n    \n    Flags to be passed into Soup Sieve's [soupsieve.closest()](https://facelessuser.github.io/soupsieve/api/#soupsieveclosest)\n     method.\n    \n*   **kwargs** --\n    \n    Keyword arguments to be passed into Soup Sieve's [soupsieve.closest()](https://facelessuser.github.io/soupsieve/api/#soupsieveclosest)\n     method.\n    \n\ncompile(_select: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _namespaces: \\_NamespaceMapping | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _flags: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _\\*\\*kwargs: Any_) → SoupSieve[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.compile \"Link to this definition\")\n\nPre-compile a selector and return the compiled object.\n\nParameters:\n\n*   **selector** -- A CSS selector.\n    \n*   **namespaces** -- A dictionary mapping namespace prefixes used in the CSS selector to namespace URIs. By default, Beautiful Soup will use the prefixes it encountered while parsing the document.\n    \n*   **flags** -- Flags to be passed into Soup Sieve's [soupsieve.compile()](https://facelessuser.github.io/soupsieve/api/#soupsievecompile)\n     method.\n    \n*   **kwargs** --\n    \n    Keyword arguments to be passed into Soup Sieve's [soupsieve.compile()](https://facelessuser.github.io/soupsieve/api/#soupsievecompile)\n     method.\n    \n\nReturns:\n\nA precompiled selector object.\n\nReturn type:\n\nsoupsieve.SoupSieve\n\nescape(_ident: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.escape \"Link to this definition\")\n\nEscape a CSS identifier.\n\nThis is a simple wrapper around [soupsieve.escape()](https://facelessuser.github.io/soupsieve/api/#soupsieveescape)\n. See the documentation for that function for more information.\n\nfilter(_select: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _namespaces: \\_NamespaceMapping | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _flags: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _\\*\\*kwargs: Any_) → [ResultSet](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ResultSet \"bs4.ResultSet\")\n\\[[element.Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.filter \"Link to this definition\")\n\nFilter this [`element.Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n's direct children based on the given CSS selector.\n\nThis uses the Soup Sieve library. It works the same way as passing a [`element.Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n into that library's [soupsieve.filter()](https://facelessuser.github.io/soupsieve/api/#soupsievefilter)\n method. For more information, see the documentation for [soupsieve.filter()](https://facelessuser.github.io/soupsieve/api/#soupsievefilter)\n.\n\nParameters:\n\n*   **namespaces** -- A dictionary mapping namespace prefixes used in the CSS selector to namespace URIs. By default, Beautiful Soup will pass in the prefixes it encountered while parsing the document.\n    \n*   **flags** --\n    \n    Flags to be passed into Soup Sieve's [soupsieve.filter()](https://facelessuser.github.io/soupsieve/api/#soupsievefilter)\n     method.\n    \n*   **kwargs** --\n    \n    Keyword arguments to be passed into SoupSieve's [soupsieve.filter()](https://facelessuser.github.io/soupsieve/api/#soupsievefilter)\n     method.\n    \n\niselect(_select: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _namespaces: \\_NamespaceMapping | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _limit: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _flags: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _\\*\\*kwargs: Any_) → Iterator\\[[element.Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.iselect \"Link to this definition\")\n\nPerform a CSS selection operation on the current [`element.Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n.\n\nThis uses the Soup Sieve library. For more information, see that library's documentation for the [soupsieve.iselect()](https://facelessuser.github.io/soupsieve/api/#soupsieveiselect)\n method. It is the same as select(), but it returns a generator instead of a list.\n\nParameters:\n\n*   **selector** -- A string containing a CSS selector.\n    \n*   **namespaces** -- A dictionary mapping namespace prefixes used in the CSS selector to namespace URIs. By default, Beautiful Soup will pass in the prefixes it encountered while parsing the document.\n    \n*   **limit** -- After finding this number of results, stop looking.\n    \n*   **flags** --\n    \n    Flags to be passed into Soup Sieve's [soupsieve.iselect()](https://facelessuser.github.io/soupsieve/api/#soupsieveiselect)\n     method.\n    \n*   **kwargs** --\n    \n    Keyword arguments to be passed into Soup Sieve's [soupsieve.iselect()](https://facelessuser.github.io/soupsieve/api/#soupsieveiselect)\n     method.\n    \n\nmatch(_select: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _namespaces: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _flags: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _\\*\\*kwargs: [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.13)\")\n_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.match \"Link to this definition\")\n\nCheck whether or not this [`element.Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n matches the given CSS selector.\n\nThis uses the Soup Sieve library. For more information, see that library's documentation for the [soupsieve.match()](https://facelessuser.github.io/soupsieve/api/#soupsievematch)\n method.\n\nParam:\n\na CSS selector.\n\nParameters:\n\n*   **namespaces** -- A dictionary mapping namespace prefixes used in the CSS selector to namespace URIs. By default, Beautiful Soup will pass in the prefixes it encountered while parsing the document.\n    \n*   **flags** --\n    \n    Flags to be passed into Soup Sieve's [soupsieve.match()](https://facelessuser.github.io/soupsieve/api/#soupsievematch)\n     method.\n    \n*   **kwargs** --\n    \n    Keyword arguments to be passed into SoupSieve's [soupsieve.match()](https://facelessuser.github.io/soupsieve/api/#soupsievematch)\n     method.\n    \n\nselect(_select: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _namespaces: \\_NamespaceMapping | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _limit: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _flags: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _\\*\\*kwargs: Any_) → [ResultSet](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ResultSet \"bs4.ResultSet\")\n\\[[element.Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.select \"Link to this definition\")\n\nPerform a CSS selection operation on the current [`element.Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n.\n\nThis uses the Soup Sieve library. For more information, see that library's documentation for the [soupsieve.select()](https://facelessuser.github.io/soupsieve/api/#soupsieveselect)\n method.\n\nParameters:\n\n*   **selector** -- A CSS selector.\n    \n*   **namespaces** -- A dictionary mapping namespace prefixes used in the CSS selector to namespace URIs. By default, Beautiful Soup will pass in the prefixes it encountered while parsing the document.\n    \n*   **limit** -- After finding this number of results, stop looking.\n    \n*   **flags** --\n    \n    Flags to be passed into Soup Sieve's [soupsieve.select()](https://facelessuser.github.io/soupsieve/api/#soupsieveselect)\n     method.\n    \n*   **kwargs** --\n    \n    Keyword arguments to be passed into Soup Sieve's [soupsieve.select()](https://facelessuser.github.io/soupsieve/api/#soupsieveselect)\n     method.\n    \n\nselect\\_one(_select: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _namespaces: \\_NamespaceMapping | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _flags: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _\\*\\*kwargs: Any_) → [element.Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.select_one \"Link to this definition\")\n\nPerform a CSS selection operation on the current Tag and return the first result, if any.\n\nThis uses the Soup Sieve library. For more information, see that library's documentation for the [soupsieve.select\\_one()](https://facelessuser.github.io/soupsieve/api/#soupsieveselect_one)\n method.\n\nParameters:\n\n*   **selector** -- A CSS selector.\n    \n*   **namespaces** -- A dictionary mapping namespace prefixes used in the CSS selector to namespace URIs. By default, Beautiful Soup will use the prefixes it encountered while parsing the document.\n    \n*   **flags** --\n    \n    Flags to be passed into Soup Sieve's [soupsieve.select\\_one()](https://facelessuser.github.io/soupsieve/api/#soupsieveselect_one)\n     method.\n    \n*   **kwargs** --\n    \n    Keyword arguments to be passed into Soup Sieve's [soupsieve.select\\_one()](https://facelessuser.github.io/soupsieve/api/#soupsieveselect_one)\n     method.\n    \n\n_class_ bs4.Comment(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Comment \"Link to this definition\")\n\nBases: [`PreformattedString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString \"bs4.element.PreformattedString\")\n\nAn [HTML comment](https://dev.w3.org/html5/spec-LC/syntax.html#comments)\n or [XML comment](https://www.w3.org/TR/REC-xml/#sec-comments)\n.\n\nPREFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '<!--'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Comment.PREFIX \"Link to this definition\")\n\nA string prepended to the body of the 'real' string when formatting it as part of a document, such as the '<!--' in an HTML comment.\n\nSUFFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '-->'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Comment.SUFFIX \"Link to this definition\")\n\nA string appended to the body of the 'real' string when formatting it as part of a document, such as the '-->' in an HTML comment.\n\n_class_ bs4.Declaration(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Declaration \"Link to this definition\")\n\nBases: [`PreformattedString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString \"bs4.element.PreformattedString\")\n\nAn [XML declaration](https://www.w3.org/TR/REC-xml/#sec-prolog-dtd)\n.\n\nPREFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '<?'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Declaration.PREFIX \"Link to this definition\")\n\nA string prepended to the body of the 'real' string when formatting it as part of a document, such as the '<!--' in an HTML comment.\n\nSUFFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '?>'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Declaration.SUFFIX \"Link to this definition\")\n\nA string appended to the body of the 'real' string when formatting it as part of a document, such as the '-->' in an HTML comment.\n\n_class_ bs4.Doctype(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Doctype \"Link to this definition\")\n\nBases: [`PreformattedString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString \"bs4.element.PreformattedString\")\n\nA [document type declaration](https://www.w3.org/TR/REC-xml/#dt-doctype)\n.\n\nPREFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '<!DOCTYPE '_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Doctype.PREFIX \"Link to this definition\")\n\nA string prepended to the body of the 'real' string when formatting it as part of a document, such as the '<!--' in an HTML comment.\n\nSUFFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '>\\\\n'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Doctype.SUFFIX \"Link to this definition\")\n\nA string appended to the body of the 'real' string when formatting it as part of a document, such as the '-->' in an HTML comment.\n\n_classmethod_ for\\_name\\_and\\_ids(_name: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _pub\\_id: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_, _system\\_id: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_) → [Doctype](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype \"bs4.element.Doctype\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Doctype.for_name_and_ids \"Link to this definition\")\n\nGenerate an appropriate document type declaration for a given public ID and system ID.\n\nParameters:\n\n*   **name** -- The name of the document's root element, e.g. 'html'.\n    \n*   **pub\\_id** -- The Formal Public Identifier for this document type, e.g. '-//W3C//DTD XHTML 1.1//EN'\n    \n*   **system\\_id** -- The system identifier for this document type, e.g. '[http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd](http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd)\n    '\n    \n\n_class_ bs4.ElementFilter(_match\\_function: [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\n\\[\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\], [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter \"Link to this definition\")\n\nBases: [`object`](https://docs.python.org/3/library/functions.html#object \"(in Python v3.13)\")\n\n[`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter \"bs4.ElementFilter\")\n encapsulates the logic necessary to decide:\n\n1\\. whether a [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n (a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n or a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\n) matches a user-specified query.\n\n2\\. whether a given sequence of markup found during initial parsing should be turned into a [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n at all, or simply discarded.\n\nThe base class is the simplest [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter \"bs4.ElementFilter\")\n. By default, it matches everything and allows all markup to become [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n objects. You can make it more selective by passing in a user-defined match function, or defining a subclass.\n\nMost users of Beautiful Soup will never need to use [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter \"bs4.ElementFilter\")\n, or its more capable subclass [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#SoupStrainer \"SoupStrainer\")\n. Instead, they will use methods like [`Tag.find()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.find \"bs4.Tag.find\")\n, which will convert their arguments into [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#SoupStrainer \"SoupStrainer\")\n objects and run them against the tree.\n\nHowever, if you find yourself wanting to treat the arguments to Beautiful Soup's find\\_\\*() methods as first-class objects, those objects will be [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#SoupStrainer \"SoupStrainer\")\n objects. You can create them yourself and then make use of functions like [`ElementFilter.filter()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.filter \"bs4.ElementFilter.filter\")\n.\n\nallow\\_string\\_creation(_string: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.allow_string_creation \"Link to this definition\")\n\nBased on the content of a string, see whether this [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter \"bs4.ElementFilter\")\n will allow a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\n object based on this string to be added to the parse tree.\n\nBy default, all strings are processed into [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\n objects. To change this, subclass [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter \"bs4.ElementFilter\")\n.\n\nParameters:\n\n**str** -- The string under consideration.\n\nallow\\_tag\\_creation(_nsprefix: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_, _name: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _attrs: \\_RawAttributeValues | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.allow_tag_creation \"Link to this definition\")\n\nBased on the name and attributes of a tag, see whether this [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter \"bs4.ElementFilter\")\n will allow a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n object to even be created.\n\nBy default, all tags are parsed. To change this, subclass [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter \"bs4.ElementFilter\")\n.\n\nParameters:\n\n*   **name** -- The name of the prospective tag.\n    \n*   **attrs** -- The attributes of the prospective tag.\n    \n\n_property_ excludes\\_everything_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.excludes_everything \"Link to this definition\")\n\nDoes this [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter \"bs4.ElementFilter\")\n obviously exclude everything? If so, Beautiful Soup will issue a warning if you try to use it when parsing a document.\n\nThe [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter \"bs4.ElementFilter\")\n might turn out to exclude everything even if this returns [`False`](https://docs.python.org/3/library/constants.html#False \"(in Python v3.13)\")\n, but it won't exclude everything in an obvious way.\n\nThe base [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter \"bs4.ElementFilter\")\n implementation excludes things based on a match function we can't inspect, so excludes\\_everything is always false.\n\nfilter(_generator: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_) → [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n | [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\\\n | [NavigableString](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.filter \"Link to this definition\")\n\nThe most generic search method offered by Beautiful Soup.\n\nActs like Python's built-in [`filter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.filter \"bs4.ElementFilter.filter\")\n, using [`ElementFilter.match`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.match \"bs4.ElementFilter.match\")\n as the filtering function.\n\nfind(_generator: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_) → [PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n | [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n | [NavigableString](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.find \"Link to this definition\")\n\nA lower-level equivalent of [`Tag.find()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.find \"bs4.Tag.find\")\n.\n\nYou can pass in your own generator for iterating over [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n objects. The first one that matches this [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter \"bs4.ElementFilter\")\n will be returned.\n\nParameters:\n\n**generator** -- A way of iterating over [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n objects.\n\nfind\\_all(_generator: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_, _limit: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_) → [ResultSet](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ResultSet \"bs4.element.ResultSet\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n | [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\\\n | [NavigableString](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.find_all \"Link to this definition\")\n\nA lower-level equivalent of [`Tag.find_all()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.find_all \"bs4.Tag.find_all\")\n.\n\nYou can pass in your own generator for iterating over [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n objects. Only elements that match this [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter \"bs4.ElementFilter\")\n will be returned in the [`ResultSet`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ResultSet \"bs4.ResultSet\")\n.\n\nParameters:\n\n*   **generator** -- A way of iterating over [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n     objects.\n    \n*   **limit** -- Stop looking after finding this many results.\n    \n\n_property_ includes\\_everything_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.includes_everything \"Link to this definition\")\n\nDoes this [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter \"bs4.ElementFilter\")\n obviously include everything? If so, the filter process can be made much faster.\n\nThe [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter \"bs4.ElementFilter\")\n might turn out to include everything even if this returns [`False`](https://docs.python.org/3/library/constants.html#False \"(in Python v3.13)\")\n, but it won't include everything in an obvious way.\n\nThe base [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter \"bs4.ElementFilter\")\n implementation includes things based on the match function, so includes\\_everything is only true if there is no match function.\n\nmatch(_element: [PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n_, _\\_known\\_rules: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= False_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.match \"Link to this definition\")\n\nDoes the given PageElement match the rules set down by this ElementFilter?\n\nThe base implementation delegates to the function passed in to the constructor.\n\nParameters:\n\n**\\_known\\_rules** -- Defined for compatibility with\n\nSoupStrainer.\\_match(). Used more for consistency than because we need the performance optimization.\n\nmatch\\_function_: [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\n\\[\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\], [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.match_function \"Link to this definition\")\n\n_exception_ bs4.FeatureNotFound[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.FeatureNotFound \"Link to this definition\")\n\nBases: [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError \"(in Python v3.13)\")\n\nException raised by the BeautifulSoup constructor if no parser with the requested features is found.\n\n_exception_ bs4.GuessedAtParserWarning[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.GuessedAtParserWarning \"Link to this definition\")\n\nBases: [`UserWarning`](https://docs.python.org/3/library/exceptions.html#UserWarning \"(in Python v3.13)\")\n\nThe warning issued when BeautifulSoup has to guess what parser to use -- probably because no parser was specified in the constructor.\n\nMESSAGE_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= 'No parser was explicitly specified, so I\\\\'m using the best available %(markup\\_type)s parser for this system (\"%(parser)s\"). This usually isn\\\\'t a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.\\\\n\\\\nThe code that caused this warning is on line %(line\\_number)s of the file %(filename)s. To get rid of this warning, pass the additional argument \\\\'features=\"%(parser)s\"\\\\' to the BeautifulSoup constructor.\\\\n'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.GuessedAtParserWarning.MESSAGE \"Link to this definition\")\n\n_exception_ bs4.MarkupResemblesLocatorWarning[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.MarkupResemblesLocatorWarning \"Link to this definition\")\n\nBases: [`UnusualUsageWarning`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnusualUsageWarning \"bs4._warnings.UnusualUsageWarning\")\n\nThe warning issued when BeautifulSoup is given 'markup' that actually looks like a resource locator -- a URL or a path to a file on disk.\n\nFILENAME\\_MESSAGE_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= 'The input passed in on this line looks more like a filename than HTML or XML.\\\\n\\\\nIf you meant to use Beautiful Soup to parse the contents of a file on disk, then something has gone wrong. You should open the file first, using code like this:\\\\n\\\\n    filehandle \\= open(your filename)\\\\n\\\\nYou can then feed the open filehandle into Beautiful Soup instead of using the filename.\\\\n\\\\nHowever, if you want to parse some data that happens to look like a %(what)s, then nothing has gone wrong: you are using Beautiful Soup correctly, and this warning is spurious and can be filtered. To make this warning go away, run this code before calling the BeautifulSoup constructor:\\\\n\\\\n    from bs4 import MarkupResemblesLocatorWarning\\\\n    import warnings\\\\n\\\\n    warnings.filterwarnings(\"ignore\", category=MarkupResemblesLocatorWarning)\\\\n    '_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.MarkupResemblesLocatorWarning.FILENAME_MESSAGE \"Link to this definition\")\n\nURL\\_MESSAGE_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= 'The input passed in on this line looks more like a URL than HTML or XML.\\\\n\\\\nIf you meant to use Beautiful Soup to parse the web page found at a certain URL, then something has gone wrong. You should use an Python package like \\\\'requests\\\\' to fetch the content behind the URL. Once you have the content as a string, you can feed that string into Beautiful Soup.\\\\n\\\\nHowever, if you want to parse some data that happens to look like a %(what)s, then nothing has gone wrong: you are using Beautiful Soup correctly, and this warning is spurious and can be filtered. To make this warning go away, run this code before calling the BeautifulSoup constructor:\\\\n\\\\n    from bs4 import MarkupResemblesLocatorWarning\\\\n    import warnings\\\\n\\\\n    warnings.filterwarnings(\"ignore\", category=MarkupResemblesLocatorWarning)\\\\n    '_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.MarkupResemblesLocatorWarning.URL_MESSAGE \"Link to this definition\")\n\n_exception_ bs4.ParserRejectedMarkup(_message\\_or\\_exception: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [Exception](https://docs.python.org/3/library/exceptions.html#Exception \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ParserRejectedMarkup \"Link to this definition\")\n\nBases: [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception \"(in Python v3.13)\")\n\nAn Exception to be raised when the underlying parser simply refuses to parse the given markup.\n\n_class_ bs4.ProcessingInstruction(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ProcessingInstruction \"Link to this definition\")\n\nBases: [`PreformattedString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString \"bs4.element.PreformattedString\")\n\nA SGML processing instruction.\n\nPREFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '<?'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ProcessingInstruction.PREFIX \"Link to this definition\")\n\nA string prepended to the body of the 'real' string when formatting it as part of a document, such as the '<!--' in an HTML comment.\n\nSUFFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '>'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ProcessingInstruction.SUFFIX \"Link to this definition\")\n\nA string appended to the body of the 'real' string when formatting it as part of a document, such as the '-->' in an HTML comment.\n\n_class_ bs4.ResultSet(_source: [ElementFilter](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter \"bs4.ElementFilter\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_, _result: Iterable\\[\\_PageElementT\\] \\= ()_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ResultSet \"Link to this definition\")\n\nBases: [`List`](https://docs.python.org/3/library/typing.html#typing.List \"(in Python v3.13)\")\n\\[`_PageElementT`\\], [`Generic`](https://docs.python.org/3/library/typing.html#typing.Generic \"(in Python v3.13)\")\n\\[`_PageElementT`\\]\n\nA ResultSet is a list of [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n objects, gathered as the result of matching an [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#ElementFilter \"ElementFilter\")\n against a parse tree. Basically, a list of search results.\n\nsource_: [ElementFilter](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter \"bs4.ElementFilter\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ResultSet.source \"Link to this definition\")\n\n_class_ bs4.Script(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Script \"Link to this definition\")\n\nBases: [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n\nA [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\n representing the contents of a [<script> HTML tag](https://dev.w3.org/html5/spec-LC/Overview.html#the-script-element)\n (probably Javascript).\n\nUsed to distinguish executable code from textual content.\n\n_exception_ bs4.StopParsing[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.StopParsing \"Link to this definition\")\n\nBases: [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception \"(in Python v3.13)\")\n\nException raised by a TreeBuilder if it's unable to continue parsing.\n\n_class_ bs4.Stylesheet(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Stylesheet \"Link to this definition\")\n\nBases: [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n\nA [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\n representing the contents of a [<style> HTML tag](https://dev.w3.org/html5/spec-LC/Overview.html#the-style-element)\n (probably CSS).\n\nUsed to distinguish embedded stylesheets from textual content.\n\n_class_ bs4.Tag(_parser: [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _builder: [TreeBuilder](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _name: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _namespace: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _prefix: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _attrs: \\_RawOrProcessedAttributeValues | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _parent: [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n | [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _previous: \\_AtMostOneElement \\= None_, _is\\_xml: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _sourceline: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _sourcepos: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _can\\_be\\_empty\\_element: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _cdata\\_list\\_attributes: Dict\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, Set\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _preserve\\_whitespace\\_tags: Set\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _interesting\\_string\\_types: Set\\[Type\\[[NavigableString](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\\\n\\]\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _namespaces: Dict\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"Link to this definition\")\n\nBases: [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n\nAn HTML or XML tag that is part of a parse tree, along with its attributes, contents, and relationships to other parts of the tree.\n\nWhen Beautiful Soup parses the markup `<b>penguin</b>`, it will create a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n object representing the `<b>` tag. You can instantiate [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n objects directly, but it's not necessary unless you're adding entirely new markup to a parsed document. Most of the constructor arguments are intended for use by the [`TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n that's parsing a document.\n\nParameters:\n\n*   **parser** -- A [`BeautifulSoup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n     object representing the parse tree this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n     will be part of.\n    \n*   **builder** -- The [`TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n     being used to build the tree.\n    \n*   **name** -- The name of the tag.\n    \n*   **namespace** -- The URI of this tag's XML namespace, if any.\n    \n*   **prefix** -- The prefix for this tag's XML namespace, if any.\n    \n*   **attrs** -- A dictionary of attribute values.\n    \n*   **parent** -- The [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n     to use as the parent of this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n    . May be the [`BeautifulSoup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n     object itself.\n    \n*   **previous** -- The [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n     that was parsed immediately before parsing this tag.\n    \n*   **is\\_xml** -- If True, this is an XML tag. Otherwise, this is an HTML tag.\n    \n*   **sourceline** -- The line number where this tag was found in its source document.\n    \n*   **sourcepos** -- The character position within `sourceline` where this tag was found.\n    \n*   **can\\_be\\_empty\\_element** -- If True, this tag should be represented as <tag/>. If False, this tag should be represented as <tag></tag>.\n    \n*   **cdata\\_list\\_attributes** -- A dictionary of attributes whose values should be parsed as lists of strings if they ever show up on this tag.\n    \n*   **preserve\\_whitespace\\_tags** -- Names of tags whose contents should have their whitespace preserved if they are encountered inside this tag.\n    \n*   **interesting\\_string\\_types** -- When iterating over this tag's string contents in methods like [`Tag.strings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.strings \"bs4.Tag.strings\")\n     or [`PageElement.get_text`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.get_text \"bs4.element.PageElement.get_text\")\n    , these are the types of strings that are interesting enough to be considered. By default, [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\n     (normal strings) and [`CData`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CData \"bs4.CData\")\n     (CDATA sections) are the only interesting string subtypes.\n    \n*   **namespaces** -- A dictionary mapping currently active namespace prefixes to URIs, as of the point in the parsing process when this tag was encountered. This can be used later to construct CSS selectors.\n    \n\nappend(_tag: \\_InsertableElement_) → [PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.append \"Link to this definition\")\n\nAppends the given [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n to the contents of this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n.\n\nParameters:\n\n**tag** -- A PageElement.\n\n:return The newly appended PageElement.\n\nattrs_: \\_AttributeValues_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.attrs \"Link to this definition\")\n\ncan\\_be\\_empty\\_element_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.can_be_empty_element \"Link to this definition\")\n\ncdata\\_list\\_attributes_: Dict\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, Set\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.cdata_list_attributes \"Link to this definition\")\n\n_property_ children_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.children \"Link to this definition\")\n\nIterate over all direct children of this [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n.\n\nclear(_decompose: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= False_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.clear \"Link to this definition\")\n\nDestroy all children of this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n by calling\n\n[`PageElement.extract`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.extract \"bs4.element.PageElement.extract\")\n on them.\n\nParameters:\n\n**decompose** -- If this is True, [`PageElement.decompose`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.decompose \"bs4.element.PageElement.decompose\")\n (a more destructive method) will be called instead of [`PageElement.extract`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.extract \"bs4.element.PageElement.extract\")\n.\n\ncontents_: List\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.contents \"Link to this definition\")\n\ncopy\\_self() → [Self](https://docs.python.org/3/library/typing.html#typing.Self \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.copy_self \"Link to this definition\")\n\nCreate a new Tag just like this one, but with no contents and unattached to any parse tree.\n\nThis is the first step in the deepcopy process, but you can call it on its own to create a copy of a Tag without copying its contents.\n\n_property_ css_: [CSS](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS \"bs4.css.CSS\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.css \"Link to this definition\")\n\nReturn an interface to the CSS selector API.\n\ndecode(_indent\\_level: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _eventual\\_encoding: \\_Encoding \\= 'utf-8'_, _formatter: \\_FormatterOrName \\= 'minimal'_, _iterator: Iterator\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.decode \"Link to this definition\")\n\nRender this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n and its contents as a Unicode string.\n\nParameters:\n\n*   **indent\\_level** -- Each line of the rendering will be indented this many levels. (The `formatter` decides what a 'level' means, in terms of spaces or other characters output.) This is used internally in recursive calls while pretty-printing.\n    \n*   **encoding** -- The encoding you intend to use when converting the string to a bytestring. decode() is _not_ responsible for performing that encoding. This information is needed so that a real encoding can be substituted in if the document contains an encoding declaration (e.g. in a <meta> tag).\n    \n*   **formatter** -- Either a [`Formatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter \"bs4.formatter.Formatter\")\n     object, or a string naming one of the standard formatters.\n    \n*   **iterator** -- The iterator to use when navigating over the parse tree. This is only used by [`Tag.decode_contents`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.decode_contents \"bs4.Tag.decode_contents\")\n     and you probably won't need to use it.\n    \n\ndecode\\_contents(_indent\\_level: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _eventual\\_encoding: \\_Encoding \\= 'utf-8'_, _formatter: \\_FormatterOrName \\= 'minimal'_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.decode_contents \"Link to this definition\")\n\nRenders the contents of this tag as a Unicode string.\n\nParameters:\n\n*   **indent\\_level** -- Each line of the rendering will be indented this many levels. (The formatter decides what a 'level' means in terms of spaces or other characters output.) Used internally in recursive calls while pretty-printing.\n    \n*   **eventual\\_encoding** -- The tag is destined to be encoded into this encoding. decode\\_contents() is _not_ responsible for performing that encoding. This information is needed so that a real encoding can be substituted in if the document contains an encoding declaration (e.g. in a <meta> tag).\n    \n*   **formatter** -- A [`Formatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter \"bs4.formatter.Formatter\")\n     object, or a string naming one of the standard Formatters.\n    \n\n_property_ descendants_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.descendants \"Link to this definition\")\n\nIterate over all children of this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n in a breadth-first sequence.\n\nencode(_encoding: \\_Encoding \\= 'utf-8'_, _indent\\_level: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _formatter: \\_FormatterOrName \\= 'minimal'_, _errors: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n \\= 'xmlcharrefreplace'_) → [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.encode \"Link to this definition\")\n\nRender this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n and its contents as a bytestring.\n\nParameters:\n\n*   **encoding** -- The encoding to use when converting to a bytestring. This may also affect the text of the document, specifically any encoding declarations within the document.\n    \n*   **indent\\_level** -- Each line of the rendering will be indented this many levels. (The `formatter` decides what a 'level' means, in terms of spaces or other characters output.) This is used internally in recursive calls while pretty-printing.\n    \n*   **formatter** -- Either a [`Formatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter \"bs4.formatter.Formatter\")\n     object, or a string naming one of the standard formatters.\n    \n*   **errors** -- An error handling strategy such as 'xmlcharrefreplace'. This value is passed along into [`str.encode()`](https://docs.python.org/3/library/stdtypes.html#str.encode \"(in Python v3.13)\")\n     and its value should be one of the [error handling constants defined by Python's codecs module](https://docs.python.org/3/library/codecs.html#error-handlers)\n    .\n    \n\nencode\\_contents(_indent\\_level: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _encoding: \\_Encoding \\= 'utf-8'_, _formatter: \\_FormatterOrName \\= 'minimal'_) → [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.encode_contents \"Link to this definition\")\n\nRenders the contents of this PageElement as a bytestring.\n\nParameters:\n\n*   **indent\\_level** -- Each line of the rendering will be indented this many levels. (The `formatter` decides what a 'level' means, in terms of spaces or other characters output.) This is used internally in recursive calls while pretty-printing.\n    \n*   **formatter** -- Either a [`Formatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter \"bs4.formatter.Formatter\")\n     object, or a string naming one of the standard formatters.\n    \n*   **encoding** -- The bytestring will be in this encoding.\n    \n\nextend(_tags: Iterable\\[\\_InsertableElement\\] | [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n_) → List\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.extend \"Link to this definition\")\n\nAppends one or more objects to the contents of this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n.\n\nParameters:\n\n**tags** -- If a list of [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n objects is provided, they will be appended to this tag's contents, one at a time. If a single [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n is provided, its [`Tag.contents`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.contents \"bs4.Tag.contents\")\n will be used to extend this object's [`Tag.contents`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.contents \"bs4.Tag.contents\")\n.\n\n:return The list of PageElements that were appended.\n\nfind(_name: \\_FindMethodName \\= None_, _attrs: \\_StrainableAttributes \\= {}_, _recursive: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= True_, _string: \\_StrainableString | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\*\\*kwargs: \\_StrainableAttribute_) → \\_AtMostOneElement[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.find \"Link to this definition\")\n\nLook in the children of this PageElement and find the first PageElement that matches the given criteria.\n\nAll find\\_\\* methods take a common set of arguments. See the online documentation for detailed explanations.\n\nParameters:\n\n*   **name** -- A filter on tag name.\n    \n*   **attrs** -- Additional filters on attribute values.\n    \n*   **recursive** -- If this is True, find() will perform a recursive search of this Tag's children. Otherwise, only the direct children will be considered.\n    \n*   **string** -- A filter on the [`Tag.string`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.string \"bs4.Tag.string\")\n     attribute.\n    \n*   **limit** -- Stop looking after finding this many results.\n    \n\nKwargs:\n\nAdditional filters on attribute values.\n\nfind\\_all(_name: \\_FindMethodName \\= None_, _attrs: \\_StrainableAttributes \\= {}_, _recursive: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= True_, _string: \\_StrainableString | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _limit: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\_stacklevel: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 2_, _\\*\\*kwargs: \\_StrainableAttribute_) → \\_QueryResults[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.find_all \"Link to this definition\")\n\nLook in the children of this [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n and find all [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n objects that match the given criteria.\n\nAll find\\_\\* methods take a common set of arguments. See the online documentation for detailed explanations.\n\nParameters:\n\n*   **name** -- A filter on tag name.\n    \n*   **attrs** -- Additional filters on attribute values.\n    \n*   **recursive** -- If this is True, find\\_all() will perform a recursive search of this PageElement's children. Otherwise, only the direct children will be considered.\n    \n*   **limit** -- Stop looking after finding this many results.\n    \n*   **\\_stacklevel** -- Used internally to improve warning messages.\n    \n\nKwargs:\n\nAdditional filters on attribute values.\n\nget(_key: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _default: \\_AttributeValue | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_) → \\_AttributeValue | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.get \"Link to this definition\")\n\nReturns the value of the 'key' attribute for the tag, or the value given for 'default' if it doesn't have that attribute.\n\nParameters:\n\n*   **key** -- The attribute to look for.\n    \n*   **default** -- Use this value if the attribute is not present on this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n    .\n    \n\nget\\_attribute\\_list(_key: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _default: [AttributeValueList](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeValueList \"bs4.element.AttributeValueList\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_) → [AttributeValueList](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeValueList \"bs4.element.AttributeValueList\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.get_attribute_list \"Link to this definition\")\n\nThe same as get(), but always returns a (possibly empty) list.\n\nParameters:\n\n*   **key** -- The attribute to look for.\n    \n*   **default** -- Use this value if the attribute is not present on this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n    .\n    \n\nReturns:\n\nA list of strings, usually empty or containing only a single value.\n\nhas\\_attr(_key: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.has_attr \"Link to this definition\")\n\nDoes this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n have an attribute with the given name?\n\nindex(_element: [PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n_) → [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.index \"Link to this definition\")\n\nFind the index of a child of this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n (by identity, not value).\n\nDoing this by identity avoids issues when a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n contains two children that have string equality.\n\nParameters:\n\n**element** -- Look for this [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n in this object's contents.\n\ninsert(_position: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n_, _\\*new\\_children: \\_InsertableElement_) → List\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.insert \"Link to this definition\")\n\nInsert one or more new PageElements as a child of this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n.\n\nThis works similarly to `list.insert()`, except you can insert multiple elements at once.\n\nParameters:\n\n*   **position** -- The numeric position that should be occupied in this Tag's [`Tag.children`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.children \"bs4.Tag.children\")\n     by the first new [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n    .\n    \n*   **new\\_children** -- The PageElements to insert.\n    \n\n:return The newly inserted PageElements.\n\ninteresting\\_string\\_types_: Set\\[Type\\[[NavigableString](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\\\n\\]\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.interesting_string_types \"Link to this definition\")\n\nisSelfClosing() → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.isSelfClosing \"Link to this definition\")\n\n: :meta private:\n\n_property_ is\\_empty\\_element_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.is_empty_element \"Link to this definition\")\n\nIs this tag an empty-element tag? (aka a self-closing tag)\n\nA tag that has contents is never an empty-element tag.\n\nA tag that has no contents may or may not be an empty-element tag. It depends on the [`TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n used to create the tag. If the builder has a designated list of empty-element tags, then only a tag whose name shows up in that list is considered an empty-element tag. This is usually the case for HTML documents.\n\nIf the builder has no designated list of empty-element, then any tag with no contents is an empty-element tag. This is usually the case for XML documents.\n\nname_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.name \"Link to this definition\")\n\nnamespace_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.namespace \"Link to this definition\")\n\nparser\\_class_: [type](https://docs.python.org/3/library/functions.html#type \"(in Python v3.13)\")\n\\[[BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.parser_class \"Link to this definition\")\n\nprefix_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.prefix \"Link to this definition\")\n\npreserve\\_whitespace\\_tags_: Set\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.preserve_whitespace_tags \"Link to this definition\")\n\nprettify(_encoding: \\_Encoding | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _formatter: \\_FormatterOrName \\= 'minimal'_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.prettify \"Link to this definition\")\n\nPretty-print this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n as a string or bytestring.\n\nParameters:\n\n*   **encoding** -- The encoding of the bytestring, or None if you want Unicode.\n    \n*   **formatter** -- A Formatter object, or a string naming one of the standard formatters.\n    \n\nReturns:\n\nA string (if no `encoding` is provided) or a bytestring (otherwise).\n\nreplaceWithChildren() → \\_OneElement[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.replaceWithChildren \"Link to this definition\")\n\n: :meta private:\n\nreplace\\_with\\_children() → [Self](https://docs.python.org/3/library/typing.html#typing.Self \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.replace_with_children \"Link to this definition\")\n\nReplace this [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n with its contents.\n\nReturns:\n\nThis object, no longer part of the tree.\n\nselect(_selector: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _namespaces: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _limit: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _\\*\\*kwargs: [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.13)\")\n_) → [ResultSet](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ResultSet \"bs4.element.ResultSet\")\n\\[[Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.select \"Link to this definition\")\n\nPerform a CSS selection operation on the current element.\n\nThis uses the SoupSieve library.\n\nParameters:\n\n*   **selector** -- A string containing a CSS selector.\n    \n*   **namespaces** -- A dictionary mapping namespace prefixes used in the CSS selector to namespace URIs. By default, Beautiful Soup will use the prefixes it encountered while parsing the document.\n    \n*   **limit** -- After finding this number of results, stop looking.\n    \n*   **kwargs** -- Keyword arguments to be passed into SoupSieve's soupsieve.select() method.\n    \n\nselect\\_one(_selector: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _namespaces: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\*\\*kwargs: [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.13)\")\n_) → [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.select_one \"Link to this definition\")\n\nPerform a CSS selection operation on the current element.\n\nParameters:\n\n*   **selector** -- A CSS selector.\n    \n*   **namespaces** -- A dictionary mapping namespace prefixes used in the CSS selector to namespace URIs. By default, Beautiful Soup will use the prefixes it encountered while parsing the document.\n    \n*   **kwargs** -- Keyword arguments to be passed into Soup Sieve's soupsieve.select() method.\n    \n\n_property_ self\\_and\\_descendants_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.self_and_descendants \"Link to this definition\")\n\nIterate over this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n and its children in a breadth-first sequence.\n\nsmooth() → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.smooth \"Link to this definition\")\n\nSmooth out the children of this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n by consolidating consecutive strings.\n\nIf you perform a lot of operations that modify the tree, calling this method afterwards can make pretty-printed output look more natural.\n\nsourceline_: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.sourceline \"Link to this definition\")\n\nsourcepos_: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.sourcepos \"Link to this definition\")\n\n_property_ string_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.string \"Link to this definition\")\n\nConvenience property to get the single string within this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n, assuming there is just one.\n\nReturns:\n\nIf this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n has a single child that's a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\n, the return value is that string. If this element has one child [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n, the return value is that child's [`Tag.string`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.string \"bs4.Tag.string\")\n, recursively. If this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n has no children, or has more than one child, the return value is `None`.\n\nIf this property is unexpectedly returning `None` for you, it's probably because your [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag \"bs4.Tag\")\n has more than one thing inside it.\n\n_property_ strings_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.strings \"Link to this definition\")\n\nYield all strings of certain classes, possibly stripping them.\n\nParameters:\n\n*   **strip** -- If True, all strings will be stripped before being yielded.\n    \n*   **types** -- A tuple of NavigableString subclasses. Any strings of a subclass not found in this list will be ignored. By default, the subclasses considered are the ones found in self.interesting\\_string\\_types. If that's not specified, only NavigableString and CData objects will be considered. That means no comments, processing instructions, etc.\n    \n\nunwrap() → [Self](https://docs.python.org/3/library/typing.html#typing.Self \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.unwrap \"Link to this definition\")\n\nReplace this [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n with its contents.\n\nReturns:\n\nThis object, no longer part of the tree.\n\n_class_ bs4.TemplateString(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.TemplateString \"Link to this definition\")\n\nBases: [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n\nA [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\n representing a string found inside an [HTML <template> tag](https://html.spec.whatwg.org/multipage/scripting.html#the-template-element)\n embedded in a larger document.\n\nUsed to distinguish such strings from the main body of the document.\n\n_class_ bs4.UnicodeDammit(_markup: [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_, _known\\_definite\\_encodings: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= \\[\\]_, _smart\\_quotes\\_to: [Literal](https://docs.python.org/3/library/typing.html#typing.Literal \"(in Python v3.13)\")\n\\['ascii', 'xml', 'html'\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _is\\_html: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= False_, _exclude\\_encodings: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= \\[\\]_, _user\\_encodings: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _override\\_encodings: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit \"Link to this definition\")\n\nBases: [`object`](https://docs.python.org/3/library/functions.html#object \"(in Python v3.13)\")\n\nA class for detecting the encoding of a bytestring containing an HTML or XML document, and decoding it to Unicode. If the source encoding is windows-1252, [`UnicodeDammit`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit \"bs4.UnicodeDammit\")\n can also replace Microsoft smart quotes with their HTML or XML equivalents.\n\nParameters:\n\n*   **markup** -- HTML or XML markup in an unknown encoding.\n    \n*   **known\\_definite\\_encodings** -- When determining the encoding of `markup`, these encodings will be tried first, in order. In HTML terms, this corresponds to the \"known definite encoding\" step defined in [section 13.2.3.1 of the HTML standard](https://html.spec.whatwg.org/multipage/parsing.html#parsing-with-a-known-character-encoding)\n    .\n    \n*   **user\\_encodings** -- These encodings will be tried after the `known_definite_encodings` have been tried and failed, and after an attempt to sniff the encoding by looking at a byte order mark has failed. In HTML terms, this corresponds to the step \"user has explicitly instructed the user agent to override the document's character encoding\", defined in [section 13.2.3.2 of the HTML standard](https://html.spec.whatwg.org/multipage/parsing.html#determining-the-character-encoding)\n    .\n    \n*   **override\\_encodings** -- A **deprecated** alias for `known_definite_encodings`. Any encodings here will be tried immediately after the encodings in `known_definite_encodings`.\n    \n*   **smart\\_quotes\\_to** -- By default, Microsoft smart quotes will, like all other characters, be converted to Unicode characters. Setting this to `ascii` will convert them to ASCII quotes instead. Setting it to `xml` will convert them to XML entity references, and setting it to `html` will convert them to HTML entity references.\n    \n*   **is\\_html** -- If True, `markup` is treated as an HTML document. Otherwise it's treated as an XML document.\n    \n*   **exclude\\_encodings** -- These encodings will not be considered, even if the sniffing code thinks they might make sense.\n    \n\nCHARSET\\_ALIASES_: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.CHARSET_ALIASES \"Link to this definition\")\n\nThis dictionary maps commonly seen values for \"charset\" in HTML meta tags to the corresponding Python codec names. It only covers values that aren't in Python's aliases and can't be determined by the heuristics in [`find_codec`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.find_codec \"bs4.UnicodeDammit.find_codec\")\n.\n\nENCODINGS\\_WITH\\_SMART\\_QUOTES_: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.ENCODINGS_WITH_SMART_QUOTES \"Link to this definition\")\n\nA list of encodings that tend to contain Microsoft smart quotes.\n\nMS\\_CHARS_: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n | [Tuple](https://docs.python.org/3/library/typing.html#typing.Tuple \"(in Python v3.13)\")\\\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.MS_CHARS \"Link to this definition\")\n\nA partial mapping of ISO-Latin-1 to HTML entities/XML numeric entities.\n\nWINDOWS\\_1252\\_TO\\_UTF8_: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\\\n, [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.WINDOWS_1252_TO_UTF8 \"Link to this definition\")\n\nA map used when removing rogue Windows-1252/ISO-8859-1 characters in otherwise UTF-8 documents.\n\nNote that \\\\x81, \\\\x8d, \\\\x8f, \\\\x90, and \\\\x9d are undefined in Windows-1252.\n\ncontains\\_replacement\\_characters_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.contains_replacement_characters \"Link to this definition\")\n\nThis is True if [`UnicodeDammit.unicode_markup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.unicode_markup \"bs4.UnicodeDammit.unicode_markup\")\n contains U+FFFD REPLACEMENT\\_CHARACTER characters which were not present in [`UnicodeDammit.markup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.markup \"bs4.UnicodeDammit.markup\")\n. These mark character sequences that could not be represented in Unicode.\n\n_property_ declared\\_html\\_encoding_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.declared_html_encoding \"Link to this definition\")\n\nIf the markup is an HTML document, returns the encoding, if any, declared _inside_ the document.\n\n_classmethod_ detwingle(_in\\_bytes: [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_, _main\\_encoding: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n \\= 'utf8'_, _embedded\\_encoding: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n \\= 'windows-1252'_) → [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.detwingle \"Link to this definition\")\n\nFix characters from one encoding embedded in some other encoding.\n\nCurrently the only situation supported is Windows-1252 (or its subset ISO-8859-1), embedded in UTF-8.\n\nParameters:\n\n*   **in\\_bytes** -- A bytestring that you suspect contains characters from multiple encodings. Note that this _must_ be a bytestring. If you've already converted the document to Unicode, you're too late.\n    \n*   **main\\_encoding** -- The primary encoding of `in_bytes`.\n    \n*   **embedded\\_encoding** -- The encoding that was used to embed characters in the main document.\n    \n\nReturns:\n\nA bytestring similar to `in_bytes`, in which `embedded_encoding` characters have been converted to their `main_encoding` equivalents.\n\nfind\\_codec(_charset: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.find_codec \"Link to this definition\")\n\nLook up the Python codec corresponding to a given character set.\n\nParameters:\n\n**charset** -- The name of a character set.\n\nReturns:\n\nThe name of a Python codec.\n\nmarkup_: [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.markup \"Link to this definition\")\n\nThe original markup, before it was converted to Unicode. This is not necessarily the same as what was passed in to the constructor, since any byte-order mark will be stripped.\n\noriginal\\_encoding_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.original_encoding \"Link to this definition\")\n\nUnicode, Dammit's best guess as to the original character encoding of [`UnicodeDammit.markup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.markup \"bs4.UnicodeDammit.markup\")\n.\n\nsmart\\_quotes\\_to_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.smart_quotes_to \"Link to this definition\")\n\nThe strategy used to handle Microsoft smart quotes.\n\ntried\\_encodings_: [List](https://docs.python.org/3/library/typing.html#typing.List \"(in Python v3.13)\")\n\\[[Tuple](https://docs.python.org/3/library/typing.html#typing.Tuple \"(in Python v3.13)\")\\\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.tried_encodings \"Link to this definition\")\n\nThe (encoding, error handling strategy) 2-tuples that were used to try and convert the markup to Unicode.\n\nunicode\\_markup_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.unicode_markup \"Link to this definition\")\n\nThe Unicode version of the markup, following conversion. This is set to None if there was simply no way to convert the bytestring to Unicode (as with binary data).\n\n_exception_ bs4.UnusualUsageWarning[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnusualUsageWarning \"Link to this definition\")\n\nBases: [`UserWarning`](https://docs.python.org/3/library/exceptions.html#UserWarning \"(in Python v3.13)\")\n\nA superclass for warnings issued when Beautiful Soup sees something that is typically the result of a mistake in the calling code, but might be intentional on the part of the user. If it is in fact intentional, you can filter the individual warning class to get rid of the warning. If you don't like Beautiful Soup second-guessing what you are doing, you can filter the UnusualUsageWarningclass itself and get rid of these entirely.\n\n_exception_ bs4.XMLParsedAsHTMLWarning[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.XMLParsedAsHTMLWarning \"Link to this definition\")\n\nBases: [`UnusualUsageWarning`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnusualUsageWarning \"bs4._warnings.UnusualUsageWarning\")\n\nThe warning issued when an HTML parser is used to parse XML that is not (as far as we can tell) XHTML.\n\nMESSAGE_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= 'It looks like you\\\\'re using an HTML parser to parse an XML document.\\\\n\\\\nAssuming this really is an XML document, what you\\\\'re doing might work, but you should know that using an XML parser will be more reliable. To parse this document as XML, make sure you have the Python package \\\\'lxml\\\\' installed, and pass the keyword argument \\`features=\"xml\"\\` into the BeautifulSoup constructor.\\\\n\\\\nIf you want or need to use an HTML parser on this document, you can make this warning go away by filtering it. To do that, run this code before calling the BeautifulSoup constructor:\\\\n\\\\n    from bs4 import XMLParsedAsHTMLWarning\\\\n    import warnings\\\\n\\\\n    warnings.filterwarnings(\"ignore\", category=XMLParsedAsHTMLWarning)\\\\n'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.XMLParsedAsHTMLWarning.MESSAGE \"Link to this definition\")\n\nSubpackages[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#subpackages \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------------------------\n\n*   [bs4.builder package](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html)\n    \n\nSubmodules[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#submodules \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------------------------\n\nbs4.css module[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.css \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------------------------------\n\nIntegration code for CSS selectors using [Soup Sieve](https://facelessuser.github.io/soupsieve/)\n (pypi: `soupsieve`).\n\nAcquire a [`CSS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS \"bs4.css.CSS\")\n object through the [`element.Tag.css`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.css \"bs4.element.Tag.css\")\n attribute of the starting point of your CSS selector, or (if you want to run a selector against the entire document) of the [`BeautifulSoup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n object itself.\n\nThe main advantage of doing this instead of using `soupsieve` functions is that you don't need to keep passing the [`element.Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n to be selected against, since the [`CSS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS \"bs4.css.CSS\")\n object is permanently scoped to that [`element.Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n.\n\n_class_ bs4.css.CSS(_tag: [element.Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n_, _api: ModuleType | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS \"Link to this definition\")\n\nBases: [`object`](https://docs.python.org/3/library/functions.html#object \"(in Python v3.13)\")\n\nA proxy object against the `soupsieve` library, to simplify its CSS selector API.\n\nYou don't need to instantiate this class yourself; instead, use [`element.Tag.css`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.css \"bs4.element.Tag.css\")\n.\n\nParameters:\n\n*   **tag** -- All CSS selectors run by this object will use this as their starting point.\n    \n*   **api** -- An optional drop-in replacement for the `soupsieve` module, intended for use in unit tests.\n    \n\nclosest(_select: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _namespaces: \\_NamespaceMapping | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _flags: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _\\*\\*kwargs: Any_) → [element.Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.closest \"Link to this definition\")\n\nFind the [`element.Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n closest to this one that matches the given selector.\n\nThis uses the Soup Sieve library. For more information, see that library's documentation for the [soupsieve.closest()](https://facelessuser.github.io/soupsieve/api/#soupsieveclosest)\n method.\n\nParameters:\n\n*   **selector** -- A string containing a CSS selector.\n    \n*   **namespaces** -- A dictionary mapping namespace prefixes used in the CSS selector to namespace URIs. By default, Beautiful Soup will pass in the prefixes it encountered while parsing the document.\n    \n*   **flags** --\n    \n    Flags to be passed into Soup Sieve's [soupsieve.closest()](https://facelessuser.github.io/soupsieve/api/#soupsieveclosest)\n     method.\n    \n*   **kwargs** --\n    \n    Keyword arguments to be passed into Soup Sieve's [soupsieve.closest()](https://facelessuser.github.io/soupsieve/api/#soupsieveclosest)\n     method.\n    \n\ncompile(_select: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _namespaces: \\_NamespaceMapping | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _flags: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _\\*\\*kwargs: Any_) → SoupSieve[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.compile \"Link to this definition\")\n\nPre-compile a selector and return the compiled object.\n\nParameters:\n\n*   **selector** -- A CSS selector.\n    \n*   **namespaces** -- A dictionary mapping namespace prefixes used in the CSS selector to namespace URIs. By default, Beautiful Soup will use the prefixes it encountered while parsing the document.\n    \n*   **flags** --\n    \n    Flags to be passed into Soup Sieve's [soupsieve.compile()](https://facelessuser.github.io/soupsieve/api/#soupsievecompile)\n     method.\n    \n*   **kwargs** --\n    \n    Keyword arguments to be passed into Soup Sieve's [soupsieve.compile()](https://facelessuser.github.io/soupsieve/api/#soupsievecompile)\n     method.\n    \n\nReturns:\n\nA precompiled selector object.\n\nReturn type:\n\nsoupsieve.SoupSieve\n\nescape(_ident: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.escape \"Link to this definition\")\n\nEscape a CSS identifier.\n\nThis is a simple wrapper around [soupsieve.escape()](https://facelessuser.github.io/soupsieve/api/#soupsieveescape)\n. See the documentation for that function for more information.\n\nfilter(_select: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _namespaces: \\_NamespaceMapping | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _flags: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _\\*\\*kwargs: Any_) → [ResultSet](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ResultSet \"bs4.ResultSet\")\n\\[[element.Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.filter \"Link to this definition\")\n\nFilter this [`element.Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n's direct children based on the given CSS selector.\n\nThis uses the Soup Sieve library. It works the same way as passing a [`element.Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n into that library's [soupsieve.filter()](https://facelessuser.github.io/soupsieve/api/#soupsievefilter)\n method. For more information, see the documentation for [soupsieve.filter()](https://facelessuser.github.io/soupsieve/api/#soupsievefilter)\n.\n\nParameters:\n\n*   **namespaces** -- A dictionary mapping namespace prefixes used in the CSS selector to namespace URIs. By default, Beautiful Soup will pass in the prefixes it encountered while parsing the document.\n    \n*   **flags** --\n    \n    Flags to be passed into Soup Sieve's [soupsieve.filter()](https://facelessuser.github.io/soupsieve/api/#soupsievefilter)\n     method.\n    \n*   **kwargs** --\n    \n    Keyword arguments to be passed into SoupSieve's [soupsieve.filter()](https://facelessuser.github.io/soupsieve/api/#soupsievefilter)\n     method.\n    \n\niselect(_select: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _namespaces: \\_NamespaceMapping | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _limit: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _flags: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _\\*\\*kwargs: Any_) → Iterator\\[[element.Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.iselect \"Link to this definition\")\n\nPerform a CSS selection operation on the current [`element.Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n.\n\nThis uses the Soup Sieve library. For more information, see that library's documentation for the [soupsieve.iselect()](https://facelessuser.github.io/soupsieve/api/#soupsieveiselect)\n method. It is the same as select(), but it returns a generator instead of a list.\n\nParameters:\n\n*   **selector** -- A string containing a CSS selector.\n    \n*   **namespaces** -- A dictionary mapping namespace prefixes used in the CSS selector to namespace URIs. By default, Beautiful Soup will pass in the prefixes it encountered while parsing the document.\n    \n*   **limit** -- After finding this number of results, stop looking.\n    \n*   **flags** --\n    \n    Flags to be passed into Soup Sieve's [soupsieve.iselect()](https://facelessuser.github.io/soupsieve/api/#soupsieveiselect)\n     method.\n    \n*   **kwargs** --\n    \n    Keyword arguments to be passed into Soup Sieve's [soupsieve.iselect()](https://facelessuser.github.io/soupsieve/api/#soupsieveiselect)\n     method.\n    \n\nmatch(_select: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _namespaces: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _flags: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _\\*\\*kwargs: [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.13)\")\n_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.match \"Link to this definition\")\n\nCheck whether or not this [`element.Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n matches the given CSS selector.\n\nThis uses the Soup Sieve library. For more information, see that library's documentation for the [soupsieve.match()](https://facelessuser.github.io/soupsieve/api/#soupsievematch)\n method.\n\nParam:\n\na CSS selector.\n\nParameters:\n\n*   **namespaces** -- A dictionary mapping namespace prefixes used in the CSS selector to namespace URIs. By default, Beautiful Soup will pass in the prefixes it encountered while parsing the document.\n    \n*   **flags** --\n    \n    Flags to be passed into Soup Sieve's [soupsieve.match()](https://facelessuser.github.io/soupsieve/api/#soupsievematch)\n     method.\n    \n*   **kwargs** --\n    \n    Keyword arguments to be passed into SoupSieve's [soupsieve.match()](https://facelessuser.github.io/soupsieve/api/#soupsievematch)\n     method.\n    \n\nselect(_select: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _namespaces: \\_NamespaceMapping | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _limit: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _flags: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _\\*\\*kwargs: Any_) → [ResultSet](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ResultSet \"bs4.ResultSet\")\n\\[[element.Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.select \"Link to this definition\")\n\nPerform a CSS selection operation on the current [`element.Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n.\n\nThis uses the Soup Sieve library. For more information, see that library's documentation for the [soupsieve.select()](https://facelessuser.github.io/soupsieve/api/#soupsieveselect)\n method.\n\nParameters:\n\n*   **selector** -- A CSS selector.\n    \n*   **namespaces** -- A dictionary mapping namespace prefixes used in the CSS selector to namespace URIs. By default, Beautiful Soup will pass in the prefixes it encountered while parsing the document.\n    \n*   **limit** -- After finding this number of results, stop looking.\n    \n*   **flags** --\n    \n    Flags to be passed into Soup Sieve's [soupsieve.select()](https://facelessuser.github.io/soupsieve/api/#soupsieveselect)\n     method.\n    \n*   **kwargs** --\n    \n    Keyword arguments to be passed into Soup Sieve's [soupsieve.select()](https://facelessuser.github.io/soupsieve/api/#soupsieveselect)\n     method.\n    \n\nselect\\_one(_select: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _namespaces: \\_NamespaceMapping | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _flags: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _\\*\\*kwargs: Any_) → [element.Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.select_one \"Link to this definition\")\n\nPerform a CSS selection operation on the current Tag and return the first result, if any.\n\nThis uses the Soup Sieve library. For more information, see that library's documentation for the [soupsieve.select\\_one()](https://facelessuser.github.io/soupsieve/api/#soupsieveselect_one)\n method.\n\nParameters:\n\n*   **selector** -- A CSS selector.\n    \n*   **namespaces** -- A dictionary mapping namespace prefixes used in the CSS selector to namespace URIs. By default, Beautiful Soup will use the prefixes it encountered while parsing the document.\n    \n*   **flags** --\n    \n    Flags to be passed into Soup Sieve's [soupsieve.select\\_one()](https://facelessuser.github.io/soupsieve/api/#soupsieveselect_one)\n     method.\n    \n*   **kwargs** --\n    \n    Keyword arguments to be passed into Soup Sieve's [soupsieve.select\\_one()](https://facelessuser.github.io/soupsieve/api/#soupsieveselect_one)\n     method.\n    \n\nbs4.dammit module[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.dammit \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------------------------------------\n\nBeautiful Soup bonus library: Unicode, Dammit\n\nThis library converts a bytestream to Unicode through any means necessary. It is heavily based on code from Mark Pilgrim's [Universal Feed Parser](https://pypi.org/project/feedparser/)\n, now maintained by Kurt McKee. It does not rewrite the body of an XML or HTML document to reflect a new encoding; that's the job of [`TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n.\n\n_class_ bs4.dammit.EncodingDetector(_markup: [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_, _known\\_definite\\_encodings: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _is\\_html: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= False_, _exclude\\_encodings: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _user\\_encodings: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _override\\_encodings: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector \"Link to this definition\")\n\nBases: [`object`](https://docs.python.org/3/library/functions.html#object \"(in Python v3.13)\")\n\nThis class is capable of guessing a number of possible encodings for a bytestring.\n\nOrder of precedence:\n\n1.  Encodings you specifically tell EncodingDetector to try first (the `known_definite_encodings` argument to the constructor).\n    \n2.  An encoding determined by sniffing the document's byte-order mark.\n    \n3.  Encodings you specifically tell EncodingDetector to try if byte-order mark sniffing fails (the `user_encodings` argument to the constructor).\n    \n4.  An encoding declared within the bytestring itself, either in an XML declaration (if the bytestring is to be interpreted as an XML document), or in a <meta> tag (if the bytestring is to be interpreted as an HTML document.)\n    \n5.  An encoding detected through textual analysis by chardet, cchardet, or a similar external library.\n    \n6.  UTF-8.\n    \n7.  Windows-1252.\n    \n\nParameters:\n\n*   **markup** -- Some markup in an unknown encoding.\n    \n*   **known\\_definite\\_encodings** --\n    \n    When determining the encoding of `markup`, these encodings will be tried first, in order. In HTML terms, this corresponds to the \"known definite encoding\" step defined in [section 13.2.3.1 of the HTML standard](https://html.spec.whatwg.org/multipage/parsing.html#parsing-with-a-known-character-encoding)\n    .\n    \n*   **user\\_encodings** --\n    \n    These encodings will be tried after the `known_definite_encodings` have been tried and failed, and after an attempt to sniff the encoding by looking at a byte order mark has failed. In HTML terms, this corresponds to the step \"user has explicitly instructed the user agent to override the document's character encoding\", defined in [section 13.2.3.2 of the HTML standard](https://html.spec.whatwg.org/multipage/parsing.html#determining-the-character-encoding)\n    .\n    \n*   **override\\_encodings** -- A **deprecated** alias for `known_definite_encodings`. Any encodings here will be tried immediately after the encodings in `known_definite_encodings`.\n    \n*   **is\\_html** -- If True, this markup is considered to be HTML. Otherwise it's assumed to be XML.\n    \n*   **exclude\\_encodings** -- These encodings will not be tried, even if they otherwise would be.\n    \n\nchardet\\_encoding_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.chardet_encoding \"Link to this definition\")\n\ndeclared\\_encoding_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.declared_encoding \"Link to this definition\")\n\n_property_ encodings_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.encodings \"Link to this definition\")\n\nYield a number of encodings that might work for this markup.\n\nYield:\n\nA sequence of strings. Each is the name of an encoding that _might_ work to convert a bytestring into Unicode.\n\nexclude\\_encodings_: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.exclude_encodings \"Link to this definition\")\n\n_classmethod_ find\\_declared\\_encoding(_markup: [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _is\\_html: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= False_, _search\\_entire\\_document: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= False_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.find_declared_encoding \"Link to this definition\")\n\nGiven a document, tries to find an encoding declared within the text of the document itself.\n\nAn XML encoding is declared at the beginning of the document.\n\nAn HTML encoding is declared in a <meta> tag, hopefully near the beginning of the document.\n\nParameters:\n\n*   **markup** -- Some markup.\n    \n*   **is\\_html** -- If True, this markup is considered to be HTML. Otherwise it's assumed to be XML.\n    \n*   **search\\_entire\\_document** -- Since an encoding is supposed to declared near the beginning of the document, most of the time it's only necessary to search a few kilobytes of data. Set this to True to force this method to search the entire document.\n    \n\nReturns:\n\nThe declared encoding, if one is found.\n\nis\\_html_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.is_html \"Link to this definition\")\n\nknown\\_definite\\_encodings_: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.known_definite_encodings \"Link to this definition\")\n\nmarkup_: [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.markup \"Link to this definition\")\n\nsniffed\\_encoding_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.sniffed_encoding \"Link to this definition\")\n\n_classmethod_ strip\\_byte\\_order\\_mark(_data: [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_) → [Tuple](https://docs.python.org/3/library/typing.html#typing.Tuple \"(in Python v3.13)\")\n\\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.strip_byte_order_mark \"Link to this definition\")\n\nIf a byte-order mark is present, strip it and return the encoding it implies.\n\nParameters:\n\n**data** -- A bytestring that may or may not begin with a byte-order mark.\n\nReturns:\n\nA 2-tuple (data stripped of byte-order mark, encoding implied by byte-order mark)\n\nuser\\_encodings_: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.user_encodings \"Link to this definition\")\n\n_class_ bs4.dammit.EntitySubstitution[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution \"Link to this definition\")\n\nBases: [`object`](https://docs.python.org/3/library/functions.html#object \"(in Python v3.13)\")\n\nThe ability to substitute XML or HTML entities for certain characters.\n\nAMPERSAND\\_OR\\_BRACKET_: [Pattern](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.AMPERSAND_OR_BRACKET \"Link to this definition\")\n\nA regular expression matching an angle bracket or an ampersand.\n\nANY\\_ENTITY\\_RE _\\= re.compile('&(#\\\\\\\\d+|#x\\[0-9a-fA-F\\]+|\\\\\\\\w+);', re.IGNORECASE)_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.ANY_ENTITY_RE \"Link to this definition\")\n\nBARE\\_AMPERSAND\\_OR\\_BRACKET_: [Pattern](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.BARE_AMPERSAND_OR_BRACKET \"Link to this definition\")\n\nA regular expression matching an angle bracket or an ampersand that is not part of an XML or HTML entity.\n\nCHARACTER\\_TO\\_HTML\\_ENTITY_: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.CHARACTER_TO_HTML_ENTITY \"Link to this definition\")\n\nA map of Unicode strings to the corresponding named HTML entities; the inverse of HTML\\_ENTITY\\_TO\\_CHARACTER.\n\nCHARACTER\\_TO\\_HTML\\_ENTITY\\_RE_: [Pattern](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.CHARACTER_TO_HTML_ENTITY_RE \"Link to this definition\")\n\nA regular expression that matches any character (or, in rare cases, pair of characters) that can be replaced with a named HTML entity.\n\nCHARACTER\\_TO\\_HTML\\_ENTITY\\_WITH\\_AMPERSAND\\_RE_: [Pattern](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.CHARACTER_TO_HTML_ENTITY_WITH_AMPERSAND_RE \"Link to this definition\")\n\nA very similar regular expression to CHARACTER\\_TO\\_HTML\\_ENTITY\\_RE, but which also matches unescaped ampersands. This is used by the 'html' formatted to provide backwards-compatibility, even though the HTML5 spec allows most ampersands to go unescaped.\n\nCHARACTER\\_TO\\_XML\\_ENTITY_: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.CHARACTER_TO_XML_ENTITY \"Link to this definition\")\n\nA map of Unicode strings to the corresponding named XML entities.\n\nHTML\\_ENTITY\\_TO\\_CHARACTER_: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.HTML_ENTITY_TO_CHARACTER \"Link to this definition\")\n\nA map of named HTML entities to the corresponding Unicode string.\n\n_classmethod_ quoted\\_attribute\\_value(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.quoted_attribute_value \"Link to this definition\")\n\nMake a value into a quoted XML attribute, possibly escaping it.\n\n> Most strings will be quoted using double quotes.\n> \n> > Bob's Bar -> \"Bob's Bar\"\n> \n> If a string contains double quotes, it will be quoted using single quotes.\n> \n> > Welcome to \"my bar\" -> 'Welcome to \"my bar\"'\n> \n> If a string contains both single and double quotes, the double quotes will be escaped, and the string will be quoted using double quotes.\n> \n> > Welcome to \"Bob's Bar\" -> Welcome to &quot;Bob's bar&quot;\n\nParameters:\n\n**value** -- The XML attribute value to quote\n\nReturns:\n\nThe quoted value\n\n_classmethod_ substitute\\_html(_s: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.substitute_html \"Link to this definition\")\n\nReplace certain Unicode characters with named HTML entities.\n\nThis differs from `data.encode(encoding, 'xmlcharrefreplace')` in that the goal is to make the result more readable (to those with ASCII displays) rather than to recover from errors. There's absolutely nothing wrong with a UTF-8 string containg a LATIN SMALL LETTER E WITH ACUTE, but replacing that character with \"&eacute;\" will make it more readable to some people.\n\nParameters:\n\n**s** -- The string to be modified.\n\nReturns:\n\nThe string with some Unicode characters replaced with HTML entities.\n\n_classmethod_ substitute\\_html5(_s: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.substitute_html5 \"Link to this definition\")\n\nReplace certain Unicode characters with named HTML entities using HTML5 rules.\n\nSpecifically, this method is much less aggressive about escaping ampersands than substitute\\_html. Only ambiguous ampersands are escaped, per the HTML5 standard:\n\n\"An ambiguous ampersand is a U+0026 AMPERSAND character (&) that is followed by one or more ASCII alphanumerics, followed by a U+003B SEMICOLON character (;), where these characters do not match any of the names given in the named character references section.\"\n\nUnlike substitute\\_html5\\_raw, this method assumes HTML entities were converted to Unicode characters on the way in, as Beautiful Soup does. By the time Beautiful Soup does its work, the only ambiguous ampersands that need to be escaped are the ones that were escaped in the original markup when mentioning HTML entities.\n\nParameters:\n\n**s** -- The string to be modified.\n\nReturns:\n\nThe string with some Unicode characters replaced with HTML entities.\n\n_classmethod_ substitute\\_html5\\_raw(_s: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.substitute_html5_raw \"Link to this definition\")\n\nReplace certain Unicode characters with named HTML entities using HTML5 rules.\n\nsubstitute\\_html5\\_raw is similar to substitute\\_html5 but it is designed for standalone use (whereas substitute\\_html5 is designed for use with Beautiful Soup).\n\nParameters:\n\n**s** -- The string to be modified.\n\nReturns:\n\nThe string with some Unicode characters replaced with HTML entities.\n\n_classmethod_ substitute\\_xml(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _make\\_quoted\\_attribute: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= False_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.substitute_xml \"Link to this definition\")\n\nReplace special XML characters with named XML entities.\n\nThe less-than sign will become &lt;, the greater-than sign will become &gt;, and any ampersands will become &amp;. If you want ampersands that seem to be part of an entity definition to be left alone, use [`substitute_xml_containing_entities`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.substitute_xml_containing_entities \"bs4.dammit.EntitySubstitution.substitute_xml_containing_entities\")\n instead.\n\nParameters:\n\n*   **value** -- A string to be substituted.\n    \n*   **make\\_quoted\\_attribute** -- If True, then the string will be quoted, as befits an attribute value.\n    \n\nReturns:\n\nA version of `value` with special characters replaced with named entities.\n\n_classmethod_ substitute\\_xml\\_containing\\_entities(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _make\\_quoted\\_attribute: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= False_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.substitute_xml_containing_entities \"Link to this definition\")\n\nSubstitute XML entities for special XML characters.\n\nParameters:\n\n*   **value** -- A string to be substituted. The less-than sign will become &lt;, the greater-than sign will become &gt;, and any ampersands that are not part of an entity defition will become &amp;.\n    \n*   **make\\_quoted\\_attribute** -- If True, then the string will be quoted, as befits an attribute value.\n    \n\n_class_ bs4.dammit.UnicodeDammit(_markup: [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_, _known\\_definite\\_encodings: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= \\[\\]_, _smart\\_quotes\\_to: [Literal](https://docs.python.org/3/library/typing.html#typing.Literal \"(in Python v3.13)\")\n\\['ascii', 'xml', 'html'\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _is\\_html: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= False_, _exclude\\_encodings: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= \\[\\]_, _user\\_encodings: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _override\\_encodings: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit \"Link to this definition\")\n\nBases: [`object`](https://docs.python.org/3/library/functions.html#object \"(in Python v3.13)\")\n\nA class for detecting the encoding of a bytestring containing an HTML or XML document, and decoding it to Unicode. If the source encoding is windows-1252, [`UnicodeDammit`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit \"bs4.dammit.UnicodeDammit\")\n can also replace Microsoft smart quotes with their HTML or XML equivalents.\n\nParameters:\n\n*   **markup** -- HTML or XML markup in an unknown encoding.\n    \n*   **known\\_definite\\_encodings** --\n    \n    When determining the encoding of `markup`, these encodings will be tried first, in order. In HTML terms, this corresponds to the \"known definite encoding\" step defined in [section 13.2.3.1 of the HTML standard](https://html.spec.whatwg.org/multipage/parsing.html#parsing-with-a-known-character-encoding)\n    .\n    \n*   **user\\_encodings** --\n    \n    These encodings will be tried after the `known_definite_encodings` have been tried and failed, and after an attempt to sniff the encoding by looking at a byte order mark has failed. In HTML terms, this corresponds to the step \"user has explicitly instructed the user agent to override the document's character encoding\", defined in [section 13.2.3.2 of the HTML standard](https://html.spec.whatwg.org/multipage/parsing.html#determining-the-character-encoding)\n    .\n    \n*   **override\\_encodings** -- A **deprecated** alias for `known_definite_encodings`. Any encodings here will be tried immediately after the encodings in `known_definite_encodings`.\n    \n*   **smart\\_quotes\\_to** -- By default, Microsoft smart quotes will, like all other characters, be converted to Unicode characters. Setting this to `ascii` will convert them to ASCII quotes instead. Setting it to `xml` will convert them to XML entity references, and setting it to `html` will convert them to HTML entity references.\n    \n*   **is\\_html** -- If True, `markup` is treated as an HTML document. Otherwise it's treated as an XML document.\n    \n*   **exclude\\_encodings** -- These encodings will not be considered, even if the sniffing code thinks they might make sense.\n    \n\nCHARSET\\_ALIASES_: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.CHARSET_ALIASES \"Link to this definition\")\n\nThis dictionary maps commonly seen values for \"charset\" in HTML meta tags to the corresponding Python codec names. It only covers values that aren't in Python's aliases and can't be determined by the heuristics in [`find_codec`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.find_codec \"bs4.dammit.UnicodeDammit.find_codec\")\n.\n\nENCODINGS\\_WITH\\_SMART\\_QUOTES_: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.ENCODINGS_WITH_SMART_QUOTES \"Link to this definition\")\n\nA list of encodings that tend to contain Microsoft smart quotes.\n\nMS\\_CHARS_: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n | [Tuple](https://docs.python.org/3/library/typing.html#typing.Tuple \"(in Python v3.13)\")\\\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.MS_CHARS \"Link to this definition\")\n\nA partial mapping of ISO-Latin-1 to HTML entities/XML numeric entities.\n\nWINDOWS\\_1252\\_TO\\_UTF8_: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\\\n, [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.WINDOWS_1252_TO_UTF8 \"Link to this definition\")\n\nA map used when removing rogue Windows-1252/ISO-8859-1 characters in otherwise UTF-8 documents.\n\nNote that \\\\x81, \\\\x8d, \\\\x8f, \\\\x90, and \\\\x9d are undefined in Windows-1252.\n\ncontains\\_replacement\\_characters_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.contains_replacement_characters \"Link to this definition\")\n\nThis is True if [`UnicodeDammit.unicode_markup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.unicode_markup \"bs4.dammit.UnicodeDammit.unicode_markup\")\n contains U+FFFD REPLACEMENT\\_CHARACTER characters which were not present in [`UnicodeDammit.markup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.markup \"bs4.dammit.UnicodeDammit.markup\")\n. These mark character sequences that could not be represented in Unicode.\n\n_property_ declared\\_html\\_encoding_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.declared_html_encoding \"Link to this definition\")\n\nIf the markup is an HTML document, returns the encoding, if any, declared _inside_ the document.\n\n_classmethod_ detwingle(_in\\_bytes: [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_, _main\\_encoding: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n \\= 'utf8'_, _embedded\\_encoding: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n \\= 'windows-1252'_) → [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.detwingle \"Link to this definition\")\n\nFix characters from one encoding embedded in some other encoding.\n\nCurrently the only situation supported is Windows-1252 (or its subset ISO-8859-1), embedded in UTF-8.\n\nParameters:\n\n*   **in\\_bytes** -- A bytestring that you suspect contains characters from multiple encodings. Note that this _must_ be a bytestring. If you've already converted the document to Unicode, you're too late.\n    \n*   **main\\_encoding** -- The primary encoding of `in_bytes`.\n    \n*   **embedded\\_encoding** -- The encoding that was used to embed characters in the main document.\n    \n\nReturns:\n\nA bytestring similar to `in_bytes`, in which `embedded_encoding` characters have been converted to their `main_encoding` equivalents.\n\nfind\\_codec(_charset: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.find_codec \"Link to this definition\")\n\nLook up the Python codec corresponding to a given character set.\n\nParameters:\n\n**charset** -- The name of a character set.\n\nReturns:\n\nThe name of a Python codec.\n\nmarkup_: [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.markup \"Link to this definition\")\n\nThe original markup, before it was converted to Unicode. This is not necessarily the same as what was passed in to the constructor, since any byte-order mark will be stripped.\n\noriginal\\_encoding_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.original_encoding \"Link to this definition\")\n\nUnicode, Dammit's best guess as to the original character encoding of [`UnicodeDammit.markup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.markup \"bs4.dammit.UnicodeDammit.markup\")\n.\n\nsmart\\_quotes\\_to_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.smart_quotes_to \"Link to this definition\")\n\nThe strategy used to handle Microsoft smart quotes.\n\ntried\\_encodings_: [List](https://docs.python.org/3/library/typing.html#typing.List \"(in Python v3.13)\")\n\\[[Tuple](https://docs.python.org/3/library/typing.html#typing.Tuple \"(in Python v3.13)\")\\\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.tried_encodings \"Link to this definition\")\n\nThe (encoding, error handling strategy) 2-tuples that were used to try and convert the markup to Unicode.\n\nunicode\\_markup_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.unicode_markup \"Link to this definition\")\n\nThe Unicode version of the markup, following conversion. This is set to None if there was simply no way to convert the bytestring to Unicode (as with binary data).\n\nbs4.element module[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.element \"Link to this heading\")\n\n------------------------------------------------------------------------------------------------------------------------------------\n\n_class_ bs4.element.AttributeDict[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeDict \"Link to this definition\")\n\nBases: [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[`Any`](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.13)\")\\\n, [`Any`](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.13)\")\\\n\\]\n\nSuperclass for the dictionary used to hold a tag's attributes. You can use this, but it's just a regular dict with no special logic.\n\n_class_ bs4.element.AttributeValueList(_iterable\\=()_, _/_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeValueList \"Link to this definition\")\n\nBases: [`List`](https://docs.python.org/3/library/typing.html#typing.List \"(in Python v3.13)\")\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]\n\nClass for the list used to hold the values of attributes which have multiple values (such as HTML's 'class'). It's just a regular list, but you can subclass it and pass it in to the TreeBuilder constructor as attribute\\_value\\_list\\_class, to have your subclass instantiated instead.\n\n_class_ bs4.element.AttributeValueWithCharsetSubstitution[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeValueWithCharsetSubstitution \"Link to this definition\")\n\nBases: [`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n\nAn abstract class standing in for a character encoding specified inside an HTML `<meta>` tag.\n\nSubclasses exist for each place such a character encoding might be found: either inside the `charset` attribute ([`CharsetMetaAttributeValue`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CharsetMetaAttributeValue \"bs4.element.CharsetMetaAttributeValue\")\n) or inside the `content` attribute ([`ContentMetaAttributeValue`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ContentMetaAttributeValue \"bs4.element.ContentMetaAttributeValue\")\n)\n\nThis allows Beautiful Soup to replace that part of the HTML file with a different encoding when ouputting a tree as a string.\n\nsubstitute\\_encoding(_eventual\\_encoding: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeValueWithCharsetSubstitution.substitute_encoding \"Link to this definition\")\n\nDo whatever's necessary in this implementation-specific portion an HTML document to substitute in a specific encoding.\n\n_class_ bs4.element.CData(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData \"Link to this definition\")\n\nBases: [`PreformattedString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString \"bs4.element.PreformattedString\")\n\nA [CDATA section](https://dev.w3.org/html5/spec-LC/syntax.html#cdata-sections)\n.\n\nPREFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '<!\\[CDATA\\['_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.PREFIX \"Link to this definition\")\\\n\\\nA string prepended to the body of the 'real' string when formatting it as part of a document, such as the '<!--' in an HTML comment.\\\n\\\nSUFFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n_ _\\= '\\]\\]>'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.SUFFIX \"Link to this definition\")\n\nA string appended to the body of the 'real' string when formatting it as part of a document, such as the '-->' in an HTML comment.\n\nnext\\_element_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.next_element \"Link to this definition\")\n\nnext\\_sibling_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.next_sibling \"Link to this definition\")\n\nparent_: [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.parent \"Link to this definition\")\n\nprevious\\_element_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.previous_element \"Link to this definition\")\n\nprevious\\_sibling_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.previous_sibling \"Link to this definition\")\n\n_class_ bs4.element.CharsetMetaAttributeValue(_original\\_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CharsetMetaAttributeValue \"Link to this definition\")\n\nBases: [`AttributeValueWithCharsetSubstitution`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeValueWithCharsetSubstitution \"bs4.element.AttributeValueWithCharsetSubstitution\")\n\nA generic stand-in for the value of a `<meta>` tag's `charset` attribute.\n\nWhen Beautiful Soup parses the markup `<meta charset=\"utf8\">`, the value of the `charset` attribute will become one of these objects.\n\nIf the document is later encoded to an encoding other than UTF-8, its `<meta>` tag will mention the new encoding instead of `utf8`.\n\nsubstitute\\_encoding(_eventual\\_encoding: \\_Encoding \\= 'utf-8'_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CharsetMetaAttributeValue.substitute_encoding \"Link to this definition\")\n\nWhen an HTML document is being encoded to a given encoding, the value of a `<meta>` tag's `charset` becomes the name of the encoding.\n\n_class_ bs4.element.Comment(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment \"Link to this definition\")\n\nBases: [`PreformattedString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString \"bs4.element.PreformattedString\")\n\nAn [HTML comment](https://dev.w3.org/html5/spec-LC/syntax.html#comments)\n or [XML comment](https://www.w3.org/TR/REC-xml/#sec-comments)\n.\n\nPREFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '<!--'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.PREFIX \"Link to this definition\")\n\nA string prepended to the body of the 'real' string when formatting it as part of a document, such as the '<!--' in an HTML comment.\n\nSUFFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '-->'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.SUFFIX \"Link to this definition\")\n\nA string appended to the body of the 'real' string when formatting it as part of a document, such as the '-->' in an HTML comment.\n\nnext\\_element_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.next_element \"Link to this definition\")\n\nnext\\_sibling_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.next_sibling \"Link to this definition\")\n\nparent_: [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.parent \"Link to this definition\")\n\nprevious\\_element_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.previous_element \"Link to this definition\")\n\nprevious\\_sibling_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.previous_sibling \"Link to this definition\")\n\n_class_ bs4.element.ContentMetaAttributeValue(_original\\_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ContentMetaAttributeValue \"Link to this definition\")\n\nBases: [`AttributeValueWithCharsetSubstitution`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeValueWithCharsetSubstitution \"bs4.element.AttributeValueWithCharsetSubstitution\")\n\nA generic stand-in for the value of a `<meta>` tag's `content` attribute.\n\nWhen Beautiful Soup parses the markup:\n\n`<meta http-equiv=\"content-type\" content=\"text/html; charset=utf8\">`\n\nThe value of the `content` attribute will become one of these objects.\n\nIf the document is later encoded to an encoding other than UTF-8, its `<meta>` tag will mention the new encoding instead of `utf8`.\n\nCHARSET\\_RE_: [Pattern](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_ _\\= re.compile('((^|;)\\\\\\\\s\\*charset=)(\\[^;\\]\\*)', re.MULTILINE)_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ContentMetaAttributeValue.CHARSET_RE \"Link to this definition\")\n\nMatch the 'charset' argument inside the 'content' attribute of a <meta> tag. :meta private:\n\nsubstitute\\_encoding(_eventual\\_encoding: \\_Encoding \\= 'utf-8'_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ContentMetaAttributeValue.substitute_encoding \"Link to this definition\")\n\nWhen an HTML document is being encoded to a given encoding, the value of the `charset=` in a `<meta>` tag's `content` becomes the name of the encoding.\n\nbs4.element.DEFAULT\\_OUTPUT\\_ENCODING_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= 'utf-8'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.DEFAULT_OUTPUT_ENCODING \"Link to this definition\")\n\nDocuments output by Beautiful Soup will be encoded with this encoding unless you specify otherwise.\n\n_class_ bs4.element.Declaration(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration \"Link to this definition\")\n\nBases: [`PreformattedString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString \"bs4.element.PreformattedString\")\n\nAn [XML declaration](https://www.w3.org/TR/REC-xml/#sec-prolog-dtd)\n.\n\nPREFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '<?'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.PREFIX \"Link to this definition\")\n\nA string prepended to the body of the 'real' string when formatting it as part of a document, such as the '<!--' in an HTML comment.\n\nSUFFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '?>'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.SUFFIX \"Link to this definition\")\n\nA string appended to the body of the 'real' string when formatting it as part of a document, such as the '-->' in an HTML comment.\n\nnext\\_element_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.next_element \"Link to this definition\")\n\nnext\\_sibling_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.next_sibling \"Link to this definition\")\n\nparent_: [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.parent \"Link to this definition\")\n\nprevious\\_element_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.previous_element \"Link to this definition\")\n\nprevious\\_sibling_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.previous_sibling \"Link to this definition\")\n\n_class_ bs4.element.Doctype(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype \"Link to this definition\")\n\nBases: [`PreformattedString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString \"bs4.element.PreformattedString\")\n\nA [document type declaration](https://www.w3.org/TR/REC-xml/#dt-doctype)\n.\n\nPREFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '<!DOCTYPE '_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.PREFIX \"Link to this definition\")\n\nA string prepended to the body of the 'real' string when formatting it as part of a document, such as the '<!--' in an HTML comment.\n\nSUFFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '>\\\\n'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.SUFFIX \"Link to this definition\")\n\nA string appended to the body of the 'real' string when formatting it as part of a document, such as the '-->' in an HTML comment.\n\n_classmethod_ for\\_name\\_and\\_ids(_name: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _pub\\_id: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_, _system\\_id: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_) → [Doctype](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype \"bs4.element.Doctype\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.for_name_and_ids \"Link to this definition\")\n\nGenerate an appropriate document type declaration for a given public ID and system ID.\n\nParameters:\n\n*   **name** -- The name of the document's root element, e.g. 'html'.\n    \n*   **pub\\_id** -- The Formal Public Identifier for this document type, e.g. '-//W3C//DTD XHTML 1.1//EN'\n    \n*   **system\\_id** -- The system identifier for this document type, e.g. '[http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd](http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd)\n    '\n    \n\nnext\\_element_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.next_element \"Link to this definition\")\n\nnext\\_sibling_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.next_sibling \"Link to this definition\")\n\nparent_: [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.parent \"Link to this definition\")\n\nprevious\\_element_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.previous_element \"Link to this definition\")\n\nprevious\\_sibling_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.previous_sibling \"Link to this definition\")\n\n_class_ bs4.element.HTMLAttributeDict[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.HTMLAttributeDict \"Link to this definition\")\n\nBases: [`AttributeDict`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeDict \"bs4.element.AttributeDict\")\n\nA dictionary for holding a Tag's attributes, which processes incoming values for consistency with the HTML spec, which says 'Attribute values are a mixture of text and character references...'\n\nBasically, this means converting common non-string values into strings, like XMLAttributeDict, though HTML also has some rules around boolean attributes that XML doesn't have.\n\n_class_ bs4.element.NamespacedAttribute(_prefix: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_, _name: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _namespace: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NamespacedAttribute \"Link to this definition\")\n\nBases: [`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n\nA namespaced attribute (e.g. the 'xml:lang' in 'xml:lang=\"en\"') which remembers the namespace prefix ('xml') and the name ('lang') that were used to create it.\n\nname_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NamespacedAttribute.name \"Link to this definition\")\n\nnamespace_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NamespacedAttribute.namespace \"Link to this definition\")\n\nprefix_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NamespacedAttribute.prefix \"Link to this definition\")\n\n_class_ bs4.element.NavigableString(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"Link to this definition\")\n\nBases: [`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n, [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n\nA Python string that is part of a parse tree.\n\nWhen Beautiful Soup parses the markup `<b>penguin</b>`, it will create a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n for the string \"penguin\".\n\nPREFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= ''_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString.PREFIX \"Link to this definition\")\n\nA string prepended to the body of the 'real' string when formatting it as part of a document, such as the '<!--' in an HTML comment.\n\nSUFFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= ''_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString.SUFFIX \"Link to this definition\")\n\nA string appended to the body of the 'real' string when formatting it as part of a document, such as the '-->' in an HTML comment.\n\noutput\\_ready(_formatter: \\_FormatterOrName \\= 'minimal'_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString.output_ready \"Link to this definition\")\n\nRun the string through the provided formatter, making it ready for output as part of an HTML or XML document.\n\nParameters:\n\n**formatter** -- A [`Formatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter \"bs4.formatter.Formatter\")\n object, or a string naming one of the standard formatters.\n\n_property_ strings_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString.strings \"Link to this definition\")\n\nYield this string, but only if it is interesting.\n\nThis is defined the way it is for compatibility with [`Tag.strings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.strings \"bs4.element.Tag.strings\")\n. See [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n for information on which strings are interesting in a given context.\n\nYield:\n\nA sequence that either contains this string, or is empty.\n\nbs4.element.PYTHON\\_SPECIFIC\\_ENCODINGS_: Set\\[\\_Encoding\\]_ _\\= {'idna', 'mbcs', 'oem', 'palmos', 'punycode', 'raw-unicode-escape', 'raw\\_unicode\\_escape', 'string-escape', 'string\\_escape', 'undefined', 'unicode-escape', 'unicode\\_escape'}_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PYTHON_SPECIFIC_ENCODINGS \"Link to this definition\")\n\nThese encodings are recognized by Python (so [`Tag.encode`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.encode \"bs4.element.Tag.encode\")\n could theoretically support them) but XML and HTML don't recognize them (so they should not show up in an XML or HTML document as that document's encoding).\n\nIf an XML document is encoded in one of these encodings, no encoding will be mentioned in the XML declaration. If an HTML document is encoded in one of these encodings, and the HTML document has a <meta> tag that mentions an encoding, the encoding will be given as the empty string.\n\nSource: Python documentation, [Python Specific Encodings](https://docs.python.org/3/library/codecs.html#python-specific-encodings)\n\n_class_ bs4.element.PageElement[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"Link to this definition\")\n\nBases: [`object`](https://docs.python.org/3/library/functions.html#object \"(in Python v3.13)\")\n\nAn abstract class representing a single element in the parse tree.\n\n[`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n, [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n, etc. are all subclasses of [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n. For this reason you'll see a lot of methods that return [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n, but you'll never see an actual [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n object. For the most part you can think of [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n as meaning \"a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n or a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n.\"\n\ndecompose() → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.decompose \"Link to this definition\")\n\nRecursively destroys this [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n and its children.\n\nThe element will be removed from the tree and wiped out; so will everything beneath it.\n\nThe behavior of a decomposed [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n is undefined and you should never use one for anything, but if you need to _check_ whether an element has been decomposed, you can use the [`PageElement.decomposed`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.decomposed \"bs4.element.PageElement.decomposed\")\n property.\n\n_property_ decomposed_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.decomposed \"Link to this definition\")\n\nCheck whether a PageElement has been decomposed.\n\nextract(_\\_self\\_index: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_) → [Self](https://docs.python.org/3/library/typing.html#typing.Self \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.extract \"Link to this definition\")\n\nDestructively rips this element out of the tree.\n\nParameters:\n\n**\\_self\\_index** -- The location of this element in its parent's .contents, if known. Passing this in allows for a performance optimization.\n\nReturns:\n\nthis [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n, no longer part of the tree.\n\nfind\\_all\\_next(_name: \\_FindMethodName \\= None_, _attrs: \\_StrainableAttributes \\= {}_, _string: \\_StrainableString | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _limit: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\_stacklevel: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 2_, _\\*\\*kwargs: \\_StrainableAttribute_) → \\_QueryResults[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_all_next \"Link to this definition\")\n\nFind all [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n objects that match the given criteria and appear later in the document than this [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n.\n\nAll find\\_\\* methods take a common set of arguments. See the online documentation for detailed explanations.\n\nParameters:\n\n*   **name** -- A filter on tag name.\n    \n*   **attrs** -- Additional filters on attribute values.\n    \n*   **string** -- A filter for a NavigableString with specific text.\n    \n*   **limit** -- Stop looking after finding this many results.\n    \n*   **\\_stacklevel** -- Used internally to improve warning messages.\n    \n\nKwargs:\n\nAdditional filters on attribute values.\n\nfind\\_all\\_previous(_name: \\_FindMethodName \\= None_, _attrs: \\_StrainableAttributes \\= {}_, _string: \\_StrainableString | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _limit: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\_stacklevel: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 2_, _\\*\\*kwargs: \\_StrainableAttribute_) → \\_QueryResults[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_all_previous \"Link to this definition\")\n\nLook backwards in the document from this [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n and find all [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n that match the given criteria.\n\nAll find\\_\\* methods take a common set of arguments. See the online documentation for detailed explanations.\n\nParameters:\n\n*   **name** -- A filter on tag name.\n    \n*   **attrs** -- Additional filters on attribute values.\n    \n*   **string** -- A filter for a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n     with specific text.\n    \n*   **limit** -- Stop looking after finding this many results.\n    \n*   **\\_stacklevel** -- Used internally to improve warning messages.\n    \n\nKwargs:\n\nAdditional filters on attribute values.\n\nfind\\_next(_name: \\_FindMethodName \\= None_, _attrs: \\_StrainableAttributes \\= {}_, _string: \\_StrainableString | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\*\\*kwargs: \\_StrainableAttribute_) → \\_AtMostOneElement[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_next \"Link to this definition\")\n\nFind the first PageElement that matches the given criteria and appears later in the document than this PageElement.\n\nAll find\\_\\* methods take a common set of arguments. See the online documentation for detailed explanations.\n\nParameters:\n\n*   **name** -- A filter on tag name.\n    \n*   **attrs** -- Additional filters on attribute values.\n    \n*   **string** -- A filter for a NavigableString with specific text.\n    \n\nKwargs:\n\nAdditional filters on attribute values.\n\nfind\\_next\\_sibling(_name: \\_FindMethodName \\= None_, _attrs: \\_StrainableAttributes \\= {}_, _string: \\_StrainableString | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\*\\*kwargs: \\_StrainableAttribute_) → \\_AtMostOneElement[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_next_sibling \"Link to this definition\")\n\nFind the closest sibling to this PageElement that matches the given criteria and appears later in the document.\n\nAll find\\_\\* methods take a common set of arguments. See the online documentation for detailed explanations.\n\nParameters:\n\n*   **name** -- A filter on tag name.\n    \n*   **attrs** -- Additional filters on attribute values.\n    \n*   **string** -- A filter for a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n     with specific text.\n    \n\nKwargs:\n\nAdditional filters on attribute values.\n\nfind\\_next\\_siblings(_name: \\_FindMethodName \\= None_, _attrs: \\_StrainableAttributes \\= {}_, _string: \\_StrainableString | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _limit: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\_stacklevel: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 2_, _\\*\\*kwargs: \\_StrainableAttribute_) → \\_QueryResults[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_next_siblings \"Link to this definition\")\n\nFind all siblings of this [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n that match the given criteria and appear later in the document.\n\nAll find\\_\\* methods take a common set of arguments. See the online documentation for detailed explanations.\n\nParameters:\n\n*   **name** -- A filter on tag name.\n    \n*   **attrs** -- Additional filters on attribute values.\n    \n*   **string** -- A filter for a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n     with specific text.\n    \n*   **limit** -- Stop looking after finding this many results.\n    \n*   **\\_stacklevel** -- Used internally to improve warning messages.\n    \n\nKwargs:\n\nAdditional filters on attribute values.\n\nfind\\_parent(_name: \\_FindMethodName \\= None_, _attrs: \\_StrainableAttributes \\= {}_, _\\*\\*kwargs: \\_StrainableAttribute_) → \\_AtMostOneElement[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_parent \"Link to this definition\")\n\nFind the closest parent of this PageElement that matches the given criteria.\n\nAll find\\_\\* methods take a common set of arguments. See the online documentation for detailed explanations.\n\nParameters:\n\n*   **name** -- A filter on tag name.\n    \n*   **attrs** -- Additional filters on attribute values.\n    \n*   **self** -- Whether the PageElement itself should be considered as one of its 'parents'.\n    \n\nKwargs:\n\nAdditional filters on attribute values.\n\nfind\\_parents(_name: \\_FindMethodName \\= None_, _attrs: \\_StrainableAttributes \\= {}_, _limit: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\_stacklevel: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 2_, _\\*\\*kwargs: \\_StrainableAttribute_) → \\_QueryResults[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_parents \"Link to this definition\")\n\nFind all parents of this [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n that match the given criteria.\n\nAll find\\_\\* methods take a common set of arguments. See the online documentation for detailed explanations.\n\nParameters:\n\n*   **name** -- A filter on tag name.\n    \n*   **attrs** -- Additional filters on attribute values.\n    \n*   **limit** -- Stop looking after finding this many results.\n    \n*   **\\_stacklevel** -- Used internally to improve warning messages.\n    \n\nKwargs:\n\nAdditional filters on attribute values.\n\nfind\\_previous(_name: \\_FindMethodName \\= None_, _attrs: \\_StrainableAttributes \\= {}_, _string: \\_StrainableString | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\*\\*kwargs: \\_StrainableAttribute_) → \\_AtMostOneElement[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_previous \"Link to this definition\")\n\nLook backwards in the document from this [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n and find the first [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n that matches the given criteria.\n\nAll find\\_\\* methods take a common set of arguments. See the online documentation for detailed explanations.\n\nParameters:\n\n*   **name** -- A filter on tag name.\n    \n*   **attrs** -- Additional filters on attribute values.\n    \n*   **string** -- A filter for a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n     with specific text.\n    \n\nKwargs:\n\nAdditional filters on attribute values.\n\nfind\\_previous\\_sibling(_name: \\_FindMethodName \\= None_, _attrs: \\_StrainableAttributes \\= {}_, _string: \\_StrainableString | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\*\\*kwargs: \\_StrainableAttribute_) → \\_AtMostOneElement[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_previous_sibling \"Link to this definition\")\n\nReturns the closest sibling to this [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n that matches the given criteria and appears earlier in the document.\n\nAll find\\_\\* methods take a common set of arguments. See the online documentation for detailed explanations.\n\nParameters:\n\n*   **name** -- A filter on tag name.\n    \n*   **attrs** -- Additional filters on attribute values.\n    \n*   **string** -- A filter for a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n     with specific text.\n    \n\nKwargs:\n\nAdditional filters on attribute values.\n\nfind\\_previous\\_siblings(_name: \\_FindMethodName \\= None_, _attrs: \\_StrainableAttributes \\= {}_, _string: \\_StrainableString | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _limit: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\_stacklevel: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 2_, _\\*\\*kwargs: \\_StrainableAttribute_) → \\_QueryResults[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_previous_siblings \"Link to this definition\")\n\nReturns all siblings to this PageElement that match the given criteria and appear earlier in the document.\n\nAll find\\_\\* methods take a common set of arguments. See the online documentation for detailed explanations.\n\nParameters:\n\n*   **name** -- A filter on tag name.\n    \n*   **attrs** -- Additional filters on attribute values.\n    \n*   **string** -- A filter for a NavigableString with specific text.\n    \n*   **limit** -- Stop looking after finding this many results.\n    \n*   **\\_stacklevel** -- Used internally to improve warning messages.\n    \n\nKwargs:\n\nAdditional filters on attribute values.\n\nformat\\_string(_s: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _formatter: \\_FormatterOrName | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.format_string \"Link to this definition\")\n\nFormat the given string using the given formatter.\n\nParameters:\n\n*   **s** -- A string.\n    \n*   **formatter** -- A Formatter object, or a string naming one of the standard formatters.\n    \n\nformatter\\_for\\_name(_formatter\\_name: \\_FormatterOrName | \\_EntitySubstitutionFunction_) → [Formatter](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter \"bs4.formatter.Formatter\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.formatter_for_name \"Link to this definition\")\n\nLook up or create a Formatter for the given identifier, if necessary.\n\nParameters:\n\n**formatter** -- Can be a [`Formatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter \"bs4.formatter.Formatter\")\n object (used as-is), a function (used as the entity substitution hook for an [`bs4.formatter.XMLFormatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.XMLFormatter \"bs4.formatter.XMLFormatter\")\n or [`bs4.formatter.HTMLFormatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.HTMLFormatter \"bs4.formatter.HTMLFormatter\")\n), or a string (used to look up an [`bs4.formatter.XMLFormatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.XMLFormatter \"bs4.formatter.XMLFormatter\")\n or [`bs4.formatter.HTMLFormatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.HTMLFormatter \"bs4.formatter.HTMLFormatter\")\n in the appropriate registry.\n\ngetText(_separator: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n \\= ''_, _strip: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= False_, _types: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[Type](https://docs.python.org/3/library/typing.html#typing.Type \"(in Python v3.13)\")\\\n\\[[NavigableString](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\\\n\\]\\] \\= ()_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.getText \"Link to this definition\")\n\nGet all child strings of this PageElement, concatenated using the given separator.\n\nParameters:\n\n*   **separator** -- Strings will be concatenated using this separator.\n    \n*   **strip** -- If True, strings will be stripped before being concatenated.\n    \n*   **types** -- A tuple of NavigableString subclasses. Any strings of a subclass not found in this list will be ignored. Although there are exceptions, the default behavior in most cases is to consider only NavigableString and CData objects. That means no comments, processing instructions, etc.\n    \n\nReturns:\n\nA string.\n\nget\\_text(_separator: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n \\= ''_, _strip: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= False_, _types: [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[Type](https://docs.python.org/3/library/typing.html#typing.Type \"(in Python v3.13)\")\\\n\\[[NavigableString](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\\\n\\]\\] \\= ()_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.get_text \"Link to this definition\")\n\nGet all child strings of this PageElement, concatenated using the given separator.\n\nParameters:\n\n*   **separator** -- Strings will be concatenated using this separator.\n    \n*   **strip** -- If True, strings will be stripped before being concatenated.\n    \n*   **types** -- A tuple of NavigableString subclasses. Any strings of a subclass not found in this list will be ignored. Although there are exceptions, the default behavior in most cases is to consider only NavigableString and CData objects. That means no comments, processing instructions, etc.\n    \n\nReturns:\n\nA string.\n\nhidden_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_ _\\= False_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.hidden \"Link to this definition\")\n\nWhether or not this element is hidden from generated output. Only the [`BeautifulSoup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n object itself is hidden.\n\ninsert\\_after(_\\*args: \\_InsertableElement_) → List\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.insert_after \"Link to this definition\")\n\nMakes the given element(s) the immediate successor of this one.\n\nThe elements will have the same [`PageElement.parent`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.parent \"bs4.element.PageElement.parent\")\n as this one, and the given elements will occur immediately after this one.\n\nParameters:\n\n**args** -- One or more PageElements.\n\n:return The list of PageElements that were inserted.\n\ninsert\\_before(_\\*args: \\_InsertableElement_) → List\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.insert_before \"Link to this definition\")\n\nMakes the given element(s) the immediate predecessor of this one.\n\nAll the elements will have the same [`PageElement.parent`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.parent \"bs4.element.PageElement.parent\")\n as this one, and the given elements will occur immediately before this one.\n\nParameters:\n\n**args** -- One or more PageElements.\n\n:return The list of PageElements that were inserted.\n\nknown\\_xml_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_ _\\= None_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.known_xml \"Link to this definition\")\n\nIn general, we can't tell just by looking at an element whether it's contained in an XML document or an HTML document. But for [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n objects (q.v.) we can store this information at parse time. :meta private:\n\n_property_ next_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.next \"Link to this definition\")\n\nThe [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n, if any, that was parsed just after this one.\n\nnext\\_element_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.next_element \"Link to this definition\")\n\n_property_ next\\_elements_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.next_elements \"Link to this definition\")\n\nAll PageElements that were parsed after this one.\n\nnext\\_sibling_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.next_sibling \"Link to this definition\")\n\n_property_ next\\_siblings_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.next_siblings \"Link to this definition\")\n\nAll PageElements that are siblings of this one but were parsed later.\n\nparent_: [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.parent \"Link to this definition\")\n\n_property_ parents_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.parents \"Link to this definition\")\n\nAll elements that are parents of this PageElement.\n\nYield:\n\nA sequence of Tags, ending with a BeautifulSoup object.\n\n_property_ previous_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.previous \"Link to this definition\")\n\nThe [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n, if any, that was parsed just before this one.\n\nprevious\\_element_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.previous_element \"Link to this definition\")\n\n_property_ previous\\_elements_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.previous_elements \"Link to this definition\")\n\nAll PageElements that were parsed before this one.\n\nYield:\n\nA sequence of PageElements.\n\nprevious\\_sibling_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.previous_sibling \"Link to this definition\")\n\n_property_ previous\\_siblings_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.previous_siblings \"Link to this definition\")\n\nAll PageElements that are siblings of this one but were parsed earlier.\n\nYield:\n\nA sequence of PageElements.\n\nreplace\\_with(_\\*args: [PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n_) → [Self](https://docs.python.org/3/library/typing.html#typing.Self \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.replace_with \"Link to this definition\")\n\nReplace this [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n with one or more other [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n, objects, keeping the rest of the tree the same.\n\nReturns:\n\nThis [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n, no longer part of the tree.\n\n_property_ self\\_and\\_next\\_elements_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.self_and_next_elements \"Link to this definition\")\n\nThis PageElement, then all PageElements that were parsed after it.\n\n_property_ self\\_and\\_next\\_siblings_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.self_and_next_siblings \"Link to this definition\")\n\nThis PageElement, then all of its siblings.\n\n_property_ self\\_and\\_parents_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.self_and_parents \"Link to this definition\")\n\nThis element, then all of its parents.\n\nYield:\n\nA sequence of PageElements, ending with a BeautifulSoup object.\n\n_property_ self\\_and\\_previous\\_elements_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.self_and_previous_elements \"Link to this definition\")\n\nThis PageElement, then all elements that were parsed earlier.\n\n_property_ self\\_and\\_previous\\_siblings_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.self_and_previous_siblings \"Link to this definition\")\n\nThis PageElement, then all of its siblings that were parsed earlier.\n\nsetup(_parent: [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _previous\\_element: \\_AtMostOneElement \\= None_, _next\\_element: \\_AtMostOneElement \\= None_, _previous\\_sibling: \\_AtMostOneElement \\= None_, _next\\_sibling: \\_AtMostOneElement \\= None_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.setup \"Link to this definition\")\n\nSets up the initial relations between this element and other elements.\n\nParameters:\n\n*   **parent** -- The parent of this element.\n    \n*   **previous\\_element** -- The element parsed immediately before this one.\n    \n*   **next\\_element** -- The element parsed immediately before this one.\n    \n*   **previous\\_sibling** -- The most recently encountered element on the same level of the parse tree as this one.\n    \n*   **previous\\_sibling** -- The next element to be encountered on the same level of the parse tree as this one.\n    \n\n_property_ stripped\\_strings_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.stripped_strings \"Link to this definition\")\n\nYield all interesting strings in this PageElement, stripping them first.\n\nSee [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n for information on which strings are considered interesting in a given context.\n\n_property_ text_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.text \"Link to this definition\")\n\nGet all child strings of this PageElement, concatenated using the given separator.\n\nParameters:\n\n*   **separator** -- Strings will be concatenated using this separator.\n    \n*   **strip** -- If True, strings will be stripped before being concatenated.\n    \n*   **types** -- A tuple of NavigableString subclasses. Any strings of a subclass not found in this list will be ignored. Although there are exceptions, the default behavior in most cases is to consider only NavigableString and CData objects. That means no comments, processing instructions, etc.\n    \n\nReturns:\n\nA string.\n\nwrap(_wrap\\_inside: [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n_) → [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.wrap \"Link to this definition\")\n\nWrap this [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n inside a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n.\n\nReturns:\n\n`wrap_inside`, occupying the position in the tree that used to be occupied by this object, and with this object now inside it.\n\n_class_ bs4.element.PreformattedString(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString \"Link to this definition\")\n\nBases: [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n\nA [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n not subject to the normal formatting rules.\n\nThis is an abstract class used for special kinds of strings such as comments ([`Comment`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment \"bs4.element.Comment\")\n) and CDATA blocks ([`CData`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData \"bs4.element.CData\")\n).\n\nPREFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= ''_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString.PREFIX \"Link to this definition\")\n\nA string prepended to the body of the 'real' string when formatting it as part of a document, such as the '<!--' in an HTML comment.\n\nSUFFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= ''_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString.SUFFIX \"Link to this definition\")\n\nA string appended to the body of the 'real' string when formatting it as part of a document, such as the '-->' in an HTML comment.\n\noutput\\_ready(_formatter: \\_FormatterOrName | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString.output_ready \"Link to this definition\")\n\nMake this string ready for output by adding any subclass-specific\n\nprefix or suffix.\n\nParameters:\n\n**formatter** -- A [`Formatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter \"bs4.formatter.Formatter\")\n object, or a string naming one of the standard formatters. The string will be passed into the [`Formatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter \"bs4.formatter.Formatter\")\n, but only to trigger any side effects: the return value is ignored.\n\nReturns:\n\nThe string, with any subclass-specific prefix and suffix added on.\n\n_class_ bs4.element.ProcessingInstruction(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction \"Link to this definition\")\n\nBases: [`PreformattedString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString \"bs4.element.PreformattedString\")\n\nA SGML processing instruction.\n\nPREFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '<?'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.PREFIX \"Link to this definition\")\n\nA string prepended to the body of the 'real' string when formatting it as part of a document, such as the '<!--' in an HTML comment.\n\nSUFFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '>'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.SUFFIX \"Link to this definition\")\n\nA string appended to the body of the 'real' string when formatting it as part of a document, such as the '-->' in an HTML comment.\n\nnext\\_element_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.next_element \"Link to this definition\")\n\nnext\\_sibling_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.next_sibling \"Link to this definition\")\n\nparent_: [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.parent \"Link to this definition\")\n\nprevious\\_element_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.previous_element \"Link to this definition\")\n\nprevious\\_sibling_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.previous_sibling \"Link to this definition\")\n\n_class_ bs4.element.ResultSet(_source: [ElementFilter](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#ElementFilter \"ElementFilter\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_, _result: Iterable\\[\\_PageElementT\\] \\= ()_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ResultSet \"Link to this definition\")\n\nBases: [`List`](https://docs.python.org/3/library/typing.html#typing.List \"(in Python v3.13)\")\n\\[`_PageElementT`\\], [`Generic`](https://docs.python.org/3/library/typing.html#typing.Generic \"(in Python v3.13)\")\n\\[`_PageElementT`\\]\n\nA ResultSet is a list of [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n objects, gathered as the result of matching an [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#ElementFilter \"ElementFilter\")\n against a parse tree. Basically, a list of search results.\n\nsource_: [ElementFilter](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#ElementFilter \"ElementFilter\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ResultSet.source \"Link to this definition\")\n\n_class_ bs4.element.RubyParenthesisString(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.RubyParenthesisString \"Link to this definition\")\n\nBases: [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n\nA NavigableString representing the contents of an [<rp> HTML tag](https://dev.w3.org/html5/spec-LC/text-level-semantics.html#the-rp-element)\n.\n\n_class_ bs4.element.RubyTextString(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.RubyTextString \"Link to this definition\")\n\nBases: [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n\nA NavigableString representing the contents of an [<rt> HTML tag](https://dev.w3.org/html5/spec-LC/text-level-semantics.html#the-rt-element)\n.\n\nCan be used to distinguish such strings from the strings they're annotating.\n\n_class_ bs4.element.Script(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Script \"Link to this definition\")\n\nBases: [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n\nA [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n representing the contents of a [<script> HTML tag](https://dev.w3.org/html5/spec-LC/Overview.html#the-script-element)\n (probably Javascript).\n\nUsed to distinguish executable code from textual content.\n\n_class_ bs4.element.Stylesheet(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Stylesheet \"Link to this definition\")\n\nBases: [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n\nA [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n representing the contents of a [<style> HTML tag](https://dev.w3.org/html5/spec-LC/Overview.html#the-style-element)\n (probably CSS).\n\nUsed to distinguish embedded stylesheets from textual content.\n\n_class_ bs4.element.Tag(_parser: [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _builder: [TreeBuilder](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _name: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _namespace: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _prefix: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _attrs: \\_RawOrProcessedAttributeValues | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _parent: [BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n | [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _previous: \\_AtMostOneElement \\= None_, _is\\_xml: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _sourceline: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _sourcepos: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _can\\_be\\_empty\\_element: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _cdata\\_list\\_attributes: Dict\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, Set\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _preserve\\_whitespace\\_tags: Set\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _interesting\\_string\\_types: Set\\[Type\\[[NavigableString](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\\\n\\]\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _namespaces: Dict\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"Link to this definition\")\n\nBases: [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n\nAn HTML or XML tag that is part of a parse tree, along with its attributes, contents, and relationships to other parts of the tree.\n\nWhen Beautiful Soup parses the markup `<b>penguin</b>`, it will create a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n object representing the `<b>` tag. You can instantiate [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n objects directly, but it's not necessary unless you're adding entirely new markup to a parsed document. Most of the constructor arguments are intended for use by the [`TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n that's parsing a document.\n\nParameters:\n\n*   **parser** -- A [`BeautifulSoup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n     object representing the parse tree this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n     will be part of.\n    \n*   **builder** -- The [`TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n     being used to build the tree.\n    \n*   **name** -- The name of the tag.\n    \n*   **namespace** -- The URI of this tag's XML namespace, if any.\n    \n*   **prefix** -- The prefix for this tag's XML namespace, if any.\n    \n*   **attrs** -- A dictionary of attribute values.\n    \n*   **parent** -- The [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n     to use as the parent of this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n    . May be the [`BeautifulSoup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n     object itself.\n    \n*   **previous** -- The [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n     that was parsed immediately before parsing this tag.\n    \n*   **is\\_xml** -- If True, this is an XML tag. Otherwise, this is an HTML tag.\n    \n*   **sourceline** -- The line number where this tag was found in its source document.\n    \n*   **sourcepos** -- The character position within `sourceline` where this tag was found.\n    \n*   **can\\_be\\_empty\\_element** -- If True, this tag should be represented as <tag/>. If False, this tag should be represented as <tag></tag>.\n    \n*   **cdata\\_list\\_attributes** -- A dictionary of attributes whose values should be parsed as lists of strings if they ever show up on this tag.\n    \n*   **preserve\\_whitespace\\_tags** -- Names of tags whose contents should have their whitespace preserved if they are encountered inside this tag.\n    \n*   **interesting\\_string\\_types** -- When iterating over this tag's string contents in methods like [`Tag.strings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.strings \"bs4.element.Tag.strings\")\n     or [`PageElement.get_text`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.get_text \"bs4.element.PageElement.get_text\")\n    , these are the types of strings that are interesting enough to be considered. By default, [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n     (normal strings) and [`CData`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData \"bs4.element.CData\")\n     (CDATA sections) are the only interesting string subtypes.\n    \n*   **namespaces** -- A dictionary mapping currently active namespace prefixes to URIs, as of the point in the parsing process when this tag was encountered. This can be used later to construct CSS selectors.\n    \n\nappend(_tag: \\_InsertableElement_) → [PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.append \"Link to this definition\")\n\nAppends the given [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n to the contents of this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n.\n\nParameters:\n\n**tag** -- A PageElement.\n\n:return The newly appended PageElement.\n\nattrs_: \\_AttributeValues_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.attrs \"Link to this definition\")\n\ncan\\_be\\_empty\\_element_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.can_be_empty_element \"Link to this definition\")\n\ncdata\\_list\\_attributes_: Dict\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, Set\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.cdata_list_attributes \"Link to this definition\")\n\n_property_ children_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.children \"Link to this definition\")\n\nIterate over all direct children of this [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n.\n\nclear(_decompose: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= False_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.clear \"Link to this definition\")\n\nDestroy all children of this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n by calling\n\n[`PageElement.extract`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.extract \"bs4.element.PageElement.extract\")\n on them.\n\nParameters:\n\n**decompose** -- If this is True, [`PageElement.decompose`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.decompose \"bs4.element.PageElement.decompose\")\n (a more destructive method) will be called instead of [`PageElement.extract`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.extract \"bs4.element.PageElement.extract\")\n.\n\ncontents_: List\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.contents \"Link to this definition\")\n\ncopy\\_self() → [Self](https://docs.python.org/3/library/typing.html#typing.Self \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.copy_self \"Link to this definition\")\n\nCreate a new Tag just like this one, but with no contents and unattached to any parse tree.\n\nThis is the first step in the deepcopy process, but you can call it on its own to create a copy of a Tag without copying its contents.\n\n_property_ css_: [CSS](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS \"bs4.css.CSS\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.css \"Link to this definition\")\n\nReturn an interface to the CSS selector API.\n\ndecode(_indent\\_level: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _eventual\\_encoding: \\_Encoding \\= 'utf-8'_, _formatter: \\_FormatterOrName \\= 'minimal'_, _iterator: Iterator\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.decode \"Link to this definition\")\n\nRender this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n and its contents as a Unicode string.\n\nParameters:\n\n*   **indent\\_level** -- Each line of the rendering will be indented this many levels. (The `formatter` decides what a 'level' means, in terms of spaces or other characters output.) This is used internally in recursive calls while pretty-printing.\n    \n*   **encoding** -- The encoding you intend to use when converting the string to a bytestring. decode() is _not_ responsible for performing that encoding. This information is needed so that a real encoding can be substituted in if the document contains an encoding declaration (e.g. in a <meta> tag).\n    \n*   **formatter** -- Either a [`Formatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter \"bs4.formatter.Formatter\")\n     object, or a string naming one of the standard formatters.\n    \n*   **iterator** -- The iterator to use when navigating over the parse tree. This is only used by [`Tag.decode_contents`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.decode_contents \"bs4.element.Tag.decode_contents\")\n     and you probably won't need to use it.\n    \n\ndecode\\_contents(_indent\\_level: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _eventual\\_encoding: \\_Encoding \\= 'utf-8'_, _formatter: \\_FormatterOrName \\= 'minimal'_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.decode_contents \"Link to this definition\")\n\nRenders the contents of this tag as a Unicode string.\n\nParameters:\n\n*   **indent\\_level** -- Each line of the rendering will be indented this many levels. (The formatter decides what a 'level' means in terms of spaces or other characters output.) Used internally in recursive calls while pretty-printing.\n    \n*   **eventual\\_encoding** -- The tag is destined to be encoded into this encoding. decode\\_contents() is _not_ responsible for performing that encoding. This information is needed so that a real encoding can be substituted in if the document contains an encoding declaration (e.g. in a <meta> tag).\n    \n*   **formatter** -- A [`Formatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter \"bs4.formatter.Formatter\")\n     object, or a string naming one of the standard Formatters.\n    \n\n_property_ descendants_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.descendants \"Link to this definition\")\n\nIterate over all children of this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n in a breadth-first sequence.\n\nencode(_encoding: \\_Encoding \\= 'utf-8'_, _indent\\_level: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _formatter: \\_FormatterOrName \\= 'minimal'_, _errors: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n \\= 'xmlcharrefreplace'_) → [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.encode \"Link to this definition\")\n\nRender this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n and its contents as a bytestring.\n\nParameters:\n\n*   **encoding** -- The encoding to use when converting to a bytestring. This may also affect the text of the document, specifically any encoding declarations within the document.\n    \n*   **indent\\_level** -- Each line of the rendering will be indented this many levels. (The `formatter` decides what a 'level' means, in terms of spaces or other characters output.) This is used internally in recursive calls while pretty-printing.\n    \n*   **formatter** -- Either a [`Formatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter \"bs4.formatter.Formatter\")\n     object, or a string naming one of the standard formatters.\n    \n*   **errors** --\n    \n    An error handling strategy such as 'xmlcharrefreplace'. This value is passed along into [`str.encode()`](https://docs.python.org/3/library/stdtypes.html#str.encode \"(in Python v3.13)\")\n     and its value should be one of the [error handling constants defined by Python's codecs module](https://docs.python.org/3/library/codecs.html#error-handlers)\n    .\n    \n\nencode\\_contents(_indent\\_level: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _encoding: \\_Encoding \\= 'utf-8'_, _formatter: \\_FormatterOrName \\= 'minimal'_) → [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.encode_contents \"Link to this definition\")\n\nRenders the contents of this PageElement as a bytestring.\n\nParameters:\n\n*   **indent\\_level** -- Each line of the rendering will be indented this many levels. (The `formatter` decides what a 'level' means, in terms of spaces or other characters output.) This is used internally in recursive calls while pretty-printing.\n    \n*   **formatter** -- Either a [`Formatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter \"bs4.formatter.Formatter\")\n     object, or a string naming one of the standard formatters.\n    \n*   **encoding** -- The bytestring will be in this encoding.\n    \n\nextend(_tags: Iterable\\[\\_InsertableElement\\] | [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n_) → List\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.extend \"Link to this definition\")\n\nAppends one or more objects to the contents of this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n.\n\nParameters:\n\n**tags** -- If a list of [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n objects is provided, they will be appended to this tag's contents, one at a time. If a single [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n is provided, its [`Tag.contents`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.contents \"bs4.element.Tag.contents\")\n will be used to extend this object's [`Tag.contents`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.contents \"bs4.element.Tag.contents\")\n.\n\n:return The list of PageElements that were appended.\n\nfind(_name: \\_FindMethodName \\= None_, _attrs: \\_StrainableAttributes \\= {}_, _recursive: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= True_, _string: \\_StrainableString | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\*\\*kwargs: \\_StrainableAttribute_) → \\_AtMostOneElement[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.find \"Link to this definition\")\n\nLook in the children of this PageElement and find the first PageElement that matches the given criteria.\n\nAll find\\_\\* methods take a common set of arguments. See the online documentation for detailed explanations.\n\nParameters:\n\n*   **name** -- A filter on tag name.\n    \n*   **attrs** -- Additional filters on attribute values.\n    \n*   **recursive** -- If this is True, find() will perform a recursive search of this Tag's children. Otherwise, only the direct children will be considered.\n    \n*   **string** -- A filter on the [`Tag.string`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.string \"bs4.element.Tag.string\")\n     attribute.\n    \n*   **limit** -- Stop looking after finding this many results.\n    \n\nKwargs:\n\nAdditional filters on attribute values.\n\nfind\\_all(_name: \\_FindMethodName \\= None_, _attrs: \\_StrainableAttributes \\= {}_, _recursive: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= True_, _string: \\_StrainableString | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _limit: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\_stacklevel: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 2_, _\\*\\*kwargs: \\_StrainableAttribute_) → \\_QueryResults[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.find_all \"Link to this definition\")\n\nLook in the children of this [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n and find all [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n objects that match the given criteria.\n\nAll find\\_\\* methods take a common set of arguments. See the online documentation for detailed explanations.\n\nParameters:\n\n*   **name** -- A filter on tag name.\n    \n*   **attrs** -- Additional filters on attribute values.\n    \n*   **recursive** -- If this is True, find\\_all() will perform a recursive search of this PageElement's children. Otherwise, only the direct children will be considered.\n    \n*   **limit** -- Stop looking after finding this many results.\n    \n*   **\\_stacklevel** -- Used internally to improve warning messages.\n    \n\nKwargs:\n\nAdditional filters on attribute values.\n\nget(_key: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _default: \\_AttributeValue | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_) → \\_AttributeValue | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.get \"Link to this definition\")\n\nReturns the value of the 'key' attribute for the tag, or the value given for 'default' if it doesn't have that attribute.\n\nParameters:\n\n*   **key** -- The attribute to look for.\n    \n*   **default** -- Use this value if the attribute is not present on this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n    .\n    \n\nget\\_attribute\\_list(_key: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _default: [AttributeValueList](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeValueList \"bs4.element.AttributeValueList\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_) → [AttributeValueList](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeValueList \"bs4.element.AttributeValueList\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.get_attribute_list \"Link to this definition\")\n\nThe same as get(), but always returns a (possibly empty) list.\n\nParameters:\n\n*   **key** -- The attribute to look for.\n    \n*   **default** -- Use this value if the attribute is not present on this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n    .\n    \n\nReturns:\n\nA list of strings, usually empty or containing only a single value.\n\nhas\\_attr(_key: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.has_attr \"Link to this definition\")\n\nDoes this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n have an attribute with the given name?\n\nindex(_element: [PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n_) → [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.index \"Link to this definition\")\n\nFind the index of a child of this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n (by identity, not value).\n\nDoing this by identity avoids issues when a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n contains two children that have string equality.\n\nParameters:\n\n**element** -- Look for this [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n in this object's contents.\n\ninsert(_position: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n_, _\\*new\\_children: \\_InsertableElement_) → List\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.insert \"Link to this definition\")\n\nInsert one or more new PageElements as a child of this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n.\n\nThis works similarly to `list.insert()`, except you can insert multiple elements at once.\n\nParameters:\n\n*   **position** -- The numeric position that should be occupied in this Tag's [`Tag.children`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.children \"bs4.element.Tag.children\")\n     by the first new [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n    .\n    \n*   **new\\_children** -- The PageElements to insert.\n    \n\n:return The newly inserted PageElements.\n\ninteresting\\_string\\_types_: Set\\[Type\\[[NavigableString](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\\\n\\]\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.interesting_string_types \"Link to this definition\")\n\nisSelfClosing() → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.isSelfClosing \"Link to this definition\")\n\n: :meta private:\n\n_property_ is\\_empty\\_element_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.is_empty_element \"Link to this definition\")\n\nIs this tag an empty-element tag? (aka a self-closing tag)\n\nA tag that has contents is never an empty-element tag.\n\nA tag that has no contents may or may not be an empty-element tag. It depends on the [`TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n used to create the tag. If the builder has a designated list of empty-element tags, then only a tag whose name shows up in that list is considered an empty-element tag. This is usually the case for HTML documents.\n\nIf the builder has no designated list of empty-element, then any tag with no contents is an empty-element tag. This is usually the case for XML documents.\n\nname_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.name \"Link to this definition\")\n\nnamespace_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.namespace \"Link to this definition\")\n\nnext\\_element_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.next_element \"Link to this definition\")\n\nnext\\_sibling_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.next_sibling \"Link to this definition\")\n\nparent_: [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.parent \"Link to this definition\")\n\nparser\\_class_: [type](https://docs.python.org/3/library/functions.html#type \"(in Python v3.13)\")\n\\[[BeautifulSoup](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.parser_class \"Link to this definition\")\n\nprefix_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.prefix \"Link to this definition\")\n\npreserve\\_whitespace\\_tags_: Set\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.preserve_whitespace_tags \"Link to this definition\")\n\nprettify(_encoding: \\_Encoding | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _formatter: \\_FormatterOrName \\= 'minimal'_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.prettify \"Link to this definition\")\n\nPretty-print this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n as a string or bytestring.\n\nParameters:\n\n*   **encoding** -- The encoding of the bytestring, or None if you want Unicode.\n    \n*   **formatter** -- A Formatter object, or a string naming one of the standard formatters.\n    \n\nReturns:\n\nA string (if no `encoding` is provided) or a bytestring (otherwise).\n\nprevious\\_element_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.previous_element \"Link to this definition\")\n\nprevious\\_sibling_: \\_AtMostOneElement_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.previous_sibling \"Link to this definition\")\n\nreplaceWithChildren() → \\_OneElement[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.replaceWithChildren \"Link to this definition\")\n\n: :meta private:\n\nreplace\\_with\\_children() → [Self](https://docs.python.org/3/library/typing.html#typing.Self \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.replace_with_children \"Link to this definition\")\n\nReplace this [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n with its contents.\n\nReturns:\n\nThis object, no longer part of the tree.\n\nselect(_selector: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _namespaces: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _limit: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 0_, _\\*\\*kwargs: [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.13)\")\n_) → [ResultSet](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ResultSet \"bs4.element.ResultSet\")\n\\[[Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.select \"Link to this definition\")\n\nPerform a CSS selection operation on the current element.\n\nThis uses the SoupSieve library.\n\nParameters:\n\n*   **selector** -- A string containing a CSS selector.\n    \n*   **namespaces** -- A dictionary mapping namespace prefixes used in the CSS selector to namespace URIs. By default, Beautiful Soup will use the prefixes it encountered while parsing the document.\n    \n*   **limit** -- After finding this number of results, stop looking.\n    \n*   **kwargs** -- Keyword arguments to be passed into SoupSieve's soupsieve.select() method.\n    \n\nselect\\_one(_selector: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _namespaces: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\*\\*kwargs: [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.13)\")\n_) → [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.select_one \"Link to this definition\")\n\nPerform a CSS selection operation on the current element.\n\nParameters:\n\n*   **selector** -- A CSS selector.\n    \n*   **namespaces** -- A dictionary mapping namespace prefixes used in the CSS selector to namespace URIs. By default, Beautiful Soup will use the prefixes it encountered while parsing the document.\n    \n*   **kwargs** -- Keyword arguments to be passed into Soup Sieve's soupsieve.select() method.\n    \n\n_property_ self\\_and\\_descendants_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.self_and_descendants \"Link to this definition\")\n\nIterate over this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n and its children in a breadth-first sequence.\n\nsmooth() → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.smooth \"Link to this definition\")\n\nSmooth out the children of this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n by consolidating consecutive strings.\n\nIf you perform a lot of operations that modify the tree, calling this method afterwards can make pretty-printed output look more natural.\n\nsourceline_: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.sourceline \"Link to this definition\")\n\nsourcepos_: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.sourcepos \"Link to this definition\")\n\n_property_ string_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.string \"Link to this definition\")\n\nConvenience property to get the single string within this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n, assuming there is just one.\n\nReturns:\n\nIf this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n has a single child that's a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n, the return value is that string. If this element has one child [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n, the return value is that child's [`Tag.string`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.string \"bs4.element.Tag.string\")\n, recursively. If this [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n has no children, or has more than one child, the return value is `None`.\n\nIf this property is unexpectedly returning `None` for you, it's probably because your [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n has more than one thing inside it.\n\n_property_ strings_: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.strings \"Link to this definition\")\n\nYield all strings of certain classes, possibly stripping them.\n\nParameters:\n\n*   **strip** -- If True, all strings will be stripped before being yielded.\n    \n*   **types** -- A tuple of NavigableString subclasses. Any strings of a subclass not found in this list will be ignored. By default, the subclasses considered are the ones found in self.interesting\\_string\\_types. If that's not specified, only NavigableString and CData objects will be considered. That means no comments, processing instructions, etc.\n    \n\nunwrap() → [Self](https://docs.python.org/3/library/typing.html#typing.Self \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.unwrap \"Link to this definition\")\n\nReplace this [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n with its contents.\n\nReturns:\n\nThis object, no longer part of the tree.\n\n_class_ bs4.element.TemplateString(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.TemplateString \"Link to this definition\")\n\nBases: [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n\nA [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n representing a string found inside an [HTML <template> tag](https://html.spec.whatwg.org/multipage/scripting.html#the-template-element)\n embedded in a larger document.\n\nUsed to distinguish such strings from the main body of the document.\n\n_class_ bs4.element.XMLAttributeDict[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.XMLAttributeDict \"Link to this definition\")\n\nBases: [`AttributeDict`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeDict \"bs4.element.AttributeDict\")\n\nA dictionary for holding a Tag's attributes, which processes incoming values for consistency with the HTML spec.\n\n_class_ bs4.element.XMLProcessingInstruction(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.XMLProcessingInstruction \"Link to this definition\")\n\nBases: [`ProcessingInstruction`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction \"bs4.element.ProcessingInstruction\")\n\nAn [XML processing instruction](https://www.w3.org/TR/REC-xml/#sec-pi)\n.\n\nPREFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '<?'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.XMLProcessingInstruction.PREFIX \"Link to this definition\")\n\nA string prepended to the body of the 'real' string when formatting it as part of a document, such as the '<!--' in an HTML comment.\n\nSUFFIX_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= '?>'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.XMLProcessingInstruction.SUFFIX \"Link to this definition\")\n\nA string appended to the body of the 'real' string when formatting it as part of a document, such as the '-->' in an HTML comment.\n\nbs4.element.nonwhitespace\\_re_: Pattern\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]_ _\\= re.compile('\\\\\\\\S+')_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.nonwhitespace_re \"Link to this definition\")\n\nA regular expression that can be used to split on whitespace.\n\nbs4.filter module[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.filter \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------------------------------------\n\n_class_ bs4.filter.AttributeValueMatchRule(_string: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _pattern: [\\_RegularExpressionProtocol](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol \"bs4._typing._RegularExpressionProtocol\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _function: [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _present: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _exclude\\_everything: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.AttributeValueMatchRule \"Link to this definition\")\n\nBases: [`MatchRule`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule \"bs4.filter.MatchRule\")\n\nA MatchRule implementing the rules for matches against attribute value.\n\nfunction_: [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\n\\[\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.AttributeValueMatchRule.function \"Link to this definition\")\n\n_class_ bs4.filter.ElementFilter(_match\\_function: [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\n\\[\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\], [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter \"Link to this definition\")\n\nBases: [`object`](https://docs.python.org/3/library/functions.html#object \"(in Python v3.13)\")\n\n[`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter \"bs4.filter.ElementFilter\")\n encapsulates the logic necessary to decide:\n\n1\\. whether a [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n (a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#Tag \"Tag\")\n or a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\n) matches a user-specified query.\n\n2\\. whether a given sequence of markup found during initial parsing should be turned into a [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n at all, or simply discarded.\n\nThe base class is the simplest [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter \"bs4.filter.ElementFilter\")\n. By default, it matches everything and allows all markup to become [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n objects. You can make it more selective by passing in a user-defined match function, or defining a subclass.\n\nMost users of Beautiful Soup will never need to use [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter \"bs4.filter.ElementFilter\")\n, or its more capable subclass [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer \"bs4.filter.SoupStrainer\")\n. Instead, they will use methods like `Tag.find()`, which will convert their arguments into [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer \"bs4.filter.SoupStrainer\")\n objects and run them against the tree.\n\nHowever, if you find yourself wanting to treat the arguments to Beautiful Soup's find\\_\\*() methods as first-class objects, those objects will be [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer \"bs4.filter.SoupStrainer\")\n objects. You can create them yourself and then make use of functions like [`ElementFilter.filter()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.filter \"bs4.filter.ElementFilter.filter\")\n.\n\nallow\\_string\\_creation(_string: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.allow_string_creation \"Link to this definition\")\n\nBased on the content of a string, see whether this [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter \"bs4.filter.ElementFilter\")\n will allow a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\n object based on this string to be added to the parse tree.\n\nBy default, all strings are processed into [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\n objects. To change this, subclass [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter \"bs4.filter.ElementFilter\")\n.\n\nParameters:\n\n**str** -- The string under consideration.\n\nallow\\_tag\\_creation(_nsprefix: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_, _name: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _attrs: \\_RawAttributeValues | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.allow_tag_creation \"Link to this definition\")\n\nBased on the name and attributes of a tag, see whether this [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter \"bs4.filter.ElementFilter\")\n will allow a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#Tag \"Tag\")\n object to even be created.\n\nBy default, all tags are parsed. To change this, subclass [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter \"bs4.filter.ElementFilter\")\n.\n\nParameters:\n\n*   **name** -- The name of the prospective tag.\n    \n*   **attrs** -- The attributes of the prospective tag.\n    \n\n_property_ excludes\\_everything_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.excludes_everything \"Link to this definition\")\n\nDoes this [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter \"bs4.filter.ElementFilter\")\n obviously exclude everything? If so, Beautiful Soup will issue a warning if you try to use it when parsing a document.\n\nThe [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter \"bs4.filter.ElementFilter\")\n might turn out to exclude everything even if this returns [`False`](https://docs.python.org/3/library/constants.html#False \"(in Python v3.13)\")\n, but it won't exclude everything in an obvious way.\n\nThe base [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter \"bs4.filter.ElementFilter\")\n implementation excludes things based on a match function we can't inspect, so excludes\\_everything is always false.\n\nfilter(_generator: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_) → [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n | [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\\\n | [NavigableString](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.filter \"Link to this definition\")\n\nThe most generic search method offered by Beautiful Soup.\n\nActs like Python's built-in [`filter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.filter \"bs4.filter.ElementFilter.filter\")\n, using [`ElementFilter.match`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.match \"bs4.filter.ElementFilter.match\")\n as the filtering function.\n\nfind(_generator: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_) → [PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n | [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n | [NavigableString](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.find \"Link to this definition\")\n\nA lower-level equivalent of `Tag.find()`.\n\nYou can pass in your own generator for iterating over [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n objects. The first one that matches this [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter \"bs4.filter.ElementFilter\")\n will be returned.\n\nParameters:\n\n**generator** -- A way of iterating over [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n objects.\n\nfind\\_all(_generator: [Iterator](https://docs.python.org/3/library/typing.html#typing.Iterator \"(in Python v3.13)\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\]_, _limit: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_) → [ResultSet](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ResultSet \"bs4.element.ResultSet\")\n\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n | [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\\\n | [NavigableString](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString \"bs4.element.NavigableString\")\\\n\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.find_all \"Link to this definition\")\n\nA lower-level equivalent of `Tag.find_all()`.\n\nYou can pass in your own generator for iterating over [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n objects. Only elements that match this [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter \"bs4.filter.ElementFilter\")\n will be returned in the `ResultSet`.\n\nParameters:\n\n*   **generator** -- A way of iterating over [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n     objects.\n    \n*   **limit** -- Stop looking after finding this many results.\n    \n\n_property_ includes\\_everything_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.includes_everything \"Link to this definition\")\n\nDoes this [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter \"bs4.filter.ElementFilter\")\n obviously include everything? If so, the filter process can be made much faster.\n\nThe [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter \"bs4.filter.ElementFilter\")\n might turn out to include everything even if this returns [`False`](https://docs.python.org/3/library/constants.html#False \"(in Python v3.13)\")\n, but it won't include everything in an obvious way.\n\nThe base [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter \"bs4.filter.ElementFilter\")\n implementation includes things based on the match function, so includes\\_everything is only true if there is no match function.\n\nmatch(_element: [PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n_, _\\_known\\_rules: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= False_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.match \"Link to this definition\")\n\nDoes the given PageElement match the rules set down by this ElementFilter?\n\nThe base implementation delegates to the function passed in to the constructor.\n\nParameters:\n\n**\\_known\\_rules** -- Defined for compatibility with\n\nSoupStrainer.\\_match(). Used more for consistency than because we need the performance optimization.\n\nmatch\\_function_: [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\n\\[\\[[PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\\\n\\], [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.match_function \"Link to this definition\")\n\n_class_ bs4.filter.MatchRule(_string: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _pattern: [\\_RegularExpressionProtocol](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol \"bs4._typing._RegularExpressionProtocol\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _function: [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _present: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _exclude\\_everything: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule \"Link to this definition\")\n\nBases: [`object`](https://docs.python.org/3/library/functions.html#object \"(in Python v3.13)\")\n\nEach MatchRule encapsulates the logic behind a single argument passed in to one of the Beautiful Soup find\\* methods.\n\nexclude\\_everything_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule.exclude_everything \"Link to this definition\")\n\nmatches\\_string(_string: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule.matches_string \"Link to this definition\")\n\npattern_: [\\_RegularExpressionProtocol](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol \"bs4._typing._RegularExpressionProtocol\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule.pattern \"Link to this definition\")\n\npresent_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule.present \"Link to this definition\")\n\nstring_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule.string \"Link to this definition\")\n\n_class_ bs4.filter.SoupStrainer(_name: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n | [Pattern](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\n\\[\\[[Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\\\n\\], [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\] | [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n | [Pattern](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\\\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n | [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\\\n\\[\\[[Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\\\n\\], [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\]\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _attrs: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n | [Pattern](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\\\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n | [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\\\n\\[\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\] | [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\\\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n | [Pattern](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\\\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n | [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\\\n\\[\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\]\\]\\] \\= {}_, _string: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n | [Pattern](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\n\\[\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\] | [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n | [Pattern](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\\\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n | [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\\\n\\[\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\]\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _\\*\\*kwargs: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n | [Pattern](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\n\\[\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\] | [Iterable](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n | [Pattern](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\\\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n | [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\\\n\\[\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\]\\]_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer \"Link to this definition\")\n\nBases: [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter \"bs4.filter.ElementFilter\")\n\nThe [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter \"bs4.filter.ElementFilter\")\n subclass used internally by Beautiful Soup.\n\nA [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer \"bs4.filter.SoupStrainer\")\n encapsulates the logic necessary to perform the kind of matches supported by methods such as `Tag.find()`. [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer \"bs4.filter.SoupStrainer\")\n objects are primarily created internally, but you can create one yourself and pass it in as `parse_only` to the [`BeautifulSoup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup \"bs4.BeautifulSoup\")\n constructor, to parse a subset of a large document.\n\nInternally, [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer \"bs4.filter.SoupStrainer\")\n objects work by converting the constructor arguments into [`MatchRule`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule \"bs4.filter.MatchRule\")\n objects. Incoming tags/markup are matched against those rules.\n\nParameters:\n\n*   **name** -- One or more restrictions on the tags found in a document.\n    \n*   **attrs** -- A dictionary that maps attribute names to restrictions on tags that use those attributes.\n    \n*   **string** -- One or more restrictions on the strings found in a document.\n    \n*   **kwargs** -- A dictionary that maps attribute names to restrictions on tags that use those attributes. These restrictions are additive to any specified in `attrs`.\n    \n\nallow\\_string\\_creation(_string: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.allow_string_creation \"Link to this definition\")\n\nBased on the content of a markup string, see whether this [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer \"bs4.filter.SoupStrainer\")\n will allow it to be instantiated as a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\n object, or whether it should be ignored.\n\nallow\\_tag\\_creation(_nsprefix: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_, _name: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _attrs: \\_RawAttributeValues | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.allow_tag_creation \"Link to this definition\")\n\nBased on the name and attributes of a tag, see whether this [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer \"bs4.filter.SoupStrainer\")\n will allow a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#Tag \"Tag\")\n object to even be created.\n\nParameters:\n\n*   **name** -- The name of the prospective tag.\n    \n*   **attrs** -- The attributes of the prospective tag.\n    \n\nattribute\\_rules_: [Dict](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [List](https://docs.python.org/3/library/typing.html#typing.List \"(in Python v3.13)\")\\\n\\[[AttributeValueMatchRule](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.AttributeValueMatchRule \"bs4.filter.AttributeValueMatchRule\")\\\n\\]\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.attribute_rules \"Link to this definition\")\n\n_property_ excludes\\_everything_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.excludes_everything \"Link to this definition\")\n\nCheck whether the provided rules will obviously exclude everything. (They might exclude everything even if this returns [`False`](https://docs.python.org/3/library/constants.html#False \"(in Python v3.13)\")\n, but not in an obvious way.)\n\n_property_ includes\\_everything_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.includes_everything \"Link to this definition\")\n\nCheck whether the provided rules will obviously include everything. (They might include everything even if this returns [`False`](https://docs.python.org/3/library/constants.html#False \"(in Python v3.13)\")\n, but not in an obvious way.)\n\nmatch(_element: [PageElement](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n_, _\\_known\\_rules: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= False_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.match \"Link to this definition\")\n\nDoes the given [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n match the rules set down by this [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer \"bs4.filter.SoupStrainer\")\n?\n\nThe find\\_\\* methods rely heavily on this method to find matches.\n\nParameters:\n\n*   **element** -- A [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n    .\n    \n*   **\\_known\\_rules** -- Set to true in the common case where we already checked and found at least one rule in this SoupStrainer that might exclude a PageElement. Without this, we need to check .includes\\_everything every time, just to be safe.\n    \n\nReturns:\n\n[`True`](https://docs.python.org/3/library/constants.html#True \"(in Python v3.13)\")\n if the element matches this [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer \"bs4.filter.SoupStrainer\")\n's rules; [`False`](https://docs.python.org/3/library/constants.html#False \"(in Python v3.13)\")\n otherwise.\n\nmatches\\_any\\_string\\_rule(_string: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.matches_any_string_rule \"Link to this definition\")\n\nSee whether the content of a string matches any of this [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer \"bs4.filter.SoupStrainer\")\n's string rules.\n\nmatches\\_tag(_tag: [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.matches_tag \"Link to this definition\")\n\nDo the rules of this [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer \"bs4.filter.SoupStrainer\")\n trigger a match against the given [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#Tag \"Tag\")\n?\n\nIf the [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer \"bs4.filter.SoupStrainer\")\n has any [`TagNameMatchRule`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.TagNameMatchRule \"bs4.filter.TagNameMatchRule\")\n, at least one must match the [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#Tag \"Tag\")\n or its [`Tag.name`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#Tag.name \"Tag.name\")\n.\n\nIf there are any [`AttributeValueMatchRule`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.AttributeValueMatchRule \"bs4.filter.AttributeValueMatchRule\")\n for a given attribute, at least one of them must match the attribute value.\n\nIf there are any [`StringMatchRule`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.StringMatchRule \"bs4.filter.StringMatchRule\")\n, at least one must match, but a [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer \"bs4.filter.SoupStrainer\")\n that _only_ contains [`StringMatchRule`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.StringMatchRule \"bs4.filter.StringMatchRule\")\n cannot match a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#Tag \"Tag\")\n, only a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\n.\n\nname\\_rules_: [List](https://docs.python.org/3/library/typing.html#typing.List \"(in Python v3.13)\")\n\\[[TagNameMatchRule](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.TagNameMatchRule \"bs4.filter.TagNameMatchRule\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.name_rules \"Link to this definition\")\n\nsearch\\_tag(_name: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _attrs: \\_RawAttributeValues | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.search_tag \"Link to this definition\")\n\nA less elegant version of [`allow_tag_creation`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.allow_tag_creation \"bs4.filter.SoupStrainer.allow_tag_creation\")\n. Deprecated as of 4.13.0\n\nstring\\_rules_: [List](https://docs.python.org/3/library/typing.html#typing.List \"(in Python v3.13)\")\n\\[[StringMatchRule](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.StringMatchRule \"bs4.filter.StringMatchRule\")\\\n\\]_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.string_rules \"Link to this definition\")\n\n_class_ bs4.filter.StringMatchRule(_string: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _pattern: [\\_RegularExpressionProtocol](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol \"bs4._typing._RegularExpressionProtocol\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _function: [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _present: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _exclude\\_everything: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.StringMatchRule \"Link to this definition\")\n\nBases: [`MatchRule`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule \"bs4.filter.MatchRule\")\n\nA MatchRule implementing the rules for matches against a NavigableString.\n\nfunction_: [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\n\\[\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.StringMatchRule.function \"Link to this definition\")\n\n_class_ bs4.filter.TagNameMatchRule(_string: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _pattern: [\\_RegularExpressionProtocol](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol \"bs4._typing._RegularExpressionProtocol\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _function: [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _present: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _exclude\\_everything: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.TagNameMatchRule \"Link to this definition\")\n\nBases: [`MatchRule`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule \"bs4.filter.MatchRule\")\n\nA MatchRule implementing the rules for matches against tag name.\n\nfunction_: [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\n\\[\\[[Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\\\n\\], [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.TagNameMatchRule.function \"Link to this definition\")\n\nmatches\\_tag(_tag: [Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n_) → [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.TagNameMatchRule.matches_tag \"Link to this definition\")\n\nbs4.formatter module[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.formatter \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------------------------------------------\n\n_class_ bs4.formatter.Formatter(_language: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _entity\\_substitution: [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\n\\[\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _void\\_element\\_close\\_prefix: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n \\= '/'_, _cdata\\_containing\\_tags: [Set](https://docs.python.org/3/library/typing.html#typing.Set \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _empty\\_attributes\\_are\\_booleans: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= False_, _indent: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n \\= 1_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter \"Link to this definition\")\n\nBases: [`EntitySubstitution`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution \"bs4.dammit.EntitySubstitution\")\n\nDescribes a strategy to use when outputting a parse tree to a string.\n\nSome parts of this strategy come from the distinction between HTML4, HTML5, and XML. Others are configurable by the user.\n\nFormatters are passed in as the [`formatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.formatter \"bs4.formatter\")\n argument to methods like [`bs4.element.Tag.encode`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.encode \"bs4.element.Tag.encode\")\n. Most people won't need to think about formatters, and most people who need to think about them can pass in one of these predefined strings as [`formatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.formatter \"bs4.formatter\")\n rather than making a new Formatter object:\n\nFor HTML documents:\n\n*   'html' - HTML entity substitution for generic HTML documents. (default)\n    \n*   'html5' - HTML entity substitution for HTML5 documents, as\n    \n    well as some optimizations in the way tags are rendered.\n    \n*   'html5-4.12.0' - The version of the 'html5' formatter used prior to\n    \n    Beautiful Soup 4.13.0.\n    \n*   'minimal' - Only make the substitutions necessary to guarantee\n    \n    valid HTML.\n    \n*   None - Do not perform any substitution. This will be faster\n    \n    but may result in invalid markup.\n    \n\nFor XML documents:\n\n*   'html' - Entity substitution for XHTML documents.\n    \n*   'minimal' - Only make the substitutions necessary to guarantee\n    \n    valid XML. (default)\n    \n*   None - Do not perform any substitution. This will be faster\n    \n    but may result in invalid markup.\n    \n\nHTML_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= 'html'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.HTML \"Link to this definition\")\n\nConstant name denoting HTML markup\n\nHTML\\_DEFAULTS_: Dict\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, Set\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]\\]_ _\\= {'cdata\\_containing\\_tags': {'script', 'style'}}_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.HTML_DEFAULTS \"Link to this definition\")\n\nDefault values for the various constructor options when the markup language is HTML.\n\nXML_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_ _\\= 'xml'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.XML \"Link to this definition\")\n\nConstant name denoting XML markup\n\nattribute\\_value(_value: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.attribute_value \"Link to this definition\")\n\nProcess the value of an attribute.\n\nParameters:\n\n**ns** -- A string.\n\nReturns:\n\nA string with certain characters replaced by named or numeric entities.\n\nattributes(_tag: [bs4.element.Tag](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag \"bs4.element.Tag\")\n_) → Iterable\\[Tuple\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, \\_AttributeValue | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\\\n\\]\\][¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.attributes \"Link to this definition\")\n\nReorder a tag's attributes however you want.\n\nBy default, attributes are sorted alphabetically. This makes behavior consistent between Python 2 and Python 3, and preserves backwards compatibility with older versions of Beautiful Soup.\n\nIf [`empty_attributes_are_booleans`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.empty_attributes_are_booleans \"bs4.formatter.Formatter.empty_attributes_are_booleans\")\n is True, then attributes whose values are set to the empty string will be treated as boolean attributes.\n\nempty\\_attributes\\_are\\_booleans_: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.empty_attributes_are_booleans \"Link to this definition\")\n\nIf this is set to true by the constructor, then attributes whose values are sent to the empty string will be treated as HTML boolean attributes. (Attributes whose value is None are always rendered this way.)\n\nsubstitute(_ns: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.substitute \"Link to this definition\")\n\nProcess a string that needs to undergo entity substitution. This may be a string encountered in an attribute value or as text.\n\nParameters:\n\n**ns** -- A string.\n\nReturns:\n\nThe same string but with certain characters replaced by named or numeric entities.\n\n_class_ bs4.formatter.HTMLFormatter(_entity\\_substitution: [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\n\\[\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _void\\_element\\_close\\_prefix: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n \\= '/'_, _cdata\\_containing\\_tags: [Set](https://docs.python.org/3/library/typing.html#typing.Set \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _empty\\_attributes\\_are\\_booleans: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= False_, _indent: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n \\= 1_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.HTMLFormatter \"Link to this definition\")\n\nBases: [`Formatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter \"bs4.formatter.Formatter\")\n\nA generic Formatter for HTML.\n\nREGISTRY_: Dict\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\\\n, [HTMLFormatter](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.HTMLFormatter \"bs4.formatter.HTMLFormatter\")\\\n\\]_ _\\= {'html': <bs4.formatter.HTMLFormatter object>, 'html5': <bs4.formatter.HTMLFormatter object>, 'html5-4.12': <bs4.formatter.HTMLFormatter object>, 'minimal': <bs4.formatter.HTMLFormatter object>, None: <bs4.formatter.HTMLFormatter object>}_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.HTMLFormatter.REGISTRY \"Link to this definition\")\n\n_class_ bs4.formatter.XMLFormatter(_entity\\_substitution: [Callable](https://docs.python.org/3/library/typing.html#typing.Callable \"(in Python v3.13)\")\n\\[\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _void\\_element\\_close\\_prefix: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n \\= '/'_, _cdata\\_containing\\_tags: [Set](https://docs.python.org/3/library/typing.html#typing.Set \"(in Python v3.13)\")\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\] | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n \\= None_, _empty\\_attributes\\_are\\_booleans: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= False_, _indent: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n | [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n \\= 1_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.XMLFormatter \"Link to this definition\")\n\nBases: [`Formatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter \"bs4.formatter.Formatter\")\n\nA generic Formatter for XML.\n\nREGISTRY_: Dict\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\\\n, [XMLFormatter](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.XMLFormatter \"bs4.formatter.XMLFormatter\")\\\n\\]_ _\\= {'html': <bs4.formatter.XMLFormatter object>, 'minimal': <bs4.formatter.XMLFormatter object>, None: <bs4.formatter.XMLFormatter object>}_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.XMLFormatter.REGISTRY \"Link to this definition\")\n\nbs4.\\_typing module[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4._typing \"Link to this heading\")\n\n-------------------------------------------------------------------------------------------------------------------------------------\n\nbs4.\\_typing.\\_AttributeValues[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._AttributeValues \"Link to this definition\")\n\nA dictionary of names to `_AttributeValue` objects. This is what a tag's attributes look like after processing.\n\nalias of [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [`Union`](https://docs.python.org/3/library/typing.html#typing.Union \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, `AttributeValueList`\\]\\]\n\nbs4.\\_typing.\\_BaseStrainable[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._BaseStrainable \"Link to this definition\")\n\nEither a tag name, an attribute value or a string can be matched against a string, bytestring, regular expression, or a boolean.\n\nalias of [`Union`](https://docs.python.org/3/library/typing.html#typing.Union \"(in Python v3.13)\")\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n, [`Pattern`](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\]\n\nbs4.\\_typing.\\_BaseStrainableAttribute[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._BaseStrainableAttribute \"Link to this definition\")\n\nA tag's attribute vgalue can be matched either with the [`_BaseStrainable`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._BaseStrainable \"bs4._typing._BaseStrainable\")\n options, or using a function that takes that value as its sole argument.\n\nalias of [`Union`](https://docs.python.org/3/library/typing.html#typing.Union \"(in Python v3.13)\")\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n, [`Pattern`](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n, `Callable`\\[\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\]\\]\n\nbs4.\\_typing.\\_BaseStrainableElement[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._BaseStrainableElement \"Link to this definition\")\n\nA tag can be matched either with the [`_BaseStrainable`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._BaseStrainable \"bs4._typing._BaseStrainable\")\n options, or using a function that takes the [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#Tag \"Tag\")\n as its sole argument.\n\nalias of [`Union`](https://docs.python.org/3/library/typing.html#typing.Union \"(in Python v3.13)\")\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n, [`Pattern`](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n, `Callable`\\[\\[[`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#Tag \"Tag\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\]\\]\n\nbs4.\\_typing.\\_Encoding[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._Encoding \"Link to this definition\")\n\nA data encoding.\n\nbs4.\\_typing.\\_Encodings[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._Encodings \"Link to this definition\")\n\nOne or more data encodings.\n\nalias of [`Iterable`](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]\n\nbs4.\\_typing.\\_IncomingMarkup[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._IncomingMarkup \"Link to this definition\")\n\nThe rawest form of markup: either a string, bytestring, or an open filehandle.\n\nalias of [`Union`](https://docs.python.org/3/library/typing.html#typing.Union \"(in Python v3.13)\")\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n, [`IO`](https://docs.python.org/3/library/typing.html#typing.IO \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`IO`](https://docs.python.org/3/library/typing.html#typing.IO \"(in Python v3.13)\")\\\n\\[[`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n\\]\\]\n\nbs4.\\_typing.\\_InsertableElement[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._InsertableElement \"Link to this definition\")\n\nA number of tree manipulation methods can take either a [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement \"bs4.element.PageElement\")\n or a normal Python string (which will be converted to a [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\n).\n\nalias of [`Union`](https://docs.python.org/3/library/typing.html#typing.Union \"(in Python v3.13)\")\n\\[`PageElement`, [`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]\n\nbs4.\\_typing.\\_InvertedNamespaceMapping[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._InvertedNamespaceMapping \"Link to this definition\")\n\nA mapping of namespace URLs to prefixes\n\nalias of [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]\n\nbs4.\\_typing.\\_NamespaceMapping[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._NamespaceMapping \"Link to this definition\")\n\nA mapping of prefixes to namespace URLs.\n\nalias of [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\]\n\nbs4.\\_typing.\\_NamespacePrefix[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._NamespacePrefix \"Link to this definition\")\n\nThe prefix for an XML namespace.\n\nbs4.\\_typing.\\_NamespaceURL[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._NamespaceURL \"Link to this definition\")\n\nThe URL of an XML namespace\n\nbs4.\\_typing.\\_OneElement[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._OneElement \"Link to this definition\")\n\nMany Beautiful soup methods return a PageElement or an ResultSet of PageElements. A PageElement is either a Tag or a NavigableString. These convenience aliases make it easier for IDE users to see which methods are available on the objects they're dealing with.\n\nalias of [`Union`](https://docs.python.org/3/library/typing.html#typing.Union \"(in Python v3.13)\")\n\\[`PageElement`, [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#Tag \"Tag\")\\\n, [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#NavigableString \"NavigableString\")\\\n\\]\n\nbs4.\\_typing.\\_PageElementMatchFunction[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._PageElementMatchFunction \"Link to this definition\")\n\nA function that takes a PageElement and returns a yes-or-no answer.\n\nalias of `Callable`\\[\\[`PageElement`\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\]\n\nbs4.\\_typing.\\_RawAttributeValue[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RawAttributeValue \"Link to this definition\")\n\nThe value associated with an HTML or XML attribute. This is the relatively unprocessed value Beautiful Soup expects to come from a [`TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n.\n\nbs4.\\_typing.\\_RawAttributeValues_: [TypeAlias](https://docs.python.org/3/library/typing.html#typing.TypeAlias \"(in Python v3.13)\")\n_ _\\= 'Mapping\\[Union\\[str, NamespacedAttribute\\], \\_RawAttributeValue\\]'_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RawAttributeValues \"Link to this definition\")\n\nA dictionary of names to [`_RawAttributeValue`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RawAttributeValue \"bs4._typing._RawAttributeValue\")\n objects. This is how Beautiful Soup expects a [`TreeBuilder`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.builder.html#bs4.builder.TreeBuilder \"bs4.builder.TreeBuilder\")\n to represent a tag's attribute values.\n\nbs4.\\_typing.\\_RawMarkup[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RawMarkup \"Link to this definition\")\n\nMarkup that is in memory but has (potentially) yet to be converted to Unicode.\n\nalias of [`Union`](https://docs.python.org/3/library/typing.html#typing.Union \"(in Python v3.13)\")\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n\\]\n\nbs4.\\_typing.\\_RawOrProcessedAttributeValues[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RawOrProcessedAttributeValues \"Link to this definition\")\n\nThe methods that deal with turning [`_RawAttributeValue`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RawAttributeValue \"bs4._typing._RawAttributeValue\")\n into `_AttributeValue` may be called several times, even after the values are already processed (e.g. when cloning a tag), so they need to be able to acommodate both possibilities.\n\nalias of [`Union`](https://docs.python.org/3/library/typing.html#typing.Union \"(in Python v3.13)\")\n\\[`Mapping[Union[str, NamespacedAttribute], _RawAttributeValue]`, [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [`Union`](https://docs.python.org/3/library/typing.html#typing.Union \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, `AttributeValueList`\\]\\]\\]\n\n_class_ bs4.\\_typing.\\_RegularExpressionProtocol(_\\*args_, _\\*\\*kwargs_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol \"Link to this definition\")\n\nBases: [`Protocol`](https://docs.python.org/3/library/typing.html#typing.Protocol \"(in Python v3.13)\")\n\nA protocol object which can accept either Python's built-in [`re.Pattern`](https://docs.python.org/3/library/re.html#re.Pattern \"(in Python v3.13)\")\n objects, or the similar `Regex` objects defined by the third-party `regex` package.\n\n\\_abc\\_impl _\\= <\\_abc.\\_abc\\_data object>_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol._abc_impl \"Link to this definition\")\n\n\\_is\\_protocol _\\= True_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol._is_protocol \"Link to this definition\")\n\n\\_is\\_runtime\\_protocol _\\= True_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol._is_runtime_protocol \"Link to this definition\")\n\n_property_ pattern_: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol.pattern \"Link to this definition\")\n\nsearch(_string: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _pos: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= Ellipsis_, _endpos: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= Ellipsis_) → [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.13)\")\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol.search \"Link to this definition\")\n\nbs4.\\_typing.\\_StrainableAttribute[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._StrainableAttribute \"Link to this definition\")\n\nAn attribute value can be matched using either a single criterion or a list of criteria.\n\nalias of [`Union`](https://docs.python.org/3/library/typing.html#typing.Union \"(in Python v3.13)\")\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n, [`Pattern`](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n, `Callable`\\[\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\], [`Iterable`](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\\\n\\[[`Union`](https://docs.python.org/3/library/typing.html#typing.Union \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n, [`Pattern`](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n, `Callable`\\[\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\]\\]\\]\\]\n\nbs4.\\_typing.\\_StrainableAttributes[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._StrainableAttributes \"Link to this definition\")\n\nA dictionary may be used to match against multiple attribute vlaues at once.\n\nalias of [`Dict`](https://docs.python.org/3/library/typing.html#typing.Dict \"(in Python v3.13)\")\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [`Union`](https://docs.python.org/3/library/typing.html#typing.Union \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n, [`Pattern`](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n, `Callable`\\[\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\], [`Iterable`](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\\\n\\[[`Union`](https://docs.python.org/3/library/typing.html#typing.Union \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n, [`Pattern`](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n, `Callable`\\[\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\]\\]\\]\\]\\]\n\nbs4.\\_typing.\\_StrainableElement[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._StrainableElement \"Link to this definition\")\n\nA tag can be matched using either a single criterion or a list of criteria.\n\nalias of [`Union`](https://docs.python.org/3/library/typing.html#typing.Union \"(in Python v3.13)\")\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n, [`Pattern`](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n, `Callable`\\[\\[[`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#Tag \"Tag\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\], [`Iterable`](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\\\n\\[[`Union`](https://docs.python.org/3/library/typing.html#typing.Union \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n, [`Pattern`](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n, `Callable`\\[\\[[`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#Tag \"Tag\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\]\\]\\]\\]\n\nbs4.\\_typing.\\_StrainableString[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._StrainableString \"Link to this definition\")\n\nAn string can be matched using the same techniques as an attribute value.\n\nalias of [`Union`](https://docs.python.org/3/library/typing.html#typing.Union \"(in Python v3.13)\")\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n, [`Pattern`](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n, `Callable`\\[\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\], [`Iterable`](https://docs.python.org/3/library/typing.html#typing.Iterable \"(in Python v3.13)\")\\\n\\[[`Union`](https://docs.python.org/3/library/typing.html#typing.Union \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"(in Python v3.13)\")\\\n, [`Pattern`](https://docs.python.org/3/library/typing.html#typing.Pattern \"(in Python v3.13)\")\\\n\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n, `Callable`\\[\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\]\\]\\]\\]\n\nbs4.\\_typing.\\_StringMatchFunction[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._StringMatchFunction \"Link to this definition\")\n\nA function that takes a single string and returns a yes-or-no answer. An [`AttributeValueMatchRule`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.AttributeValueMatchRule \"bs4.filter.AttributeValueMatchRule\")\n expects this kind of function, if you're going to pass it a function. So does a [`StringMatchRule`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.StringMatchRule \"bs4.filter.StringMatchRule\")\n.\n\nalias of `Callable`\\[\\[[`str`](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\]\n\nbs4.\\_typing.\\_TagMatchFunction[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._TagMatchFunction \"Link to this definition\")\n\nA function that takes a [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#Tag \"Tag\")\n and returns a yes-or-no answer. A [`TagNameMatchRule`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.TagNameMatchRule \"bs4.filter.TagNameMatchRule\")\n expects this kind of function, if you're going to pass it a function.\n\nalias of `Callable`\\[\\[[`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html#Tag \"Tag\")\\\n\\], [`bool`](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\\\n\\]\n\nbs4.diagnose module[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.diagnose \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------------------------------------------\n\nDiagnostic functions, mainly for use when doing tech support.\n\n_class_ bs4.diagnose.AnnouncingParser(_\\*_, _convert\\_charrefs\\=True_)[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser \"Link to this definition\")\n\nBases: [`HTMLParser`](https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser \"(in Python v3.13)\")\n\nSubclass of HTMLParser that announces parse events, without doing anything else.\n\nYou can use this to get a picture of how html.parser sees a given document. The easiest way to do this is to call [`htmlparser_trace`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.htmlparser_trace \"bs4.diagnose.htmlparser_trace\")\n.\n\nhandle\\_charref(_name: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_charref \"Link to this definition\")\n\nhandle\\_comment(_data: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_comment \"Link to this definition\")\n\nhandle\\_data(_data: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_data \"Link to this definition\")\n\nhandle\\_decl(_data: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_decl \"Link to this definition\")\n\nhandle\\_endtag(_name: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _check\\_already\\_closed: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= True_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_endtag \"Link to this definition\")\n\nhandle\\_entityref(_name: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_entityref \"Link to this definition\")\n\nhandle\\_pi(_data: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_pi \"Link to this definition\")\n\nhandle\\_starttag(_name: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_, _attrs: [List](https://docs.python.org/3/library/typing.html#typing.List \"(in Python v3.13)\")\n\\[[Tuple](https://docs.python.org/3/library/typing.html#typing.Tuple \"(in Python v3.13)\")\\\n\\[[str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n, [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\\\n | [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\\\n\\]\\]_, _handle\\_empty\\_element: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= True_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_starttag \"Link to this definition\")\n\nunknown\\_decl(_data: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.unknown_decl \"Link to this definition\")\n\nbs4.diagnose.benchmark\\_parsers(_num\\_elements: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 100000_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.benchmark_parsers \"Link to this definition\")\n\nVery basic head-to-head performance benchmark.\n\nbs4.diagnose.diagnose(_data: \\_IncomingMarkup_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.diagnose \"Link to this definition\")\n\nDiagnostic suite for isolating common problems.\n\nParameters:\n\n**data** -- Some markup that needs to be explained.\n\nReturns:\n\nNone; diagnostics are printed to standard output.\n\nbs4.diagnose.htmlparser\\_trace(_data: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.htmlparser_trace \"Link to this definition\")\n\nPrint out the HTMLParser events that occur during parsing.\n\nThis lets you see how HTMLParser parses a document when no Beautiful Soup code is running.\n\nParameters:\n\n**data** -- Some markup.\n\nbs4.diagnose.lxml\\_trace(_data: \\_IncomingMarkup_, _html: [bool](https://docs.python.org/3/library/functions.html#bool \"(in Python v3.13)\")\n \\= True_, _\\*\\*kwargs: [Any](https://docs.python.org/3/library/typing.html#typing.Any \"(in Python v3.13)\")\n_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.lxml_trace \"Link to this definition\")\n\nPrint out the lxml events that occur during parsing.\n\nThis lets you see how lxml parses a document when no Beautiful Soup code is running. You can use this to determine whether an lxml-specific problem is in Beautiful Soup's lxml tree builders or in lxml itself.\n\nParameters:\n\n*   **data** -- Some markup.\n    \n*   **html** -- If True, markup will be parsed with lxml's HTML parser. if False, lxml's XML parser will be used.\n    \n\nbs4.diagnose.profile(_num\\_elements: [int](https://docs.python.org/3/library/functions.html#int \"(in Python v3.13)\")\n \\= 100000_, _parser: [str](https://docs.python.org/3/library/stdtypes.html#str \"(in Python v3.13)\")\n \\= 'lxml'_) → [None](https://docs.python.org/3/library/constants.html#None \"(in Python v3.13)\")\n[¶](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.profile \"Link to this definition\")\n\nUse Python's profiler on a randomly generated document.\n\n### [Table of Contents](https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.html)\n\n*   [bs4 package](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#)\n    *   [Module contents](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4)\n        *   [`AttributeResemblesVariableWarning`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.AttributeResemblesVariableWarning)\n            *   [`AttributeResemblesVariableWarning.MESSAGE`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.AttributeResemblesVariableWarning.MESSAGE)\n                \n        *   [`BeautifulSoup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup)\n            *   [`BeautifulSoup.ASCII_SPACES`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.ASCII_SPACES)\n                \n            *   [`BeautifulSoup.DEFAULT_BUILDER_FEATURES`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.DEFAULT_BUILDER_FEATURES)\n                \n            *   [`BeautifulSoup.ROOT_TAG_NAME`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.ROOT_TAG_NAME)\n                \n            *   [`BeautifulSoup.contains_replacement_characters`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.contains_replacement_characters)\n                \n            *   [`BeautifulSoup.copy_self()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.copy_self)\n                \n            *   [`BeautifulSoup.declared_html_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.declared_html_encoding)\n                \n            *   [`BeautifulSoup.decode()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.decode)\n                \n            *   [`BeautifulSoup.insert_after()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.insert_after)\n                \n            *   [`BeautifulSoup.insert_before()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.insert_before)\n                \n            *   [`BeautifulSoup.is_xml`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.is_xml)\n                \n            *   [`BeautifulSoup.new_string()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.new_string)\n                \n            *   [`BeautifulSoup.new_tag()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.new_tag)\n                \n            *   [`BeautifulSoup.original_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.original_encoding)\n                \n            *   [`BeautifulSoup.reset()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.reset)\n                \n            *   [`BeautifulSoup.string_container()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.BeautifulSoup.string_container)\n                \n        *   [`CData`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CData)\n            *   [`CData.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CData.PREFIX)\n                \n            *   [`CData.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CData.SUFFIX)\n                \n        *   [`CSS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS)\n            *   [`CSS.closest()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.closest)\n                \n            *   [`CSS.compile()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.compile)\n                \n            *   [`CSS.escape()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.escape)\n                \n            *   [`CSS.filter()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.filter)\n                \n            *   [`CSS.iselect()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.iselect)\n                \n            *   [`CSS.match()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.match)\n                \n            *   [`CSS.select()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.select)\n                \n            *   [`CSS.select_one()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.CSS.select_one)\n                \n        *   [`Comment`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Comment)\n            *   [`Comment.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Comment.PREFIX)\n                \n            *   [`Comment.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Comment.SUFFIX)\n                \n        *   [`Declaration`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Declaration)\n            *   [`Declaration.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Declaration.PREFIX)\n                \n            *   [`Declaration.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Declaration.SUFFIX)\n                \n        *   [`Doctype`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Doctype)\n            *   [`Doctype.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Doctype.PREFIX)\n                \n            *   [`Doctype.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Doctype.SUFFIX)\n                \n            *   [`Doctype.for_name_and_ids()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Doctype.for_name_and_ids)\n                \n        *   [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter)\n            *   [`ElementFilter.allow_string_creation()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.allow_string_creation)\n                \n            *   [`ElementFilter.allow_tag_creation()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.allow_tag_creation)\n                \n            *   [`ElementFilter.excludes_everything`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.excludes_everything)\n                \n            *   [`ElementFilter.filter()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.filter)\n                \n            *   [`ElementFilter.find()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.find)\n                \n            *   [`ElementFilter.find_all()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.find_all)\n                \n            *   [`ElementFilter.includes_everything`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.includes_everything)\n                \n            *   [`ElementFilter.match()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.match)\n                \n            *   [`ElementFilter.match_function`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ElementFilter.match_function)\n                \n        *   [`FeatureNotFound`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.FeatureNotFound)\n            \n        *   [`GuessedAtParserWarning`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.GuessedAtParserWarning)\n            *   [`GuessedAtParserWarning.MESSAGE`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.GuessedAtParserWarning.MESSAGE)\n                \n        *   [`MarkupResemblesLocatorWarning`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.MarkupResemblesLocatorWarning)\n            *   [`MarkupResemblesLocatorWarning.FILENAME_MESSAGE`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.MarkupResemblesLocatorWarning.FILENAME_MESSAGE)\n                \n            *   [`MarkupResemblesLocatorWarning.URL_MESSAGE`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.MarkupResemblesLocatorWarning.URL_MESSAGE)\n                \n        *   [`ParserRejectedMarkup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ParserRejectedMarkup)\n            \n        *   [`ProcessingInstruction`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ProcessingInstruction)\n            *   [`ProcessingInstruction.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ProcessingInstruction.PREFIX)\n                \n            *   [`ProcessingInstruction.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ProcessingInstruction.SUFFIX)\n                \n        *   [`ResultSet`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ResultSet)\n            *   [`ResultSet.source`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.ResultSet.source)\n                \n        *   [`Script`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Script)\n            \n        *   [`StopParsing`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.StopParsing)\n            \n        *   [`Stylesheet`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Stylesheet)\n            \n        *   [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag)\n            *   [`Tag.append()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.append)\n                \n            *   [`Tag.attrs`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.attrs)\n                \n            *   [`Tag.can_be_empty_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.can_be_empty_element)\n                \n            *   [`Tag.cdata_list_attributes`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.cdata_list_attributes)\n                \n            *   [`Tag.children`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.children)\n                \n            *   [`Tag.clear()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.clear)\n                \n            *   [`Tag.contents`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.contents)\n                \n            *   [`Tag.copy_self()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.copy_self)\n                \n            *   [`Tag.css`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.css)\n                \n            *   [`Tag.decode()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.decode)\n                \n            *   [`Tag.decode_contents()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.decode_contents)\n                \n            *   [`Tag.descendants`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.descendants)\n                \n            *   [`Tag.encode()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.encode)\n                \n            *   [`Tag.encode_contents()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.encode_contents)\n                \n            *   [`Tag.extend()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.extend)\n                \n            *   [`Tag.find()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.find)\n                \n            *   [`Tag.find_all()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.find_all)\n                \n            *   [`Tag.get()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.get)\n                \n            *   [`Tag.get_attribute_list()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.get_attribute_list)\n                \n            *   [`Tag.has_attr()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.has_attr)\n                \n            *   [`Tag.index()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.index)\n                \n            *   [`Tag.insert()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.insert)\n                \n            *   [`Tag.interesting_string_types`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.interesting_string_types)\n                \n            *   [`Tag.isSelfClosing()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.isSelfClosing)\n                \n            *   [`Tag.is_empty_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.is_empty_element)\n                \n            *   [`Tag.name`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.name)\n                \n            *   [`Tag.namespace`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.namespace)\n                \n            *   [`Tag.parser_class`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.parser_class)\n                \n            *   [`Tag.prefix`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.prefix)\n                \n            *   [`Tag.preserve_whitespace_tags`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.preserve_whitespace_tags)\n                \n            *   [`Tag.prettify()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.prettify)\n                \n            *   [`Tag.replaceWithChildren()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.replaceWithChildren)\n                \n            *   [`Tag.replace_with_children()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.replace_with_children)\n                \n            *   [`Tag.select()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.select)\n                \n            *   [`Tag.select_one()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.select_one)\n                \n            *   [`Tag.self_and_descendants`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.self_and_descendants)\n                \n            *   [`Tag.smooth()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.smooth)\n                \n            *   [`Tag.sourceline`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.sourceline)\n                \n            *   [`Tag.sourcepos`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.sourcepos)\n                \n            *   [`Tag.string`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.string)\n                \n            *   [`Tag.strings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.strings)\n                \n            *   [`Tag.unwrap()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.Tag.unwrap)\n                \n        *   [`TemplateString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.TemplateString)\n            \n        *   [`UnicodeDammit`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit)\n            *   [`UnicodeDammit.CHARSET_ALIASES`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.CHARSET_ALIASES)\n                \n            *   [`UnicodeDammit.ENCODINGS_WITH_SMART_QUOTES`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.ENCODINGS_WITH_SMART_QUOTES)\n                \n            *   [`UnicodeDammit.MS_CHARS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.MS_CHARS)\n                \n            *   [`UnicodeDammit.WINDOWS_1252_TO_UTF8`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.WINDOWS_1252_TO_UTF8)\n                \n            *   [`UnicodeDammit.contains_replacement_characters`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.contains_replacement_characters)\n                \n            *   [`UnicodeDammit.declared_html_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.declared_html_encoding)\n                \n            *   [`UnicodeDammit.detwingle()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.detwingle)\n                \n            *   [`UnicodeDammit.find_codec()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.find_codec)\n                \n            *   [`UnicodeDammit.markup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.markup)\n                \n            *   [`UnicodeDammit.original_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.original_encoding)\n                \n            *   [`UnicodeDammit.smart_quotes_to`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.smart_quotes_to)\n                \n            *   [`UnicodeDammit.tried_encodings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.tried_encodings)\n                \n            *   [`UnicodeDammit.unicode_markup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnicodeDammit.unicode_markup)\n                \n        *   [`UnusualUsageWarning`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.UnusualUsageWarning)\n            \n        *   [`XMLParsedAsHTMLWarning`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.XMLParsedAsHTMLWarning)\n            *   [`XMLParsedAsHTMLWarning.MESSAGE`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.XMLParsedAsHTMLWarning.MESSAGE)\n                \n    *   [Subpackages](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#subpackages)\n        \n    *   [Submodules](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#submodules)\n        \n    *   [bs4.css module](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.css)\n        *   [`CSS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS)\n            *   [`CSS.closest()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.closest)\n                \n            *   [`CSS.compile()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.compile)\n                \n            *   [`CSS.escape()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.escape)\n                \n            *   [`CSS.filter()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.filter)\n                \n            *   [`CSS.iselect()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.iselect)\n                \n            *   [`CSS.match()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.match)\n                \n            *   [`CSS.select()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.select)\n                \n            *   [`CSS.select_one()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.css.CSS.select_one)\n                \n    *   [bs4.dammit module](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.dammit)\n        *   [`EncodingDetector`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector)\n            *   [`EncodingDetector.chardet_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.chardet_encoding)\n                \n            *   [`EncodingDetector.declared_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.declared_encoding)\n                \n            *   [`EncodingDetector.encodings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.encodings)\n                \n            *   [`EncodingDetector.exclude_encodings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.exclude_encodings)\n                \n            *   [`EncodingDetector.find_declared_encoding()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.find_declared_encoding)\n                \n            *   [`EncodingDetector.is_html`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.is_html)\n                \n            *   [`EncodingDetector.known_definite_encodings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.known_definite_encodings)\n                \n            *   [`EncodingDetector.markup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.markup)\n                \n            *   [`EncodingDetector.sniffed_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.sniffed_encoding)\n                \n            *   [`EncodingDetector.strip_byte_order_mark()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.strip_byte_order_mark)\n                \n            *   [`EncodingDetector.user_encodings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EncodingDetector.user_encodings)\n                \n        *   [`EntitySubstitution`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution)\n            *   [`EntitySubstitution.AMPERSAND_OR_BRACKET`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.AMPERSAND_OR_BRACKET)\n                \n            *   [`EntitySubstitution.ANY_ENTITY_RE`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.ANY_ENTITY_RE)\n                \n            *   [`EntitySubstitution.BARE_AMPERSAND_OR_BRACKET`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.BARE_AMPERSAND_OR_BRACKET)\n                \n            *   [`EntitySubstitution.CHARACTER_TO_HTML_ENTITY`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.CHARACTER_TO_HTML_ENTITY)\n                \n            *   [`EntitySubstitution.CHARACTER_TO_HTML_ENTITY_RE`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.CHARACTER_TO_HTML_ENTITY_RE)\n                \n            *   [`EntitySubstitution.CHARACTER_TO_HTML_ENTITY_WITH_AMPERSAND_RE`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.CHARACTER_TO_HTML_ENTITY_WITH_AMPERSAND_RE)\n                \n            *   [`EntitySubstitution.CHARACTER_TO_XML_ENTITY`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.CHARACTER_TO_XML_ENTITY)\n                \n            *   [`EntitySubstitution.HTML_ENTITY_TO_CHARACTER`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.HTML_ENTITY_TO_CHARACTER)\n                \n            *   [`EntitySubstitution.quoted_attribute_value()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.quoted_attribute_value)\n                \n            *   [`EntitySubstitution.substitute_html()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.substitute_html)\n                \n            *   [`EntitySubstitution.substitute_html5()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.substitute_html5)\n                \n            *   [`EntitySubstitution.substitute_html5_raw()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.substitute_html5_raw)\n                \n            *   [`EntitySubstitution.substitute_xml()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.substitute_xml)\n                \n            *   [`EntitySubstitution.substitute_xml_containing_entities()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.EntitySubstitution.substitute_xml_containing_entities)\n                \n        *   [`UnicodeDammit`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit)\n            *   [`UnicodeDammit.CHARSET_ALIASES`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.CHARSET_ALIASES)\n                \n            *   [`UnicodeDammit.ENCODINGS_WITH_SMART_QUOTES`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.ENCODINGS_WITH_SMART_QUOTES)\n                \n            *   [`UnicodeDammit.MS_CHARS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.MS_CHARS)\n                \n            *   [`UnicodeDammit.WINDOWS_1252_TO_UTF8`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.WINDOWS_1252_TO_UTF8)\n                \n            *   [`UnicodeDammit.contains_replacement_characters`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.contains_replacement_characters)\n                \n            *   [`UnicodeDammit.declared_html_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.declared_html_encoding)\n                \n            *   [`UnicodeDammit.detwingle()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.detwingle)\n                \n            *   [`UnicodeDammit.find_codec()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.find_codec)\n                \n            *   [`UnicodeDammit.markup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.markup)\n                \n            *   [`UnicodeDammit.original_encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.original_encoding)\n                \n            *   [`UnicodeDammit.smart_quotes_to`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.smart_quotes_to)\n                \n            *   [`UnicodeDammit.tried_encodings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.tried_encodings)\n                \n            *   [`UnicodeDammit.unicode_markup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.dammit.UnicodeDammit.unicode_markup)\n                \n    *   [bs4.element module](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.element)\n        *   [`AttributeDict`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeDict)\n            \n        *   [`AttributeValueList`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeValueList)\n            \n        *   [`AttributeValueWithCharsetSubstitution`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeValueWithCharsetSubstitution)\n            *   [`AttributeValueWithCharsetSubstitution.substitute_encoding()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.AttributeValueWithCharsetSubstitution.substitute_encoding)\n                \n        *   [`CData`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData)\n            *   [`CData.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.PREFIX)\n                \n            *   [`CData.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.SUFFIX)\n                \n            *   [`CData.next_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.next_element)\n                \n            *   [`CData.next_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.next_sibling)\n                \n            *   [`CData.parent`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.parent)\n                \n            *   [`CData.previous_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.previous_element)\n                \n            *   [`CData.previous_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CData.previous_sibling)\n                \n        *   [`CharsetMetaAttributeValue`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CharsetMetaAttributeValue)\n            *   [`CharsetMetaAttributeValue.substitute_encoding()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.CharsetMetaAttributeValue.substitute_encoding)\n                \n        *   [`Comment`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment)\n            *   [`Comment.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.PREFIX)\n                \n            *   [`Comment.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.SUFFIX)\n                \n            *   [`Comment.next_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.next_element)\n                \n            *   [`Comment.next_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.next_sibling)\n                \n            *   [`Comment.parent`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.parent)\n                \n            *   [`Comment.previous_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.previous_element)\n                \n            *   [`Comment.previous_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Comment.previous_sibling)\n                \n        *   [`ContentMetaAttributeValue`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ContentMetaAttributeValue)\n            *   [`ContentMetaAttributeValue.CHARSET_RE`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ContentMetaAttributeValue.CHARSET_RE)\n                \n            *   [`ContentMetaAttributeValue.substitute_encoding()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ContentMetaAttributeValue.substitute_encoding)\n                \n        *   [`DEFAULT_OUTPUT_ENCODING`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.DEFAULT_OUTPUT_ENCODING)\n            \n        *   [`Declaration`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration)\n            *   [`Declaration.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.PREFIX)\n                \n            *   [`Declaration.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.SUFFIX)\n                \n            *   [`Declaration.next_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.next_element)\n                \n            *   [`Declaration.next_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.next_sibling)\n                \n            *   [`Declaration.parent`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.parent)\n                \n            *   [`Declaration.previous_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.previous_element)\n                \n            *   [`Declaration.previous_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Declaration.previous_sibling)\n                \n        *   [`Doctype`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype)\n            *   [`Doctype.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.PREFIX)\n                \n            *   [`Doctype.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.SUFFIX)\n                \n            *   [`Doctype.for_name_and_ids()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.for_name_and_ids)\n                \n            *   [`Doctype.next_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.next_element)\n                \n            *   [`Doctype.next_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.next_sibling)\n                \n            *   [`Doctype.parent`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.parent)\n                \n            *   [`Doctype.previous_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.previous_element)\n                \n            *   [`Doctype.previous_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Doctype.previous_sibling)\n                \n        *   [`HTMLAttributeDict`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.HTMLAttributeDict)\n            \n        *   [`NamespacedAttribute`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NamespacedAttribute)\n            *   [`NamespacedAttribute.name`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NamespacedAttribute.name)\n                \n            *   [`NamespacedAttribute.namespace`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NamespacedAttribute.namespace)\n                \n            *   [`NamespacedAttribute.prefix`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NamespacedAttribute.prefix)\n                \n        *   [`NavigableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString)\n            *   [`NavigableString.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString.PREFIX)\n                \n            *   [`NavigableString.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString.SUFFIX)\n                \n            *   [`NavigableString.output_ready()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString.output_ready)\n                \n            *   [`NavigableString.strings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.NavigableString.strings)\n                \n        *   [`PYTHON_SPECIFIC_ENCODINGS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PYTHON_SPECIFIC_ENCODINGS)\n            \n        *   [`PageElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement)\n            *   [`PageElement.decompose()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.decompose)\n                \n            *   [`PageElement.decomposed`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.decomposed)\n                \n            *   [`PageElement.extract()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.extract)\n                \n            *   [`PageElement.find_all_next()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_all_next)\n                \n            *   [`PageElement.find_all_previous()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_all_previous)\n                \n            *   [`PageElement.find_next()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_next)\n                \n            *   [`PageElement.find_next_sibling()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_next_sibling)\n                \n            *   [`PageElement.find_next_siblings()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_next_siblings)\n                \n            *   [`PageElement.find_parent()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_parent)\n                \n            *   [`PageElement.find_parents()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_parents)\n                \n            *   [`PageElement.find_previous()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_previous)\n                \n            *   [`PageElement.find_previous_sibling()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_previous_sibling)\n                \n            *   [`PageElement.find_previous_siblings()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.find_previous_siblings)\n                \n            *   [`PageElement.format_string()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.format_string)\n                \n            *   [`PageElement.formatter_for_name()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.formatter_for_name)\n                \n            *   [`PageElement.getText()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.getText)\n                \n            *   [`PageElement.get_text()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.get_text)\n                \n            *   [`PageElement.hidden`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.hidden)\n                \n            *   [`PageElement.insert_after()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.insert_after)\n                \n            *   [`PageElement.insert_before()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.insert_before)\n                \n            *   [`PageElement.known_xml`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.known_xml)\n                \n            *   [`PageElement.next`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.next)\n                \n            *   [`PageElement.next_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.next_element)\n                \n            *   [`PageElement.next_elements`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.next_elements)\n                \n            *   [`PageElement.next_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.next_sibling)\n                \n            *   [`PageElement.next_siblings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.next_siblings)\n                \n            *   [`PageElement.parent`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.parent)\n                \n            *   [`PageElement.parents`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.parents)\n                \n            *   [`PageElement.previous`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.previous)\n                \n            *   [`PageElement.previous_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.previous_element)\n                \n            *   [`PageElement.previous_elements`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.previous_elements)\n                \n            *   [`PageElement.previous_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.previous_sibling)\n                \n            *   [`PageElement.previous_siblings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.previous_siblings)\n                \n            *   [`PageElement.replace_with()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.replace_with)\n                \n            *   [`PageElement.self_and_next_elements`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.self_and_next_elements)\n                \n            *   [`PageElement.self_and_next_siblings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.self_and_next_siblings)\n                \n            *   [`PageElement.self_and_parents`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.self_and_parents)\n                \n            *   [`PageElement.self_and_previous_elements`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.self_and_previous_elements)\n                \n            *   [`PageElement.self_and_previous_siblings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.self_and_previous_siblings)\n                \n            *   [`PageElement.setup()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.setup)\n                \n            *   [`PageElement.stripped_strings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.stripped_strings)\n                \n            *   [`PageElement.text`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.text)\n                \n            *   [`PageElement.wrap()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PageElement.wrap)\n                \n        *   [`PreformattedString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString)\n            *   [`PreformattedString.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString.PREFIX)\n                \n            *   [`PreformattedString.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString.SUFFIX)\n                \n            *   [`PreformattedString.output_ready()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.PreformattedString.output_ready)\n                \n        *   [`ProcessingInstruction`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction)\n            *   [`ProcessingInstruction.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.PREFIX)\n                \n            *   [`ProcessingInstruction.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.SUFFIX)\n                \n            *   [`ProcessingInstruction.next_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.next_element)\n                \n            *   [`ProcessingInstruction.next_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.next_sibling)\n                \n            *   [`ProcessingInstruction.parent`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.parent)\n                \n            *   [`ProcessingInstruction.previous_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.previous_element)\n                \n            *   [`ProcessingInstruction.previous_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ProcessingInstruction.previous_sibling)\n                \n        *   [`ResultSet`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ResultSet)\n            *   [`ResultSet.source`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.ResultSet.source)\n                \n        *   [`RubyParenthesisString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.RubyParenthesisString)\n            \n        *   [`RubyTextString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.RubyTextString)\n            \n        *   [`Script`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Script)\n            \n        *   [`Stylesheet`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Stylesheet)\n            \n        *   [`Tag`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag)\n            *   [`Tag.append()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.append)\n                \n            *   [`Tag.attrs`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.attrs)\n                \n            *   [`Tag.can_be_empty_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.can_be_empty_element)\n                \n            *   [`Tag.cdata_list_attributes`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.cdata_list_attributes)\n                \n            *   [`Tag.children`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.children)\n                \n            *   [`Tag.clear()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.clear)\n                \n            *   [`Tag.contents`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.contents)\n                \n            *   [`Tag.copy_self()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.copy_self)\n                \n            *   [`Tag.css`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.css)\n                \n            *   [`Tag.decode()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.decode)\n                \n            *   [`Tag.decode_contents()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.decode_contents)\n                \n            *   [`Tag.descendants`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.descendants)\n                \n            *   [`Tag.encode()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.encode)\n                \n            *   [`Tag.encode_contents()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.encode_contents)\n                \n            *   [`Tag.extend()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.extend)\n                \n            *   [`Tag.find()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.find)\n                \n            *   [`Tag.find_all()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.find_all)\n                \n            *   [`Tag.get()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.get)\n                \n            *   [`Tag.get_attribute_list()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.get_attribute_list)\n                \n            *   [`Tag.has_attr()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.has_attr)\n                \n            *   [`Tag.index()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.index)\n                \n            *   [`Tag.insert()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.insert)\n                \n            *   [`Tag.interesting_string_types`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.interesting_string_types)\n                \n            *   [`Tag.isSelfClosing()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.isSelfClosing)\n                \n            *   [`Tag.is_empty_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.is_empty_element)\n                \n            *   [`Tag.name`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.name)\n                \n            *   [`Tag.namespace`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.namespace)\n                \n            *   [`Tag.next_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.next_element)\n                \n            *   [`Tag.next_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.next_sibling)\n                \n            *   [`Tag.parent`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.parent)\n                \n            *   [`Tag.parser_class`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.parser_class)\n                \n            *   [`Tag.prefix`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.prefix)\n                \n            *   [`Tag.preserve_whitespace_tags`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.preserve_whitespace_tags)\n                \n            *   [`Tag.prettify()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.prettify)\n                \n            *   [`Tag.previous_element`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.previous_element)\n                \n            *   [`Tag.previous_sibling`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.previous_sibling)\n                \n            *   [`Tag.replaceWithChildren()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.replaceWithChildren)\n                \n            *   [`Tag.replace_with_children()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.replace_with_children)\n                \n            *   [`Tag.select()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.select)\n                \n            *   [`Tag.select_one()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.select_one)\n                \n            *   [`Tag.self_and_descendants`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.self_and_descendants)\n                \n            *   [`Tag.smooth()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.smooth)\n                \n            *   [`Tag.sourceline`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.sourceline)\n                \n            *   [`Tag.sourcepos`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.sourcepos)\n                \n            *   [`Tag.string`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.string)\n                \n            *   [`Tag.strings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.strings)\n                \n            *   [`Tag.unwrap()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.Tag.unwrap)\n                \n        *   [`TemplateString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.TemplateString)\n            \n        *   [`XMLAttributeDict`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.XMLAttributeDict)\n            \n        *   [`XMLProcessingInstruction`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.XMLProcessingInstruction)\n            *   [`XMLProcessingInstruction.PREFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.XMLProcessingInstruction.PREFIX)\n                \n            *   [`XMLProcessingInstruction.SUFFIX`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.XMLProcessingInstruction.SUFFIX)\n                \n        *   [`nonwhitespace_re`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.element.nonwhitespace_re)\n            \n    *   [bs4.filter module](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.filter)\n        *   [`AttributeValueMatchRule`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.AttributeValueMatchRule)\n            *   [`AttributeValueMatchRule.function`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.AttributeValueMatchRule.function)\n                \n        *   [`ElementFilter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter)\n            *   [`ElementFilter.allow_string_creation()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.allow_string_creation)\n                \n            *   [`ElementFilter.allow_tag_creation()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.allow_tag_creation)\n                \n            *   [`ElementFilter.excludes_everything`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.excludes_everything)\n                \n            *   [`ElementFilter.filter()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.filter)\n                \n            *   [`ElementFilter.find()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.find)\n                \n            *   [`ElementFilter.find_all()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.find_all)\n                \n            *   [`ElementFilter.includes_everything`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.includes_everything)\n                \n            *   [`ElementFilter.match()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.match)\n                \n            *   [`ElementFilter.match_function`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.ElementFilter.match_function)\n                \n        *   [`MatchRule`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule)\n            *   [`MatchRule.exclude_everything`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule.exclude_everything)\n                \n            *   [`MatchRule.matches_string()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule.matches_string)\n                \n            *   [`MatchRule.pattern`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule.pattern)\n                \n            *   [`MatchRule.present`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule.present)\n                \n            *   [`MatchRule.string`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.MatchRule.string)\n                \n        *   [`SoupStrainer`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer)\n            *   [`SoupStrainer.allow_string_creation()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.allow_string_creation)\n                \n            *   [`SoupStrainer.allow_tag_creation()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.allow_tag_creation)\n                \n            *   [`SoupStrainer.attribute_rules`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.attribute_rules)\n                \n            *   [`SoupStrainer.excludes_everything`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.excludes_everything)\n                \n            *   [`SoupStrainer.includes_everything`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.includes_everything)\n                \n            *   [`SoupStrainer.match()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.match)\n                \n            *   [`SoupStrainer.matches_any_string_rule()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.matches_any_string_rule)\n                \n            *   [`SoupStrainer.matches_tag()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.matches_tag)\n                \n            *   [`SoupStrainer.name_rules`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.name_rules)\n                \n            *   [`SoupStrainer.search_tag()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.search_tag)\n                \n            *   [`SoupStrainer.string_rules`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.SoupStrainer.string_rules)\n                \n        *   [`StringMatchRule`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.StringMatchRule)\n            *   [`StringMatchRule.function`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.StringMatchRule.function)\n                \n        *   [`TagNameMatchRule`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.TagNameMatchRule)\n            *   [`TagNameMatchRule.function`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.TagNameMatchRule.function)\n                \n            *   [`TagNameMatchRule.matches_tag()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.filter.TagNameMatchRule.matches_tag)\n                \n    *   [bs4.formatter module](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.formatter)\n        *   [`Formatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter)\n            *   [`Formatter.HTML`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.HTML)\n                \n            *   [`Formatter.HTML_DEFAULTS`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.HTML_DEFAULTS)\n                \n            *   [`Formatter.XML`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.XML)\n                \n            *   [`Formatter.attribute_value()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.attribute_value)\n                \n            *   [`Formatter.attributes()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.attributes)\n                \n            *   [`Formatter.empty_attributes_are_booleans`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.empty_attributes_are_booleans)\n                \n            *   [`Formatter.substitute()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.Formatter.substitute)\n                \n        *   [`HTMLFormatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.HTMLFormatter)\n            *   [`HTMLFormatter.REGISTRY`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.HTMLFormatter.REGISTRY)\n                \n        *   [`XMLFormatter`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.XMLFormatter)\n            *   [`XMLFormatter.REGISTRY`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.formatter.XMLFormatter.REGISTRY)\n                \n    *   [bs4.\\_typing module](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4._typing)\n        *   [`_AttributeValues`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._AttributeValues)\n            \n        *   [`_BaseStrainable`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._BaseStrainable)\n            \n        *   [`_BaseStrainableAttribute`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._BaseStrainableAttribute)\n            \n        *   [`_BaseStrainableElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._BaseStrainableElement)\n            \n        *   [`_Encoding`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._Encoding)\n            \n        *   [`_Encodings`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._Encodings)\n            \n        *   [`_IncomingMarkup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._IncomingMarkup)\n            \n        *   [`_InsertableElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._InsertableElement)\n            \n        *   [`_InvertedNamespaceMapping`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._InvertedNamespaceMapping)\n            \n        *   [`_NamespaceMapping`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._NamespaceMapping)\n            \n        *   [`_NamespacePrefix`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._NamespacePrefix)\n            \n        *   [`_NamespaceURL`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._NamespaceURL)\n            \n        *   [`_OneElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._OneElement)\n            \n        *   [`_PageElementMatchFunction`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._PageElementMatchFunction)\n            \n        *   [`_RawAttributeValue`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RawAttributeValue)\n            \n        *   [`_RawAttributeValues`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RawAttributeValues)\n            \n        *   [`_RawMarkup`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RawMarkup)\n            \n        *   [`_RawOrProcessedAttributeValues`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RawOrProcessedAttributeValues)\n            \n        *   [`_RegularExpressionProtocol`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol)\n            *   [`_RegularExpressionProtocol._abc_impl`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol._abc_impl)\n                \n            *   [`_RegularExpressionProtocol._is_protocol`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol._is_protocol)\n                \n            *   [`_RegularExpressionProtocol._is_runtime_protocol`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol._is_runtime_protocol)\n                \n            *   [`_RegularExpressionProtocol.pattern`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol.pattern)\n                \n            *   [`_RegularExpressionProtocol.search()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._RegularExpressionProtocol.search)\n                \n        *   [`_StrainableAttribute`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._StrainableAttribute)\n            \n        *   [`_StrainableAttributes`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._StrainableAttributes)\n            \n        *   [`_StrainableElement`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._StrainableElement)\n            \n        *   [`_StrainableString`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._StrainableString)\n            \n        *   [`_StringMatchFunction`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._StringMatchFunction)\n            \n        *   [`_TagMatchFunction`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4._typing._TagMatchFunction)\n            \n    *   [bs4.diagnose module](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#module-bs4.diagnose)\n        *   [`AnnouncingParser`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser)\n            *   [`AnnouncingParser.handle_charref()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_charref)\n                \n            *   [`AnnouncingParser.handle_comment()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_comment)\n                \n            *   [`AnnouncingParser.handle_data()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_data)\n                \n            *   [`AnnouncingParser.handle_decl()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_decl)\n                \n            *   [`AnnouncingParser.handle_endtag()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_endtag)\n                \n            *   [`AnnouncingParser.handle_entityref()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_entityref)\n                \n            *   [`AnnouncingParser.handle_pi()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_pi)\n                \n            *   [`AnnouncingParser.handle_starttag()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.handle_starttag)\n                \n            *   [`AnnouncingParser.unknown_decl()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.AnnouncingParser.unknown_decl)\n                \n        *   [`benchmark_parsers()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.benchmark_parsers)\n            \n        *   [`diagnose()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.diagnose)\n            \n        *   [`htmlparser_trace()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.htmlparser_trace)\n            \n        *   [`lxml_trace()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.lxml_trace)\n            \n        *   [`profile()`](https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html#bs4.diagnose.profile)\n            \n\n### Quick search","metadata":{"title":"bs4 package — Beautiful Soup 4.13.0 documentation","language":"en,ja,ko,ru,pt,zh","viewport":["width=device-width, initial-scale=1.0","width=device-width, initial-scale=1"],"scrapeId":"b010fe7e-f360-427c-939f-ef64fb92daee","sourceURL":"https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html","url":"https://www.crummy.com/software/BeautifulSoup/bs4/doc/api/bs4.html","statusCode":200}},{"markdown":"bs4.builder package =================== Module contents --------------- .. automodule:: bs4.builder :members: :undoc-members: :show-inheritance:","metadata":{"scrapeId":"759e4d55-c0c3-49c4-912b-612228472a58","sourceURL":"https://www.crummy.com/software/BeautifulSoup/bs4/doc/_sources/api/bs4.builder.rst.txt","url":"https://www.crummy.com/software/BeautifulSoup/bs4/doc/_sources/api/bs4.builder.rst.txt","statusCode":200}},{"markdown":"bs4 package =========== Module contents --------------- .. automodule:: bs4 :members: :undoc-members: :show-inheritance: Subpackages ----------- .. toctree:: :maxdepth: 1 bs4.builder Submodules ---------- bs4.css module -------------- .. automodule:: bs4.css :members: :undoc-members: :show-inheritance: bs4.dammit module ----------------- .. automodule:: bs4.dammit :members: :undoc-members: :show-inheritance: bs4.element module ------------------ .. automodule:: bs4.element :members: :undoc-members: :show-inheritance: bs4.filter module ----------------- .. automodule:: bs4.filter :members: :undoc-members: :show-inheritance: bs4.formatter module -------------------- .. automodule:: bs4.formatter :members: :undoc-members: :show-inheritance: bs4.\\_typing module ------------------ .. automodule:: bs4.\\_typing :members: :undoc-members: :private-members: :show-inheritance: bs4.diagnose module ------------------- .. automodule:: bs4.diagnose :members: :undoc-members: :show-inheritance:","metadata":{"scrapeId":"f6837650-dc0e-4248-8d21-2f2ad56a1686","sourceURL":"https://www.crummy.com/software/BeautifulSoup/bs4/doc/_sources/api/bs4.rst.txt","url":"https://www.crummy.com/software/BeautifulSoup/bs4/doc/_sources/api/bs4.rst.txt","statusCode":200}}]}