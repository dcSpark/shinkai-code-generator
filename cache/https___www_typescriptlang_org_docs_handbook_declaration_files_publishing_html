{"success":true,"status":"completed","completed":1,"total":1,"creditsUsed":1,"expiresAt":"2025-03-06T17:32:33.000Z","data":[{"markdown":"Was this page helpful?\n\nPublishing\n==========\n\nNow that you have authored a declaration file following the steps of this guide, it is time to publish it to npm. There are two main ways you can publish your declaration files to npm:\n\n1.  bundling with your npm package\n2.  publishing to the [@types organization](https://www.npmjs.com/~types)\n     on npm.\n\nIf your types are generated by your source code, publish the types with your source code. Both TypeScript and JavaScript projects can generate types via [`declaration`](https://www.typescriptlang.org/tsconfig#declaration)\n.\n\nOtherwise, we recommend submitting the types to DefinitelyTyped, which will publish them to the `@types` organization on npm.\n\n[](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html#including-declarations-in-your-npm-package)\nIncluding declarations in your npm package\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nIf your package has a main `.js` file, you will need to indicate the main declaration file in your `package.json` file as well. Set the `types` property to point to your bundled declaration file. For example:\n\njson\n\n`   {    \"name\": \"awesome\",    \"author\": \"Vandelay Industries\",    \"version\": \"1.0.0\",    \"main\": \"./lib/main.js\",    \"types\": \"./lib/main.d.ts\"  }   `\n\nNote that the `\"typings\"` field is synonymous with `types`, and could be used as well.\n\n[](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html#dependencies)\nDependencies\n------------------------------------------------------------------------------------------------------------\n\nAll dependencies are managed by npm. Make sure all the declaration packages you depend on are marked appropriately in the `\"dependencies\"` section in your `package.json`. For example, imagine we authored a package that used Browserify and TypeScript.\n\njson\n\n`   {    \"name\": \"browserify-typescript-extension\",    \"author\": \"Vandelay Industries\",    \"version\": \"1.0.0\",    \"main\": \"./lib/main.js\",    \"types\": \"./lib/main.d.ts\",    \"dependencies\": {      \"browserify\": \"latest\",      \"@types/browserify\": \"latest\",      \"typescript\": \"next\"    }  }   `\n\nHere, our package depends on the `browserify` and `typescript` packages. `browserify` does not bundle its declaration files with its npm packages, so we needed to depend on `@types/browserify` for its declarations. `typescript`, on the other hand, packages its declaration files, so there was no need for any additional dependencies.\n\nOur package exposes declarations from each of those, so any user of our `browserify-typescript-extension` package needs to have these dependencies as well. For that reason, we used `\"dependencies\"` and not `\"devDependencies\"`, because otherwise our consumers would have needed to manually install those packages. If we had just written a command line application and not expected our package to be used as a library, we might have used `devDependencies`.\n\n[](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html#red-flags)\nRed flags\n------------------------------------------------------------------------------------------------------\n\n### [](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html#-reference-path-)\n`/// <reference path=\"...\" />`\n\n_Don’t_ use `/// <reference path=\"...\" />` in your declaration files.\n\nts\n\n`   /// <reference path=\"../typescript/lib/typescriptServices.d.ts\" />  ....   `\n\n_Do_ use `/// <reference types=\"...\" />` instead.\n\nts\n\n`   /// <reference types=\"typescript\" />  ....   `\n\nMake sure to revisit the [Consuming dependencies](https://www.typescriptlang.org/docs/handbook/declaration-files/library-structures.html#consuming-dependencies)\n section for more information.\n\n### [](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html#packaging-dependent-declarations)\nPackaging dependent declarations\n\nIf your type definitions depend on another package:\n\n*   _Don’t_ combine it with yours, keep each in their own file.\n*   _Don’t_ copy the declarations in your package either.\n*   _Do_ depend on the npm type declaration package if it doesn’t package its declaration files.\n\n[](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html#version-selection-with-typesversions)\nVersion selection with `typesVersions`\n--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\nWhen TypeScript opens a `package.json` file to figure out which files it needs to read, it first looks at a field called `typesVersions`.\n\n#### [](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html#folder-redirects-using-)\nFolder redirects (using `*`)\n\nA `package.json` with a `typesVersions` field might look like this:\n\njson\n\n`   {    \"name\": \"package-name\",    \"version\": \"1.0.0\",    \"types\": \"./index.d.ts\",    \"typesVersions\": {      \">=3.1\": { \"*\": [\"ts3.1/*\"] }    }  }   `\n\nThis `package.json` tells TypeScript to first check the current version of TypeScript. If it’s 3.1 or later, TypeScript figures out the path you’ve imported relative to the package, and reads from the package’s `ts3.1` folder.\n\nThat’s what that `{ \"*\": [\"ts3.1/*\"] }` means - if you’re familiar with [path mapping](https://www.typescriptlang.org/tsconfig#paths)\n, it works exactly like that.\n\nIn the above example, if we’re importing from `\"package-name\"`, TypeScript will try to resolve from `[...]/node_modules/package-name/ts3.1/index.d.ts` (and other relevant paths) when running in TypeScript 3.1. If we import from `package-name/foo`, we’ll try to look for `[...]/node_modules/package-name/ts3.1/foo.d.ts` and `[...]/node_modules/package-name/ts3.1/foo/index.d.ts`.\n\nWhat if we’re not running in TypeScript 3.1 in this example? Well, if none of the fields in `typesVersions` get matched, TypeScript falls back to the `types` field, so here TypeScript 3.0 and earlier will be redirected to `[...]/node_modules/package-name/index.d.ts`.\n\n#### [](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html#file-redirects)\nFile redirects\n\nWhen you want to only change the resolution for a single file at a time, you can tell TypeScript the file to resolve differently by passing in the exact filenames:\n\njson\n\n`   {    \"name\": \"package-name\",    \"version\": \"1.0.0\",    \"types\": \"./index.d.ts\",    \"typesVersions\": {      \"<4.0\": { \"index.d.ts\": [\"index.v3.d.ts\"] }    }  }   `\n\nOn TypeScript 4.0 and above, an import for `\"package-name\"` would resolve to `./index.d.ts` and for 3.9 and below `\"./index.v3.d.ts`.\n\nNote that redirections only affect the _external_ API of a package; import resolution within a project is not affected by `typesVersions`. For example, a `d.ts` file in the previous example containing `import * as foo from \"./index\"` will still map to `index.d.ts`, not `index.v3.d.ts`, whereas another package importing `import * as foo from \"package-name\"` _will_ get `index.v3.d.ts`.\n\n[](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html#matching-behavior)\nMatching behavior\n----------------------------------------------------------------------------------------------------------------------\n\nThe way that TypeScript decides on whether a version of the compiler & language matches is by using Node’s [semver ranges](https://github.com/npm/node-semver#ranges)\n.\n\n[](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html#multiple-fields)\nMultiple fields\n------------------------------------------------------------------------------------------------------------------\n\n`typesVersions` can support multiple fields where each field name is specified by the range to match on.\n\n`   {    \"name\": \"package-name\",    \"version\": \"1.0\",    \"[types](https://www.typescriptlang.org/tsconfig#types) \": \"./index.d.ts\",    \"typesVersions\": {      \">=3.2\": { \"*\": [\"ts3.2/*\"] },      \">=3.1\": { \"*\": [\"ts3.1/*\"] }    }  }   `\n\nSince ranges have the potential to overlap, determining which redirect applies is order-specific. That means in the above example, even though both the `>=3.2` and the `>=3.1` matchers support TypeScript 3.2 and above, reversing the order could have different behavior, so the above sample would not be equivalent to the following.\n\n`   {    \"name\": \"package-name\",    \"version\": \"1.0\",    \"[types](https://www.typescriptlang.org/tsconfig#types) \": \"./index.d.ts\",    \"typesVersions\": {      // NOTE: this doesn't work!      \">=3.1\": { \"*\": [\"ts3.1/*\"] },      \">=3.2\": { \"*\": [\"ts3.2/*\"] }    }  }   `\n\n[](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html#publish-to-types)\nPublish to [@types](https://www.npmjs.com/~types)\n\n------------------------------------------------------------------------------------------------------------------------------------------------------\n\nPackages under the [@types](https://www.npmjs.com/~types)\n organization are published automatically from [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped)\n using the [types-publisher tool](https://github.com/microsoft/DefinitelyTyped-tools/tree/master/packages/publisher)\n. To get your declarations published as an @types package, please submit a pull request to [DefinitelyTyped](https://github.com/DefinitelyTyped/DefinitelyTyped)\n. You can find more details in the [contribution guidelines page](https://definitelytyped.github.io/guides/contributing.html)\n.\n\n[### Deep Dive\\\n\\\nHow do d.ts files work, a deep dive](https://www.typescriptlang.org/docs/handbook/declaration-files/deep-dive.html)\n\n[### Consumption\\\n\\\nHow to download d.ts files for your project](https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html)\n\nThe TypeScript docs are an open source project. Help us improve these pages [by sending a Pull Request](https://github.com/microsoft/TypeScript-Website/blob/v2/packages/documentation/copy/en/declaration-files/Publishing.md)\n ❤\n\nContributors to this page:  \n\nMH![Mohamed Hegazy  (55)](https://gravatar.com/avatar/17e2da9785d45119a4c4cfed99e40d9c?s=32&&d=blank)\n\nOT![Orta Therox  (21)](https://avatars.githubusercontent.com/u/49038?s=100&u=0b9ac5bf42a8ea2543a05191e150e0213456744e&v=4)\n\nMB![Mateusz Burzyński  (2)](https://gravatar.com/avatar/20ed1adc4c9f8665ed276acc30878d51535492623bbc3b441426c81450b14725?s=32&&d=blank)\n\nRV![Rauno Viskus  (2)](https://gravatar.com/avatar/188e3c1cf60722678068e7c7acc1cef5554a1527c470deb063ef3d5f9722e613?s=32&&d=blank)\n\nRC![Ryan Cavanaugh  (2)](https://gravatar.com/avatar/2484d99c8a58bc51ae587e07a05ba6e2?s=32&&d=blank)\n\n19+\n\nLast updated: Mar 05, 2025  \n  \nThis page loaded in 0.819 seconds.\n\nMSG","metadata":{"language":"en","generator":"Gatsby 5.13.5","viewport":"width=device-width, initial-scale=1, shrink-to-fit=no","ogTitle":"Documentation - Publishing","og:title":"Documentation - Publishing","theme-color":"#3178C6","ogDescription":"How to get your d.ts files to users","og:description":"How to get your d.ts files to users","twitter:site":"typescriptlang","favicon":"https://www.typescriptlang.org/favicon-32x32.png?v=8944a05a8b601855de116c8a56d3b3ae","description":"How to get your d.ts files to users","title":"TypeScript: Documentation - Publishing","scrapeId":"cb794ddf-3baf-4075-b959-9b847a25df1b","sourceURL":"https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html","url":"https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html","statusCode":200}}]}