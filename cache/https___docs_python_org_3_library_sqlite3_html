{"success":true,"status":"completed","completed":1,"total":1,"creditsUsed":1,"expiresAt":"2025-03-05T20:54:45.000Z","data":[{"markdown":"### Navigation\n\n*   [index](https://docs.python.org/3/genindex.html \"General Index\")\n    \n*   [modules](https://docs.python.org/3/py-modindex.html \"Python Module Index\")\n     |\n*   [next](https://docs.python.org/3/library/archiving.html \"Data Compression and Archiving\")\n     |\n*   [previous](https://docs.python.org/3/library/dbm.html \"dbm — Interfaces to Unix “databases”\")\n     |\n*   ![Python logo](https://docs.python.org/3/_static/py.svg)\n*   [Python](https://www.python.org/)\n     »\n*   EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文\n    \n    dev (3.14)3.13.23.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6\n    \n\n*   [3.13.2 Documentation](https://docs.python.org/3/index.html)\n     »\n*   [The Python Standard Library](https://docs.python.org/3/library/index.html)\n     »\n*   [Data Persistence](https://docs.python.org/3/library/persistence.html)\n     »\n*   [`sqlite3` — DB-API 2.0 interface for SQLite databases](https://docs.python.org/3/library/sqlite3.html)\n    \n*    \n    \n    |\n*   Theme Auto Light Dark |\n\n`sqlite3` — DB-API 2.0 interface for SQLite databases[¶](https://docs.python.org/3/library/sqlite3.html#module-sqlite3 \"Link to this heading\")\n\n===============================================================================================================================================\n\n**Source code:** [Lib/sqlite3/](https://github.com/python/cpython/tree/3.13/Lib/sqlite3/)\n\nSQLite is a C library that provides a lightweight disk-based database that doesn’t require a separate server process and allows accessing the database using a nonstandard variant of the SQL query language. Some applications can use SQLite for internal data storage. It’s also possible to prototype an application using SQLite and then port the code to a larger database such as PostgreSQL or Oracle.\n\nThe `sqlite3` module was written by Gerhard Häring. It provides an SQL interface compliant with the DB-API 2.0 specification described by [**PEP 249**](https://peps.python.org/pep-0249/)\n, and requires SQLite 3.15.2 or newer.\n\nThis document includes four main sections:\n\n*   [Tutorial](https://docs.python.org/3/library/sqlite3.html#sqlite3-tutorial)\n     teaches how to use the `sqlite3` module.\n    \n*   [Reference](https://docs.python.org/3/library/sqlite3.html#sqlite3-reference)\n     describes the classes and functions this module defines.\n    \n*   [How-to guides](https://docs.python.org/3/library/sqlite3.html#sqlite3-howtos)\n     details how to handle specific tasks.\n    \n*   [Explanation](https://docs.python.org/3/library/sqlite3.html#sqlite3-explanation)\n     provides in-depth background on transaction control.\n    \n\nSee also\n\n[https://www.sqlite.org](https://www.sqlite.org/)\n\nThe SQLite web page; the documentation describes the syntax and the available data types for the supported SQL dialect.\n\n[https://www.w3schools.com/sql/](https://www.w3schools.com/sql/)\n\nTutorial, reference and examples for learning SQL syntax.\n\n[**PEP 249**](https://peps.python.org/pep-0249/)\n - Database API Specification 2.0\n\nPEP written by Marc-André Lemburg.\n\nTutorial[¶](https://docs.python.org/3/library/sqlite3.html#tutorial \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------\n\nIn this tutorial, you will create a database of Monty Python movies using basic `sqlite3` functionality. It assumes a fundamental understanding of database concepts, including [cursors](https://en.wikipedia.org/wiki/Cursor_(databases))\n and [transactions](https://en.wikipedia.org/wiki/Database_transaction)\n.\n\nFirst, we need to create a new database and open a database connection to allow `sqlite3` to work with it. Call [`sqlite3.connect()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.connect \"sqlite3.connect\")\n to create a connection to the database `tutorial.db` in the current working directory, implicitly creating it if it does not exist:\n\nimport sqlite3\ncon \\= sqlite3.connect(\"tutorial.db\")\n\nThe returned [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection \"sqlite3.Connection\")\n object `con` represents the connection to the on-disk database.\n\nIn order to execute SQL statements and fetch results from SQL queries, we will need to use a database cursor. Call [`con.cursor()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.cursor \"sqlite3.Connection.cursor\")\n to create the [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor \"sqlite3.Cursor\")\n:\n\ncur \\= con.cursor()\n\nNow that we’ve got a database connection and a cursor, we can create a database table `movie` with columns for title, release year, and review score. For simplicity, we can just use column names in the table declaration – thanks to the [flexible typing](https://www.sqlite.org/flextypegood.html)\n feature of SQLite, specifying the data types is optional. Execute the `CREATE TABLE` statement by calling [`cur.execute(...)`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute \"sqlite3.Cursor.execute\")\n:\n\ncur.execute(\"CREATE TABLE movie(title, year, score)\")\n\nWe can verify that the new table has been created by querying the `sqlite_master` table built-in to SQLite, which should now contain an entry for the `movie` table definition (see [The Schema Table](https://www.sqlite.org/schematab.html)\n for details). Execute that query by calling [`cur.execute(...)`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute \"sqlite3.Cursor.execute\")\n, assign the result to `res`, and call [`res.fetchone()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchone \"sqlite3.Cursor.fetchone\")\n to fetch the resulting row:\n\n\\>>>\n\n\\>>> res \\= cur.execute(\"SELECT name FROM sqlite\\_master\")\n\\>>> res.fetchone()\n('movie',)\n\nWe can see that the table has been created, as the query returns a [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple \"tuple\")\n containing the table’s name. If we query `sqlite_master` for a non-existent table `spam`, `res.fetchone()` will return `None`:\n\n\\>>>\n\n\\>>> res \\= cur.execute(\"SELECT name FROM sqlite\\_master WHERE name='spam'\")\n\\>>> res.fetchone() is None\nTrue\n\nNow, add two rows of data supplied as SQL literals by executing an `INSERT` statement, once again by calling [`cur.execute(...)`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute \"sqlite3.Cursor.execute\")\n:\n\ncur.execute(\"\"\"\n    INSERT INTO movie VALUES\n        ('Monty Python and the Holy Grail', 1975, 8.2),\n        ('And Now for Something Completely Different', 1971, 7.5)\n\"\"\")\n\nThe `INSERT` statement implicitly opens a transaction, which needs to be committed before changes are saved in the database (see [Transaction control](https://docs.python.org/3/library/sqlite3.html#sqlite3-controlling-transactions)\n for details). Call [`con.commit()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.commit \"sqlite3.Connection.commit\")\n on the connection object to commit the transaction:\n\ncon.commit()\n\nWe can verify that the data was inserted correctly by executing a `SELECT` query. Use the now-familiar [`cur.execute(...)`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute \"sqlite3.Cursor.execute\")\n to assign the result to `res`, and call [`res.fetchall()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchall \"sqlite3.Cursor.fetchall\")\n to return all resulting rows:\n\n\\>>>\n\n\\>>> res \\= cur.execute(\"SELECT score FROM movie\")\n\\>>> res.fetchall()\n\\[(8.2,), (7.5,)\\]\n\nThe result is a [`list`](https://docs.python.org/3/library/stdtypes.html#list \"list\")\n of two `tuple`s, one per row, each containing that row’s `score` value.\n\nNow, insert three more rows by calling [`cur.executemany(...)`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executemany \"sqlite3.Cursor.executemany\")\n:\n\ndata \\= \\[\\\n    (\"Monty Python Live at the Hollywood Bowl\", 1982, 7.9),\\\n    (\"Monty Python's The Meaning of Life\", 1983, 7.5),\\\n    (\"Monty Python's Life of Brian\", 1979, 8.0),\\\n\\]\ncur.executemany(\"INSERT INTO movie VALUES(?, ?, ?)\", data)\ncon.commit()  \\# Remember to commit the transaction after executing INSERT.\n\nNotice that `?` placeholders are used to bind `data` to the query. Always use placeholders instead of [string formatting](https://docs.python.org/3/tutorial/inputoutput.html#tut-formatting)\n to bind Python values to SQL statements, to avoid [SQL injection attacks](https://en.wikipedia.org/wiki/SQL_injection)\n (see [How to use placeholders to bind values in SQL queries](https://docs.python.org/3/library/sqlite3.html#sqlite3-placeholders)\n for more details).\n\nWe can verify that the new rows were inserted by executing a `SELECT` query, this time iterating over the results of the query:\n\n\\>>>\n\n\\>>> for row in cur.execute(\"SELECT year, title FROM movie ORDER BY year\"):\n...     print(row)\n(1971, 'And Now for Something Completely Different')\n(1975, 'Monty Python and the Holy Grail')\n(1979, \"Monty Python's Life of Brian\")\n(1982, 'Monty Python Live at the Hollywood Bowl')\n(1983, \"Monty Python's The Meaning of Life\")\n\nEach row is a two-item [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple \"tuple\")\n of `(year, title)`, matching the columns selected in the query.\n\nFinally, verify that the database has been written to disk by calling [`con.close()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.close \"sqlite3.Connection.close\")\n to close the existing connection, opening a new one, creating a new cursor, then querying the database:\n\n\\>>>\n\n\\>>> con.close()\n\\>>> new\\_con \\= sqlite3.connect(\"tutorial.db\")\n\\>>> new\\_cur \\= new\\_con.cursor()\n\\>>> res \\= new\\_cur.execute(\"SELECT title, year FROM movie ORDER BY score DESC\")\n\\>>> title, year \\= res.fetchone()\n\\>>> print(f'The highest scoring Monty Python movie is {title!r}, released in {year}')\nThe highest scoring Monty Python movie is 'Monty Python and the Holy Grail', released in 1975\n\\>>> new\\_con.close()\n\nYou’ve now created an SQLite database using the `sqlite3` module, inserted data and retrieved values from it in multiple ways.\n\nSee also\n\n*   [How-to guides](https://docs.python.org/3/library/sqlite3.html#sqlite3-howtos)\n     for further reading:\n    \n    *   [How to use placeholders to bind values in SQL queries](https://docs.python.org/3/library/sqlite3.html#sqlite3-placeholders)\n        \n    *   [How to adapt custom Python types to SQLite values](https://docs.python.org/3/library/sqlite3.html#sqlite3-adapters)\n        \n    *   [How to convert SQLite values to custom Python types](https://docs.python.org/3/library/sqlite3.html#sqlite3-converters)\n        \n    *   [How to use the connection context manager](https://docs.python.org/3/library/sqlite3.html#sqlite3-connection-context-manager)\n        \n    *   [How to create and use row factories](https://docs.python.org/3/library/sqlite3.html#sqlite3-howto-row-factory)\n        \n*   [Explanation](https://docs.python.org/3/library/sqlite3.html#sqlite3-explanation)\n     for in-depth background on transaction control.\n    \n\nReference[¶](https://docs.python.org/3/library/sqlite3.html#reference \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------\n\n### Module functions[¶](https://docs.python.org/3/library/sqlite3.html#module-functions \"Link to this heading\")\n\nsqlite3.connect(_database_, _timeout\\=5.0_, _detect\\_types\\=0_, _isolation\\_level\\='DEFERRED'_, _check\\_same\\_thread\\=True_, _factory\\=sqlite3.Connection_, _cached\\_statements\\=128_, _uri\\=False_, _\\*_, _autocommit\\=sqlite3.LEGACY\\_TRANSACTION\\_CONTROL_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.connect \"Link to this definition\")\n\nOpen a connection to an SQLite database.\n\nParameters:\n\n*   **database** ([path-like object](https://docs.python.org/3/glossary.html#term-path-like-object)\n    ) – The path to the database file to be opened. You can pass `\":memory:\"` to create an [SQLite database existing only in memory](https://sqlite.org/inmemorydb.html)\n    , and open a connection to it.\n    \n*   **timeout** ([_float_](https://docs.python.org/3/library/functions.html#float \"float\")\n    ) – How many seconds the connection should wait before raising an [`OperationalError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.OperationalError \"sqlite3.OperationalError\")\n     when a table is locked. If another connection opens a transaction to modify a table, that table will be locked until the transaction is committed. Default five seconds.\n    \n*   **detect\\_types** ([_int_](https://docs.python.org/3/library/functions.html#int \"int\")\n    ) – Control whether and how data types not [natively supported by SQLite](https://docs.python.org/3/library/sqlite3.html#sqlite3-types)\n     are looked up to be converted to Python types, using the converters registered with [`register_converter()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.register_converter \"sqlite3.register_converter\")\n    . Set it to any combination (using `|`, bitwise or) of [`PARSE_DECLTYPES`](https://docs.python.org/3/library/sqlite3.html#sqlite3.PARSE_DECLTYPES \"sqlite3.PARSE_DECLTYPES\")\n     and [`PARSE_COLNAMES`](https://docs.python.org/3/library/sqlite3.html#sqlite3.PARSE_COLNAMES \"sqlite3.PARSE_COLNAMES\")\n     to enable this. Column names takes precedence over declared types if both flags are set. Types cannot be detected for generated fields (for example `max(data)`), even when the _detect\\_types_ parameter is set; [`str`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n     will be returned instead. By default (`0`), type detection is disabled.\n    \n*   **isolation\\_level** ([_str_](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n     _|_ _None_) – Control legacy transaction handling behaviour. See [`Connection.isolation_level`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.isolation_level \"sqlite3.Connection.isolation_level\")\n     and [Transaction control via the isolation\\_level attribute](https://docs.python.org/3/library/sqlite3.html#sqlite3-transaction-control-isolation-level)\n     for more information. Can be `\"DEFERRED\"` (default), `\"EXCLUSIVE\"` or `\"IMMEDIATE\"`; or `None` to disable opening transactions implicitly. Has no effect unless [`Connection.autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit \"sqlite3.Connection.autocommit\")\n     is set to [`LEGACY_TRANSACTION_CONTROL`](https://docs.python.org/3/library/sqlite3.html#sqlite3.LEGACY_TRANSACTION_CONTROL \"sqlite3.LEGACY_TRANSACTION_CONTROL\")\n     (the default).\n    \n*   **check\\_same\\_thread** ([_bool_](https://docs.python.org/3/library/functions.html#bool \"bool\")\n    ) – If `True` (default), [`ProgrammingError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.ProgrammingError \"sqlite3.ProgrammingError\")\n     will be raised if the database connection is used by a thread other than the one that created it. If `False`, the connection may be accessed in multiple threads; write operations may need to be serialized by the user to avoid data corruption. See [`threadsafety`](https://docs.python.org/3/library/sqlite3.html#sqlite3.threadsafety \"sqlite3.threadsafety\")\n     for more information.\n    \n*   **factory** ([_Connection_](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection \"sqlite3.Connection\")\n    ) – A custom subclass of [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection \"sqlite3.Connection\")\n     to create the connection with, if not the default [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection \"sqlite3.Connection\")\n     class.\n    \n*   **cached\\_statements** ([_int_](https://docs.python.org/3/library/functions.html#int \"int\")\n    ) – The number of statements that `sqlite3` should internally cache for this connection, to avoid parsing overhead. By default, 128 statements.\n    \n*   **uri** ([_bool_](https://docs.python.org/3/library/functions.html#bool \"bool\")\n    ) – If set to `True`, _database_ is interpreted as a URI with a file path and an optional query string. The scheme part _must_ be `\"file:\"`, and the path can be relative or absolute. The query string allows passing parameters to SQLite, enabling various [How to work with SQLite URIs](https://docs.python.org/3/library/sqlite3.html#sqlite3-uri-tricks)\n    .\n    \n*   **autocommit** ([_bool_](https://docs.python.org/3/library/functions.html#bool \"bool\")\n    ) – Control [**PEP 249**](https://peps.python.org/pep-0249/)\n     transaction handling behaviour. See [`Connection.autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit \"sqlite3.Connection.autocommit\")\n     and [Transaction control via the autocommit attribute](https://docs.python.org/3/library/sqlite3.html#sqlite3-transaction-control-autocommit)\n     for more information. _autocommit_ currently defaults to [`LEGACY_TRANSACTION_CONTROL`](https://docs.python.org/3/library/sqlite3.html#sqlite3.LEGACY_TRANSACTION_CONTROL \"sqlite3.LEGACY_TRANSACTION_CONTROL\")\n    . The default will change to `False` in a future Python release.\n    \n\nReturn type:\n\n[_Connection_](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection \"sqlite3.Connection\")\n\nRaises an [auditing event](https://docs.python.org/3/library/sys.html#auditing)\n `sqlite3.connect` with argument `database`.\n\nRaises an [auditing event](https://docs.python.org/3/library/sys.html#auditing)\n `sqlite3.connect/handle` with argument `connection_handle`.\n\nChanged in version 3.4: Added the _uri_ parameter.\n\nChanged in version 3.7: _database_ can now also be a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object)\n, not only a string.\n\nChanged in version 3.10: Added the `sqlite3.connect/handle` auditing event.\n\nChanged in version 3.12: Added the _autocommit_ parameter.\n\nChanged in version 3.13: Positional use of the parameters _timeout_, _detect\\_types_, _isolation\\_level_, _check\\_same\\_thread_, _factory_, _cached\\_statements_, and _uri_ is deprecated. They will become keyword-only parameters in Python 3.15.\n\nsqlite3.complete\\_statement(_statement_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.complete_statement \"Link to this definition\")\n\nReturn `True` if the string _statement_ appears to contain one or more complete SQL statements. No syntactic verification or parsing of any kind is performed, other than checking that there are no unclosed string literals and the statement is terminated by a semicolon.\n\nFor example:\n\n\\>>>\n\n\\>>> sqlite3.complete\\_statement(\"SELECT foo FROM bar;\")\nTrue\n\\>>> sqlite3.complete\\_statement(\"SELECT foo\")\nFalse\n\nThis function may be useful during command-line input to determine if the entered text seems to form a complete SQL statement, or if additional input is needed before calling [`execute()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute \"sqlite3.Cursor.execute\")\n.\n\nSee `runsource()` in [Lib/sqlite3/\\_\\_main\\_\\_.py](https://github.com/python/cpython/tree/3.13/Lib/sqlite3/__main__.py)\n for real-world use.\n\nsqlite3.enable\\_callback\\_tracebacks(_flag_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.enable_callback_tracebacks \"Link to this definition\")\n\nEnable or disable callback tracebacks. By default you will not get any tracebacks in user-defined functions, aggregates, converters, authorizer callbacks etc. If you want to debug them, you can call this function with _flag_ set to `True`. Afterwards, you will get tracebacks from callbacks on [`sys.stderr`](https://docs.python.org/3/library/sys.html#sys.stderr \"sys.stderr\")\n. Use `False` to disable the feature again.\n\nNote\n\nErrors in user-defined function callbacks are logged as unraisable exceptions. Use an [`unraisable hook handler`](https://docs.python.org/3/library/sys.html#sys.unraisablehook \"sys.unraisablehook\")\n for introspection of the failed callback.\n\nsqlite3.register\\_adapter(_type_, _adapter_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.register_adapter \"Link to this definition\")\n\nRegister an _adapter_ [callable](https://docs.python.org/3/glossary.html#term-callable)\n to adapt the Python type _type_ into an SQLite type. The adapter is called with a Python object of type _type_ as its sole argument, and must return a value of a [type that SQLite natively understands](https://docs.python.org/3/library/sqlite3.html#sqlite3-types)\n.\n\nsqlite3.register\\_converter(_typename_, _converter_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.register_converter \"Link to this definition\")\n\nRegister the _converter_ [callable](https://docs.python.org/3/glossary.html#term-callable)\n to convert SQLite objects of type _typename_ into a Python object of a specific type. The converter is invoked for all SQLite values of type _typename_; it is passed a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"bytes\")\n object and should return an object of the desired Python type. Consult the parameter _detect\\_types_ of [`connect()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.connect \"sqlite3.connect\")\n for information regarding how type detection works.\n\nNote: _typename_ and the name of the type in your query are matched case-insensitively.\n\n### Module constants[¶](https://docs.python.org/3/library/sqlite3.html#module-constants \"Link to this heading\")\n\nsqlite3.LEGACY\\_TRANSACTION\\_CONTROL[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.LEGACY_TRANSACTION_CONTROL \"Link to this definition\")\n\nSet [`autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit \"sqlite3.Connection.autocommit\")\n to this constant to select old style (pre-Python 3.12) transaction control behaviour. See [Transaction control via the isolation\\_level attribute](https://docs.python.org/3/library/sqlite3.html#sqlite3-transaction-control-isolation-level)\n for more information.\n\nsqlite3.PARSE\\_COLNAMES[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.PARSE_COLNAMES \"Link to this definition\")\n\nPass this flag value to the _detect\\_types_ parameter of [`connect()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.connect \"sqlite3.connect\")\n to look up a converter function by using the type name, parsed from the query column name, as the converter dictionary key. The type name must be wrapped in square brackets (`[]`).\n\nSELECT p as \"p \\[point\\]\" FROM test;  ! will look up converter \"point\"\n\nThis flag may be combined with [`PARSE_DECLTYPES`](https://docs.python.org/3/library/sqlite3.html#sqlite3.PARSE_DECLTYPES \"sqlite3.PARSE_DECLTYPES\")\n using the `|` (bitwise or) operator.\n\nsqlite3.PARSE\\_DECLTYPES[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.PARSE_DECLTYPES \"Link to this definition\")\n\nPass this flag value to the _detect\\_types_ parameter of [`connect()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.connect \"sqlite3.connect\")\n to look up a converter function using the declared types for each column. The types are declared when the database table is created. `sqlite3` will look up a converter function using the first word of the declared type as the converter dictionary key. For example:\n\nCREATE TABLE test(\n   i integer primary key,  ! will look up a converter named \"integer\"\n   p point,                ! will look up a converter named \"point\"\n   n number(10)            ! will look up a converter named \"number\"\n )\n\nThis flag may be combined with [`PARSE_COLNAMES`](https://docs.python.org/3/library/sqlite3.html#sqlite3.PARSE_COLNAMES \"sqlite3.PARSE_COLNAMES\")\n using the `|` (bitwise or) operator.\n\nsqlite3.SQLITE\\_OK[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_OK \"Link to this definition\")\n\nsqlite3.SQLITE\\_DENY[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_DENY \"Link to this definition\")\n\nsqlite3.SQLITE\\_IGNORE[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_IGNORE \"Link to this definition\")\n\nFlags that should be returned by the _authorizer\\_callback_ [callable](https://docs.python.org/3/glossary.html#term-callable)\n passed to [`Connection.set_authorizer()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.set_authorizer \"sqlite3.Connection.set_authorizer\")\n, to indicate whether:\n\n*   Access is allowed (`SQLITE_OK`),\n    \n*   The SQL statement should be aborted with an error (`SQLITE_DENY`)\n    \n*   The column should be treated as a `NULL` value (`SQLITE_IGNORE`)\n    \n\nsqlite3.apilevel[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.apilevel \"Link to this definition\")\n\nString constant stating the supported DB-API level. Required by the DB-API. Hard-coded to `\"2.0\"`.\n\nsqlite3.paramstyle[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.paramstyle \"Link to this definition\")\n\nString constant stating the type of parameter marker formatting expected by the `sqlite3` module. Required by the DB-API. Hard-coded to `\"qmark\"`.\n\nNote\n\nThe `named` DB-API parameter style is also supported.\n\nsqlite3.sqlite\\_version[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.sqlite_version \"Link to this definition\")\n\nVersion number of the runtime SQLite library as a [`string`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n.\n\nsqlite3.sqlite\\_version\\_info[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.sqlite_version_info \"Link to this definition\")\n\nVersion number of the runtime SQLite library as a [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple \"tuple\")\n of [`integers`](https://docs.python.org/3/library/functions.html#int \"int\")\n.\n\nsqlite3.threadsafety[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.threadsafety \"Link to this definition\")\n\nInteger constant required by the DB-API 2.0, stating the level of thread safety the `sqlite3` module supports. This attribute is set based on the default [threading mode](https://sqlite.org/threadsafe.html)\n the underlying SQLite library is compiled with. The SQLite threading modes are:\n\n1.  **Single-thread**: In this mode, all mutexes are disabled and SQLite is unsafe to use in more than a single thread at once.\n    \n2.  **Multi-thread**: In this mode, SQLite can be safely used by multiple threads provided that no single database connection is used simultaneously in two or more threads.\n    \n3.  **Serialized**: In serialized mode, SQLite can be safely used by multiple threads with no restriction.\n    \n\nThe mappings from SQLite threading modes to DB-API 2.0 threadsafety levels are as follows:\n\n| SQLite threading mode | [**threadsafety**](https://peps.python.org/pep-0249/#threadsafety) | [SQLITE\\_THREADSAFE](https://sqlite.org/compile.html#threadsafe) | DB-API 2.0 meaning |\n| --- | --- | --- | --- |\n| single-thread | 0   | 0   | Threads may not share the module |\n| multi-thread | 1   | 2   | Threads may share the module, but not connections |\n| serialized | 3   | 1   | Threads may share the module, connections and cursors |\n\nChanged in version 3.11: Set _threadsafety_ dynamically instead of hard-coding it to `1`.\n\nsqlite3.version[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.version \"Link to this definition\")\n\nVersion number of this module as a [`string`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n. This is not the version of the SQLite library.\n\nDeprecated since version 3.12, will be removed in version 3.14: This constant used to reflect the version number of the `pysqlite` package, a third-party library which used to upstream changes to `sqlite3`. Today, it carries no meaning or practical value.\n\nsqlite3.version\\_info[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.version_info \"Link to this definition\")\n\nVersion number of this module as a [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple \"tuple\")\n of [`integers`](https://docs.python.org/3/library/functions.html#int \"int\")\n. This is not the version of the SQLite library.\n\nDeprecated since version 3.12, will be removed in version 3.14: This constant used to reflect the version number of the `pysqlite` package, a third-party library which used to upstream changes to `sqlite3`. Today, it carries no meaning or practical value.\n\nsqlite3.SQLITE\\_DBCONFIG\\_DEFENSIVE[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_DBCONFIG_DEFENSIVE \"Link to this definition\")\n\nsqlite3.SQLITE\\_DBCONFIG\\_DQS\\_DDL[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_DBCONFIG_DQS_DDL \"Link to this definition\")\n\nsqlite3.SQLITE\\_DBCONFIG\\_DQS\\_DML[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_DBCONFIG_DQS_DML \"Link to this definition\")\n\nsqlite3.SQLITE\\_DBCONFIG\\_ENABLE\\_FKEY[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_DBCONFIG_ENABLE_FKEY \"Link to this definition\")\n\nsqlite3.SQLITE\\_DBCONFIG\\_ENABLE\\_FTS3\\_TOKENIZER[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_DBCONFIG_ENABLE_FTS3_TOKENIZER \"Link to this definition\")\n\nsqlite3.SQLITE\\_DBCONFIG\\_ENABLE\\_LOAD\\_EXTENSION[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_DBCONFIG_ENABLE_LOAD_EXTENSION \"Link to this definition\")\n\nsqlite3.SQLITE\\_DBCONFIG\\_ENABLE\\_QPSG[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_DBCONFIG_ENABLE_QPSG \"Link to this definition\")\n\nsqlite3.SQLITE\\_DBCONFIG\\_ENABLE\\_TRIGGER[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_DBCONFIG_ENABLE_TRIGGER \"Link to this definition\")\n\nsqlite3.SQLITE\\_DBCONFIG\\_ENABLE\\_VIEW[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_DBCONFIG_ENABLE_VIEW \"Link to this definition\")\n\nsqlite3.SQLITE\\_DBCONFIG\\_LEGACY\\_ALTER\\_TABLE[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_DBCONFIG_LEGACY_ALTER_TABLE \"Link to this definition\")\n\nsqlite3.SQLITE\\_DBCONFIG\\_LEGACY\\_FILE\\_FORMAT[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_DBCONFIG_LEGACY_FILE_FORMAT \"Link to this definition\")\n\nsqlite3.SQLITE\\_DBCONFIG\\_NO\\_CKPT\\_ON\\_CLOSE[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_DBCONFIG_NO_CKPT_ON_CLOSE \"Link to this definition\")\n\nsqlite3.SQLITE\\_DBCONFIG\\_RESET\\_DATABASE[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_DBCONFIG_RESET_DATABASE \"Link to this definition\")\n\nsqlite3.SQLITE\\_DBCONFIG\\_TRIGGER\\_EQP[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_DBCONFIG_TRIGGER_EQP \"Link to this definition\")\n\nsqlite3.SQLITE\\_DBCONFIG\\_TRUSTED\\_SCHEMA[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_DBCONFIG_TRUSTED_SCHEMA \"Link to this definition\")\n\nsqlite3.SQLITE\\_DBCONFIG\\_WRITABLE\\_SCHEMA[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_DBCONFIG_WRITABLE_SCHEMA \"Link to this definition\")\n\nThese constants are used for the [`Connection.setconfig()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.setconfig \"sqlite3.Connection.setconfig\")\n and [`getconfig()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.getconfig \"sqlite3.Connection.getconfig\")\n methods.\n\nThe availability of these constants varies depending on the version of SQLite Python was compiled with.\n\nAdded in version 3.12.\n\nSee also\n\n[https://www.sqlite.org/c3ref/c\\_dbconfig\\_defensive.html](https://www.sqlite.org/c3ref/c_dbconfig_defensive.html)\n\nSQLite docs: Database Connection Configuration Options\n\n### Connection objects[¶](https://docs.python.org/3/library/sqlite3.html#connection-objects \"Link to this heading\")\n\n_class_ sqlite3.Connection[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection \"Link to this definition\")\n\nEach open SQLite database is represented by a `Connection` object, which is created using [`sqlite3.connect()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.connect \"sqlite3.connect\")\n. Their main purpose is creating [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor \"sqlite3.Cursor\")\n objects, and [Transaction control](https://docs.python.org/3/library/sqlite3.html#sqlite3-controlling-transactions)\n.\n\nSee also\n\n*   [How to use connection shortcut methods](https://docs.python.org/3/library/sqlite3.html#sqlite3-connection-shortcuts)\n    \n*   [How to use the connection context manager](https://docs.python.org/3/library/sqlite3.html#sqlite3-connection-context-manager)\n    \n\nChanged in version 3.13: A [`ResourceWarning`](https://docs.python.org/3/library/exceptions.html#ResourceWarning \"ResourceWarning\")\n is emitted if [`close()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.close \"sqlite3.Connection.close\")\n is not called before a `Connection` object is deleted.\n\nAn SQLite database connection has the following attributes and methods:\n\ncursor(_factory\\=Cursor_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.cursor \"Link to this definition\")\n\nCreate and return a [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor \"sqlite3.Cursor\")\n object. The cursor method accepts a single optional parameter _factory_. If supplied, this must be a [callable](https://docs.python.org/3/glossary.html#term-callable)\n returning an instance of [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor \"sqlite3.Cursor\")\n or its subclasses.\n\nblobopen(_table_, _column_, _row_, _/_, _\\*_, _readonly\\=False_, _name\\='main'_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.blobopen \"Link to this definition\")\n\nOpen a [`Blob`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Blob \"sqlite3.Blob\")\n handle to an existing BLOB.\n\nParameters:\n\n*   **table** ([_str_](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n    ) – The name of the table where the blob is located.\n    \n*   **column** ([_str_](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n    ) – The name of the column where the blob is located.\n    \n*   **row** ([_str_](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n    ) – The name of the row where the blob is located.\n    \n*   **readonly** ([_bool_](https://docs.python.org/3/library/functions.html#bool \"bool\")\n    ) – Set to `True` if the blob should be opened without write permissions. Defaults to `False`.\n    \n*   **name** ([_str_](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n    ) – The name of the database where the blob is located. Defaults to `\"main\"`.\n    \n\nRaises:\n\n[**OperationalError**](https://docs.python.org/3/library/sqlite3.html#sqlite3.OperationalError \"sqlite3.OperationalError\")\n – When trying to open a blob in a `WITHOUT ROWID` table.\n\nReturn type:\n\n[Blob](https://docs.python.org/3/library/sqlite3.html#sqlite3.Blob \"sqlite3.Blob\")\n\nNote\n\nThe blob size cannot be changed using the [`Blob`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Blob \"sqlite3.Blob\")\n class. Use the SQL function `zeroblob` to create a blob with a fixed size.\n\nAdded in version 3.11.\n\ncommit()[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.commit \"Link to this definition\")\n\nCommit any pending transaction to the database. If [`autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit \"sqlite3.Connection.autocommit\")\n is `True`, or there is no open transaction, this method does nothing. If `autocommit` is `False`, a new transaction is implicitly opened if a pending transaction was committed by this method.\n\nrollback()[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.rollback \"Link to this definition\")\n\nRoll back to the start of any pending transaction. If [`autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit \"sqlite3.Connection.autocommit\")\n is `True`, or there is no open transaction, this method does nothing. If `autocommit` is `False`, a new transaction is implicitly opened if a pending transaction was rolled back by this method.\n\nclose()[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.close \"Link to this definition\")\n\nClose the database connection. If [`autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit \"sqlite3.Connection.autocommit\")\n is `False`, any pending transaction is implicitly rolled back. If `autocommit` is `True` or [`LEGACY_TRANSACTION_CONTROL`](https://docs.python.org/3/library/sqlite3.html#sqlite3.LEGACY_TRANSACTION_CONTROL \"sqlite3.LEGACY_TRANSACTION_CONTROL\")\n, no implicit transaction control is executed. Make sure to [`commit()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.commit \"sqlite3.Connection.commit\")\n before closing to avoid losing pending changes.\n\nexecute(_sql_, _parameters\\=()_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.execute \"Link to this definition\")\n\nCreate a new [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor \"sqlite3.Cursor\")\n object and call [`execute()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute \"sqlite3.Cursor.execute\")\n on it with the given _sql_ and _parameters_. Return the new cursor object.\n\nexecutemany(_sql_, _parameters_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.executemany \"Link to this definition\")\n\nCreate a new [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor \"sqlite3.Cursor\")\n object and call [`executemany()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executemany \"sqlite3.Cursor.executemany\")\n on it with the given _sql_ and _parameters_. Return the new cursor object.\n\nexecutescript(_sql\\_script_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.executescript \"Link to this definition\")\n\nCreate a new [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor \"sqlite3.Cursor\")\n object and call [`executescript()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executescript \"sqlite3.Cursor.executescript\")\n on it with the given _sql\\_script_. Return the new cursor object.\n\ncreate\\_function(_name_, _narg_, _func_, _\\*_, _deterministic\\=False_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.create_function \"Link to this definition\")\n\nCreate or remove a user-defined SQL function.\n\nParameters:\n\n*   **name** ([_str_](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n    ) – The name of the SQL function.\n    \n*   **narg** ([_int_](https://docs.python.org/3/library/functions.html#int \"int\")\n    ) – The number of arguments the SQL function can accept. If `-1`, it may take any number of arguments.\n    \n*   **func** ([callback](https://docs.python.org/3/glossary.html#term-callback)\n     | None) – A [callable](https://docs.python.org/3/glossary.html#term-callable)\n     that is called when the SQL function is invoked. The callable must return [a type natively supported by SQLite](https://docs.python.org/3/library/sqlite3.html#sqlite3-types)\n    . Set to `None` to remove an existing SQL function.\n    \n*   **deterministic** ([_bool_](https://docs.python.org/3/library/functions.html#bool \"bool\")\n    ) – If `True`, the created SQL function is marked as [deterministic](https://sqlite.org/deterministic.html)\n    , which allows SQLite to perform additional optimizations.\n    \n\nChanged in version 3.8: Added the _deterministic_ parameter.\n\nExample:\n\n\\>>>\n\n\\>>> import hashlib\n\\>>> def md5sum(t):\n...     return hashlib.md5(t).hexdigest()\n\\>>> con \\= sqlite3.connect(\":memory:\")\n\\>>> con.create\\_function(\"md5\", 1, md5sum)\n\\>>> for row in con.execute(\"SELECT md5(?)\", (b\"foo\",)):\n...     print(row)\n('acbd18db4cc2f85cedef654fccc4a4d8',)\n\\>>> con.close()\n\nChanged in version 3.13: Passing _name_, _narg_, and _func_ as keyword arguments is deprecated. These parameters will become positional-only in Python 3.15.\n\ncreate\\_aggregate(_name_, _n\\_arg_, _aggregate\\_class_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.create_aggregate \"Link to this definition\")\n\nCreate or remove a user-defined SQL aggregate function.\n\nParameters:\n\n*   **name** ([_str_](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n    ) – The name of the SQL aggregate function.\n    \n*   **n\\_arg** ([_int_](https://docs.python.org/3/library/functions.html#int \"int\")\n    ) – The number of arguments the SQL aggregate function can accept. If `-1`, it may take any number of arguments.\n    \n*   **aggregate\\_class** ([class](https://docs.python.org/3/glossary.html#term-class)\n     | None) –\n    \n    A class must implement the following methods:\n    \n    *   `step()`: Add a row to the aggregate.\n        \n    *   `finalize()`: Return the final result of the aggregate as [a type natively supported by SQLite](https://docs.python.org/3/library/sqlite3.html#sqlite3-types)\n        .\n        \n    \n    The number of arguments that the `step()` method must accept is controlled by _n\\_arg_.\n    \n    Set to `None` to remove an existing SQL aggregate function.\n    \n\nExample:\n\nclass MySum:\n    def \\_\\_init\\_\\_(self):\n        self.count \\= 0\n\n    def step(self, value):\n        self.count += value\n\n    def finalize(self):\n        return self.count\n\ncon \\= sqlite3.connect(\":memory:\")\ncon.create\\_aggregate(\"mysum\", 1, MySum)\ncur \\= con.execute(\"CREATE TABLE test(i)\")\ncur.execute(\"INSERT INTO test(i) VALUES(1)\")\ncur.execute(\"INSERT INTO test(i) VALUES(2)\")\ncur.execute(\"SELECT mysum(i) FROM test\")\nprint(cur.fetchone()\\[0\\])\n\ncon.close()\n\nChanged in version 3.13: Passing _name_, _n\\_arg_, and _aggregate\\_class_ as keyword arguments is deprecated. These parameters will become positional-only in Python 3.15.\n\ncreate\\_window\\_function(_name_, _num\\_params_, _aggregate\\_class_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.create_window_function \"Link to this definition\")\n\nCreate or remove a user-defined aggregate window function.\n\nParameters:\n\n*   **name** ([_str_](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n    ) – The name of the SQL aggregate window function to create or remove.\n    \n*   **num\\_params** ([_int_](https://docs.python.org/3/library/functions.html#int \"int\")\n    ) – The number of arguments the SQL aggregate window function can accept. If `-1`, it may take any number of arguments.\n    \n*   **aggregate\\_class** ([class](https://docs.python.org/3/glossary.html#term-class)\n     | None) –\n    \n    A class that must implement the following methods:\n    \n    *   `step()`: Add a row to the current window.\n        \n    *   `value()`: Return the current value of the aggregate.\n        \n    *   `inverse()`: Remove a row from the current window.\n        \n    *   `finalize()`: Return the final result of the aggregate as [a type natively supported by SQLite](https://docs.python.org/3/library/sqlite3.html#sqlite3-types)\n        .\n        \n    \n    The number of arguments that the `step()` and `value()` methods must accept is controlled by _num\\_params_.\n    \n    Set to `None` to remove an existing SQL aggregate window function.\n    \n\nRaises:\n\n[**NotSupportedError**](https://docs.python.org/3/library/sqlite3.html#sqlite3.NotSupportedError \"sqlite3.NotSupportedError\")\n – If used with a version of SQLite older than 3.25.0, which does not support aggregate window functions.\n\nAdded in version 3.11.\n\nExample:\n\n\\# Example taken from https://www.sqlite.org/windowfunctions.html#udfwinfunc\nclass WindowSumInt:\n    def \\_\\_init\\_\\_(self):\n        self.count \\= 0\n\n    def step(self, value):\n        \"\"\"Add a row to the current window.\"\"\"\n        self.count += value\n\n    def value(self):\n        \"\"\"Return the current value of the aggregate.\"\"\"\n        return self.count\n\n    def inverse(self, value):\n        \"\"\"Remove a row from the current window.\"\"\"\n        self.count \\-= value\n\n    def finalize(self):\n        \"\"\"Return the final value of the aggregate.\n\n        Any clean-up actions should be placed here.\n        \"\"\"\n        return self.count\n\ncon \\= sqlite3.connect(\":memory:\")\ncur \\= con.execute(\"CREATE TABLE test(x, y)\")\nvalues \\= \\[\\\n    (\"a\", 4),\\\n    (\"b\", 5),\\\n    (\"c\", 3),\\\n    (\"d\", 8),\\\n    (\"e\", 1),\\\n\\]\ncur.executemany(\"INSERT INTO test VALUES(?, ?)\", values)\ncon.create\\_window\\_function(\"sumint\", 1, WindowSumInt)\ncur.execute(\"\"\"\n    SELECT x, sumint(y) OVER (\n        ORDER BY x ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING\n    ) AS sum\\_y\n    FROM test ORDER BY x\n\"\"\")\nprint(cur.fetchall())\ncon.close()\n\ncreate\\_collation(_name_, _callable_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.create_collation \"Link to this definition\")\n\nCreate a collation named _name_ using the collating function _callable_. _callable_ is passed two [`string`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n arguments, and it should return an [`integer`](https://docs.python.org/3/library/functions.html#int \"int\")\n:\n\n*   `1` if the first is ordered higher than the second\n    \n*   `-1` if the first is ordered lower than the second\n    \n*   `0` if they are ordered equal\n    \n\nThe following example shows a reverse sorting collation:\n\ndef collate\\_reverse(string1, string2):\n    if string1 \\== string2:\n        return 0\n    elif string1 < string2:\n        return 1\n    else:\n        return \\-1\n\ncon \\= sqlite3.connect(\":memory:\")\ncon.create\\_collation(\"reverse\", collate\\_reverse)\n\ncur \\= con.execute(\"CREATE TABLE test(x)\")\ncur.executemany(\"INSERT INTO test(x) VALUES(?)\", \\[(\"a\",), (\"b\",)\\])\ncur.execute(\"SELECT x FROM test ORDER BY x COLLATE reverse\")\nfor row in cur:\n    print(row)\ncon.close()\n\nRemove a collation function by setting _callable_ to `None`.\n\nChanged in version 3.11: The collation name can contain any Unicode character. Earlier, only ASCII characters were allowed.\n\ninterrupt()[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.interrupt \"Link to this definition\")\n\nCall this method from a different thread to abort any queries that might be executing on the connection. Aborted queries will raise an [`OperationalError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.OperationalError \"sqlite3.OperationalError\")\n.\n\nset\\_authorizer(_authorizer\\_callback_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.set_authorizer \"Link to this definition\")\n\nRegister [callable](https://docs.python.org/3/glossary.html#term-callable)\n _authorizer\\_callback_ to be invoked for each attempt to access a column of a table in the database. The callback should return one of [`SQLITE_OK`](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_OK \"sqlite3.SQLITE_OK\")\n, [`SQLITE_DENY`](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_DENY \"sqlite3.SQLITE_DENY\")\n, or [`SQLITE_IGNORE`](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_IGNORE \"sqlite3.SQLITE_IGNORE\")\n to signal how access to the column should be handled by the underlying SQLite library.\n\nThe first argument to the callback signifies what kind of operation is to be authorized. The second and third argument will be arguments or `None` depending on the first argument. The 4th argument is the name of the database (“main”, “temp”, etc.) if applicable. The 5th argument is the name of the inner-most trigger or view that is responsible for the access attempt or `None` if this access attempt is directly from input SQL code.\n\nPlease consult the SQLite documentation about the possible values for the first argument and the meaning of the second and third argument depending on the first one. All necessary constants are available in the `sqlite3` module.\n\nPassing `None` as _authorizer\\_callback_ will disable the authorizer.\n\nChanged in version 3.11: Added support for disabling the authorizer using `None`.\n\nChanged in version 3.13: Passing _authorizer\\_callback_ as a keyword argument is deprecated. The parameter will become positional-only in Python 3.15.\n\nset\\_progress\\_handler(_progress\\_handler_, _n_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.set_progress_handler \"Link to this definition\")\n\nRegister [callable](https://docs.python.org/3/glossary.html#term-callable)\n _progress\\_handler_ to be invoked for every _n_ instructions of the SQLite virtual machine. This is useful if you want to get called from SQLite during long-running operations, for example to update a GUI.\n\nIf you want to clear any previously installed progress handler, call the method with `None` for _progress\\_handler_.\n\nReturning a non-zero value from the handler function will terminate the currently executing query and cause it to raise a [`DatabaseError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.DatabaseError \"sqlite3.DatabaseError\")\n exception.\n\nChanged in version 3.13: Passing _progress\\_handler_ as a keyword argument is deprecated. The parameter will become positional-only in Python 3.15.\n\nset\\_trace\\_callback(_trace\\_callback_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.set_trace_callback \"Link to this definition\")\n\nRegister [callable](https://docs.python.org/3/glossary.html#term-callable)\n _trace\\_callback_ to be invoked for each SQL statement that is actually executed by the SQLite backend.\n\nThe only argument passed to the callback is the statement (as [`str`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n) that is being executed. The return value of the callback is ignored. Note that the backend does not only run statements passed to the [`Cursor.execute()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute \"sqlite3.Cursor.execute\")\n methods. Other sources include the [transaction management](https://docs.python.org/3/library/sqlite3.html#sqlite3-controlling-transactions)\n of the `sqlite3` module and the execution of triggers defined in the current database.\n\nPassing `None` as _trace\\_callback_ will disable the trace callback.\n\nNote\n\nExceptions raised in the trace callback are not propagated. As a development and debugging aid, use [`enable_callback_tracebacks()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.enable_callback_tracebacks \"sqlite3.enable_callback_tracebacks\")\n to enable printing tracebacks from exceptions raised in the trace callback.\n\nAdded in version 3.3.\n\nChanged in version 3.13: Passing _trace\\_callback_ as a keyword argument is deprecated. The parameter will become positional-only in Python 3.15.\n\nenable\\_load\\_extension(_enabled_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.enable_load_extension \"Link to this definition\")\n\nEnable the SQLite engine to load SQLite extensions from shared libraries if _enabled_ is `True`; else, disallow loading SQLite extensions. SQLite extensions can define new functions, aggregates or whole new virtual table implementations. One well-known extension is the fulltext-search extension distributed with SQLite.\n\nNote\n\nThe `sqlite3` module is not built with loadable extension support by default, because some platforms (notably macOS) have SQLite libraries which are compiled without this feature. To get loadable extension support, you must pass the [`--enable-loadable-sqlite-extensions`](https://docs.python.org/3/using/configure.html#cmdoption-enable-loadable-sqlite-extensions)\n option to **configure**.\n\nRaises an [auditing event](https://docs.python.org/3/library/sys.html#auditing)\n `sqlite3.enable_load_extension` with arguments `connection`, `enabled`.\n\nAdded in version 3.2.\n\nChanged in version 3.10: Added the `sqlite3.enable_load_extension` auditing event.\n\ncon.enable\\_load\\_extension(True)\n\n\\# Load the fulltext search extension\ncon.execute(\"select load\\_extension('./fts3.so')\")\n\n\\# alternatively you can load the extension using an API call:\n\\# con.load\\_extension(\"./fts3.so\")\n\n\\# disable extension loading again\ncon.enable\\_load\\_extension(False)\n\n\\# example from SQLite wiki\ncon.execute(\"CREATE VIRTUAL TABLE recipe USING fts3(name, ingredients)\")\ncon.executescript(\"\"\"\n    INSERT INTO recipe (name, ingredients) VALUES('broccoli stew', 'broccoli peppers cheese tomatoes');\n    INSERT INTO recipe (name, ingredients) VALUES('pumpkin stew', 'pumpkin onions garlic celery');\n    INSERT INTO recipe (name, ingredients) VALUES('broccoli pie', 'broccoli cheese onions flour');\n    INSERT INTO recipe (name, ingredients) VALUES('pumpkin pie', 'pumpkin sugar flour butter');\n    \"\"\")\nfor row in con.execute(\"SELECT rowid, name, ingredients FROM recipe WHERE name MATCH 'pie'\"):\n    print(row)\n\nload\\_extension(_path_, _/_, _\\*_, _entrypoint\\=None_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.load_extension \"Link to this definition\")\n\nLoad an SQLite extension from a shared library. Enable extension loading with [`enable_load_extension()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.enable_load_extension \"sqlite3.Connection.enable_load_extension\")\n before calling this method.\n\nParameters:\n\n*   **path** ([_str_](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n    ) – The path to the SQLite extension.\n    \n*   **entrypoint** ([_str_](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n     _|_ _None_) – Entry point name. If `None` (the default), SQLite will come up with an entry point name of its own; see the SQLite docs [Loading an Extension](https://www.sqlite.org/loadext.html#loading_an_extension)\n     for details.\n    \n\nRaises an [auditing event](https://docs.python.org/3/library/sys.html#auditing)\n `sqlite3.load_extension` with arguments `connection`, `path`.\n\nAdded in version 3.2.\n\nChanged in version 3.10: Added the `sqlite3.load_extension` auditing event.\n\nChanged in version 3.12: Added the _entrypoint_ parameter.\n\niterdump(_\\*_, _filter\\=None_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.iterdump \"Link to this definition\")\n\nReturn an [iterator](https://docs.python.org/3/glossary.html#term-iterator)\n to dump the database as SQL source code. Useful when saving an in-memory database for later restoration. Similar to the `.dump` command in the **sqlite3** shell.\n\nParameters:\n\n**filter** ([_str_](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n _|_ _None_) – An optional `LIKE` pattern for database objects to dump, e.g. `prefix_%`. If `None` (the default), all database objects will be included.\n\nExample:\n\n\\# Convert file example.db to SQL dump file dump.sql\ncon \\= sqlite3.connect('example.db')\nwith open('dump.sql', 'w') as f:\n    for line in con.iterdump():\n        f.write('%s\\\\n' % line)\ncon.close()\n\nSee also\n\n[How to handle non-UTF-8 text encodings](https://docs.python.org/3/library/sqlite3.html#sqlite3-howto-encoding)\n\nChanged in version 3.13: Added the _filter_ parameter.\n\nbackup(_target_, _\\*_, _pages\\=\\-1_, _progress\\=None_, _name\\='main'_, _sleep\\=0.250_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.backup \"Link to this definition\")\n\nCreate a backup of an SQLite database.\n\nWorks even if the database is being accessed by other clients or concurrently by the same connection.\n\nParameters:\n\n*   **target** ([_Connection_](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection \"sqlite3.Connection\")\n    ) – The database connection to save the backup to.\n    \n*   **pages** ([_int_](https://docs.python.org/3/library/functions.html#int \"int\")\n    ) – The number of pages to copy at a time. If equal to or less than `0`, the entire database is copied in a single step. Defaults to `-1`.\n    \n*   **progress** ([callback](https://docs.python.org/3/glossary.html#term-callback)\n     | None) – If set to a [callable](https://docs.python.org/3/glossary.html#term-callable)\n    , it is invoked with three integer arguments for every backup iteration: the _status_ of the last iteration, the _remaining_ number of pages still to be copied, and the _total_ number of pages. Defaults to `None`.\n    \n*   **name** ([_str_](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n    ) – The name of the database to back up. Either `\"main\"` (the default) for the main database, `\"temp\"` for the temporary database, or the name of a custom database as attached using the `ATTACH DATABASE` SQL statement.\n    \n*   **sleep** ([_float_](https://docs.python.org/3/library/functions.html#float \"float\")\n    ) – The number of seconds to sleep between successive attempts to back up remaining pages.\n    \n\nExample 1, copy an existing database into another:\n\ndef progress(status, remaining, total):\n    print(f'Copied {total\\-remaining} of {total} pages...')\n\nsrc \\= sqlite3.connect('example.db')\ndst \\= sqlite3.connect('backup.db')\nwith dst:\n    src.backup(dst, pages\\=1, progress\\=progress)\ndst.close()\nsrc.close()\n\nExample 2, copy an existing database into a transient copy:\n\nsrc \\= sqlite3.connect('example.db')\ndst \\= sqlite3.connect(':memory:')\nsrc.backup(dst)\ndst.close()\nsrc.close()\n\nAdded in version 3.7.\n\nSee also\n\n[How to handle non-UTF-8 text encodings](https://docs.python.org/3/library/sqlite3.html#sqlite3-howto-encoding)\n\ngetlimit(_category_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.getlimit \"Link to this definition\")\n\nGet a connection runtime limit.\n\nParameters:\n\n**category** ([_int_](https://docs.python.org/3/library/functions.html#int \"int\")\n) – The [SQLite limit category](https://www.sqlite.org/c3ref/c_limit_attached.html)\n to be queried.\n\nReturn type:\n\n[int](https://docs.python.org/3/library/functions.html#int \"int\")\n\nRaises:\n\n[**ProgrammingError**](https://docs.python.org/3/library/sqlite3.html#sqlite3.ProgrammingError \"sqlite3.ProgrammingError\")\n – If _category_ is not recognised by the underlying SQLite library.\n\nExample, query the maximum length of an SQL statement for [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection \"sqlite3.Connection\")\n `con` (the default is 1000000000):\n\n\\>>>\n\n\\>>> con.getlimit(sqlite3.SQLITE\\_LIMIT\\_SQL\\_LENGTH)\n1000000000\n\nAdded in version 3.11.\n\nsetlimit(_category_, _limit_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.setlimit \"Link to this definition\")\n\nSet a connection runtime limit. Attempts to increase a limit above its hard upper bound are silently truncated to the hard upper bound. Regardless of whether or not the limit was changed, the prior value of the limit is returned.\n\nParameters:\n\n*   **category** ([_int_](https://docs.python.org/3/library/functions.html#int \"int\")\n    ) – The [SQLite limit category](https://www.sqlite.org/c3ref/c_limit_attached.html)\n     to be set.\n    \n*   **limit** ([_int_](https://docs.python.org/3/library/functions.html#int \"int\")\n    ) – The value of the new limit. If negative, the current limit is unchanged.\n    \n\nReturn type:\n\n[int](https://docs.python.org/3/library/functions.html#int \"int\")\n\nRaises:\n\n[**ProgrammingError**](https://docs.python.org/3/library/sqlite3.html#sqlite3.ProgrammingError \"sqlite3.ProgrammingError\")\n – If _category_ is not recognised by the underlying SQLite library.\n\nExample, limit the number of attached databases to 1 for [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection \"sqlite3.Connection\")\n `con` (the default limit is 10):\n\n\\>>>\n\n\\>>> con.setlimit(sqlite3.SQLITE\\_LIMIT\\_ATTACHED, 1)\n10\n\\>>> con.getlimit(sqlite3.SQLITE\\_LIMIT\\_ATTACHED)\n1\n\nAdded in version 3.11.\n\ngetconfig(_op_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.getconfig \"Link to this definition\")\n\nQuery a boolean connection configuration option.\n\nParameters:\n\n**op** ([_int_](https://docs.python.org/3/library/functions.html#int \"int\")\n) – A [SQLITE\\_DBCONFIG code](https://docs.python.org/3/library/sqlite3.html#sqlite3-dbconfig-constants)\n.\n\nReturn type:\n\n[bool](https://docs.python.org/3/library/functions.html#bool \"bool\")\n\nAdded in version 3.12.\n\nsetconfig(_op_, _enable\\=True_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.setconfig \"Link to this definition\")\n\nSet a boolean connection configuration option.\n\nParameters:\n\n*   **op** ([_int_](https://docs.python.org/3/library/functions.html#int \"int\")\n    ) – A [SQLITE\\_DBCONFIG code](https://docs.python.org/3/library/sqlite3.html#sqlite3-dbconfig-constants)\n    .\n    \n*   **enable** ([_bool_](https://docs.python.org/3/library/functions.html#bool \"bool\")\n    ) – `True` if the configuration option should be enabled (default); `False` if it should be disabled.\n    \n\nAdded in version 3.12.\n\nserialize(_\\*_, _name\\='main'_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.serialize \"Link to this definition\")\n\nSerialize a database into a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"bytes\")\n object. For an ordinary on-disk database file, the serialization is just a copy of the disk file. For an in-memory database or a “temp” database, the serialization is the same sequence of bytes which would be written to disk if that database were backed up to disk.\n\nParameters:\n\n**name** ([_str_](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n) – The database name to be serialized. Defaults to `\"main\"`.\n\nReturn type:\n\n[bytes](https://docs.python.org/3/library/stdtypes.html#bytes \"bytes\")\n\nNote\n\nThis method is only available if the underlying SQLite library has the serialize API.\n\nAdded in version 3.11.\n\ndeserialize(_data_, _/_, _\\*_, _name\\='main'_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.deserialize \"Link to this definition\")\n\nDeserialize a [`serialized`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.serialize \"sqlite3.Connection.serialize\")\n database into a [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection \"sqlite3.Connection\")\n. This method causes the database connection to disconnect from database _name_, and reopen _name_ as an in-memory database based on the serialization contained in _data_.\n\nParameters:\n\n*   **data** ([_bytes_](https://docs.python.org/3/library/stdtypes.html#bytes \"bytes\")\n    ) – A serialized database.\n    \n*   **name** ([_str_](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n    ) – The database name to deserialize into. Defaults to `\"main\"`.\n    \n\nRaises:\n\n*   [**OperationalError**](https://docs.python.org/3/library/sqlite3.html#sqlite3.OperationalError \"sqlite3.OperationalError\")\n     – If the database connection is currently involved in a read transaction or a backup operation.\n    \n*   [**DatabaseError**](https://docs.python.org/3/library/sqlite3.html#sqlite3.DatabaseError \"sqlite3.DatabaseError\")\n     – If _data_ does not contain a valid SQLite database.\n    \n*   [**OverflowError**](https://docs.python.org/3/library/exceptions.html#OverflowError \"OverflowError\")\n     – If [`len(data)`](https://docs.python.org/3/library/functions.html#len \"len\")\n     is larger than `2**63 - 1`.\n    \n\nNote\n\nThis method is only available if the underlying SQLite library has the deserialize API.\n\nAdded in version 3.11.\n\nautocommit[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit \"Link to this definition\")\n\nThis attribute controls [**PEP 249**](https://peps.python.org/pep-0249/)\n\\-compliant transaction behaviour. `autocommit` has three allowed values:\n\n*   `False`: Select [**PEP 249**](https://peps.python.org/pep-0249/)\n    \\-compliant transaction behaviour, implying that `sqlite3` ensures a transaction is always open. Use [`commit()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.commit \"sqlite3.Connection.commit\")\n     and [`rollback()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.rollback \"sqlite3.Connection.rollback\")\n     to close transactions.\n    \n    This is the recommended value of `autocommit`.\n    \n*   `True`: Use SQLite’s [autocommit mode](https://www.sqlite.org/lang_transaction.html#implicit_versus_explicit_transactions)\n    . [`commit()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.commit \"sqlite3.Connection.commit\")\n     and [`rollback()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.rollback \"sqlite3.Connection.rollback\")\n     have no effect in this mode.\n    \n*   [`LEGACY_TRANSACTION_CONTROL`](https://docs.python.org/3/library/sqlite3.html#sqlite3.LEGACY_TRANSACTION_CONTROL \"sqlite3.LEGACY_TRANSACTION_CONTROL\")\n    : Pre-Python 3.12 (non-[**PEP 249**](https://peps.python.org/pep-0249/)\n    \\-compliant) transaction control. See [`isolation_level`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.isolation_level \"sqlite3.Connection.isolation_level\")\n     for more details.\n    \n    This is currently the default value of `autocommit`.\n    \n\nChanging `autocommit` to `False` will open a new transaction, and changing it to `True` will commit any pending transaction.\n\nSee [Transaction control via the autocommit attribute](https://docs.python.org/3/library/sqlite3.html#sqlite3-transaction-control-autocommit)\n for more details.\n\nNote\n\nThe [`isolation_level`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.isolation_level \"sqlite3.Connection.isolation_level\")\n attribute has no effect unless [`autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit \"sqlite3.Connection.autocommit\")\n is [`LEGACY_TRANSACTION_CONTROL`](https://docs.python.org/3/library/sqlite3.html#sqlite3.LEGACY_TRANSACTION_CONTROL \"sqlite3.LEGACY_TRANSACTION_CONTROL\")\n.\n\nAdded in version 3.12.\n\nin\\_transaction[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.in_transaction \"Link to this definition\")\n\nThis read-only attribute corresponds to the low-level SQLite [autocommit mode](https://www.sqlite.org/lang_transaction.html#implicit_versus_explicit_transactions)\n.\n\n`True` if a transaction is active (there are uncommitted changes), `False` otherwise.\n\nAdded in version 3.2.\n\nisolation\\_level[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.isolation_level \"Link to this definition\")\n\nControls the [legacy transaction handling mode](https://docs.python.org/3/library/sqlite3.html#sqlite3-transaction-control-isolation-level)\n of `sqlite3`. If set to `None`, transactions are never implicitly opened. If set to one of `\"DEFERRED\"`, `\"IMMEDIATE\"`, or `\"EXCLUSIVE\"`, corresponding to the underlying [SQLite transaction behaviour](https://www.sqlite.org/lang_transaction.html#deferred_immediate_and_exclusive_transactions)\n, [implicit transaction management](https://docs.python.org/3/library/sqlite3.html#sqlite3-transaction-control-isolation-level)\n is performed.\n\nIf not overridden by the _isolation\\_level_ parameter of [`connect()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.connect \"sqlite3.connect\")\n, the default is `\"\"`, which is an alias for `\"DEFERRED\"`.\n\nNote\n\nUsing [`autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit \"sqlite3.Connection.autocommit\")\n to control transaction handling is recommended over using `isolation_level`. `isolation_level` has no effect unless [`autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit \"sqlite3.Connection.autocommit\")\n is set to [`LEGACY_TRANSACTION_CONTROL`](https://docs.python.org/3/library/sqlite3.html#sqlite3.LEGACY_TRANSACTION_CONTROL \"sqlite3.LEGACY_TRANSACTION_CONTROL\")\n (the default).\n\nrow\\_factory[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.row_factory \"Link to this definition\")\n\nThe initial [`row_factory`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.row_factory \"sqlite3.Cursor.row_factory\")\n for [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor \"sqlite3.Cursor\")\n objects created from this connection. Assigning to this attribute does not affect the `row_factory` of existing cursors belonging to this connection, only new ones. Is `None` by default, meaning each row is returned as a [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple \"tuple\")\n.\n\nSee [How to create and use row factories](https://docs.python.org/3/library/sqlite3.html#sqlite3-howto-row-factory)\n for more details.\n\ntext\\_factory[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.text_factory \"Link to this definition\")\n\nA [callable](https://docs.python.org/3/glossary.html#term-callable)\n that accepts a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"bytes\")\n parameter and returns a text representation of it. The callable is invoked for SQLite values with the `TEXT` data type. By default, this attribute is set to [`str`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n.\n\nSee [How to handle non-UTF-8 text encodings](https://docs.python.org/3/library/sqlite3.html#sqlite3-howto-encoding)\n for more details.\n\ntotal\\_changes[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.total_changes \"Link to this definition\")\n\nReturn the total number of database rows that have been modified, inserted, or deleted since the database connection was opened.\n\n### Cursor objects[¶](https://docs.python.org/3/library/sqlite3.html#cursor-objects \"Link to this heading\")\n\n> A `Cursor` object represents a [database cursor](https://en.wikipedia.org/wiki/Cursor_(databases))\n>  which is used to execute SQL statements, and manage the context of a fetch operation. Cursors are created using [`Connection.cursor()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.cursor \"sqlite3.Connection.cursor\")\n> , or by using any of the [connection shortcut methods](https://docs.python.org/3/library/sqlite3.html#sqlite3-connection-shortcuts)\n> .\n> \n> Cursor objects are [iterators](https://docs.python.org/3/glossary.html#term-iterator)\n> , meaning that if you [`execute()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute \"sqlite3.Cursor.execute\")\n>  a `SELECT` query, you can simply iterate over the cursor to fetch the resulting rows:\n> \n> for row in cur.execute(\"SELECT t FROM data\"):\n>     print(row)\n\n_class_ sqlite3.Cursor[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor \"Link to this definition\")\n\nA [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor \"sqlite3.Cursor\")\n instance has the following attributes and methods.\n\nexecute(_sql_, _parameters\\=()_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute \"Link to this definition\")\n\nExecute a single SQL statement, optionally binding Python values using [placeholders](https://docs.python.org/3/library/sqlite3.html#sqlite3-placeholders)\n.\n\nParameters:\n\n*   **sql** ([_str_](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n    ) – A single SQL statement.\n    \n*   **parameters** ([`dict`](https://docs.python.org/3/library/stdtypes.html#dict \"dict\")\n     | [sequence](https://docs.python.org/3/glossary.html#term-sequence)\n    ) – Python values to bind to placeholders in _sql_. A `dict` if named placeholders are used. A sequence if unnamed placeholders are used. See [How to use placeholders to bind values in SQL queries](https://docs.python.org/3/library/sqlite3.html#sqlite3-placeholders)\n    .\n    \n\nRaises:\n\n[**ProgrammingError**](https://docs.python.org/3/library/sqlite3.html#sqlite3.ProgrammingError \"sqlite3.ProgrammingError\")\n – If _sql_ contains more than one SQL statement.\n\nIf [`autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit \"sqlite3.Connection.autocommit\")\n is [`LEGACY_TRANSACTION_CONTROL`](https://docs.python.org/3/library/sqlite3.html#sqlite3.LEGACY_TRANSACTION_CONTROL \"sqlite3.LEGACY_TRANSACTION_CONTROL\")\n, [`isolation_level`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.isolation_level \"sqlite3.Connection.isolation_level\")\n is not `None`, _sql_ is an `INSERT`, `UPDATE`, `DELETE`, or `REPLACE` statement, and there is no open transaction, a transaction is implicitly opened before executing _sql_.\n\nDeprecated since version 3.12, will be removed in version 3.14: [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning \"DeprecationWarning\")\n is emitted if [named placeholders](https://docs.python.org/3/library/sqlite3.html#sqlite3-placeholders)\n are used and _parameters_ is a sequence instead of a [`dict`](https://docs.python.org/3/library/stdtypes.html#dict \"dict\")\n. Starting with Python 3.14, [`ProgrammingError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.ProgrammingError \"sqlite3.ProgrammingError\")\n will be raised instead.\n\nUse [`executescript()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executescript \"sqlite3.Cursor.executescript\")\n to execute multiple SQL statements.\n\nexecutemany(_sql_, _parameters_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executemany \"Link to this definition\")\n\nFor every item in _parameters_, repeatedly execute the [parameterized](https://docs.python.org/3/library/sqlite3.html#sqlite3-placeholders)\n DML SQL statement _sql_.\n\nUses the same implicit transaction handling as [`execute()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute \"sqlite3.Cursor.execute\")\n.\n\nParameters:\n\n*   **sql** ([_str_](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n    ) – A single SQL DML statement.\n    \n*   **parameters** ([iterable](https://docs.python.org/3/glossary.html#term-iterable)\n    ) – An iterable of parameters to bind with the placeholders in _sql_. See [How to use placeholders to bind values in SQL queries](https://docs.python.org/3/library/sqlite3.html#sqlite3-placeholders)\n    .\n    \n\nRaises:\n\n[**ProgrammingError**](https://docs.python.org/3/library/sqlite3.html#sqlite3.ProgrammingError \"sqlite3.ProgrammingError\")\n – If _sql_ contains more than one SQL statement, or is not a DML statement.\n\nExample:\n\nrows \\= \\[\\\n    (\"row1\",),\\\n    (\"row2\",),\\\n\\]\n\\# cur is an sqlite3.Cursor object\ncur.executemany(\"INSERT INTO data VALUES(?)\", rows)\n\nNote\n\nAny resulting rows are discarded, including DML statements with [RETURNING clauses](https://www.sqlite.org/lang_returning.html)\n.\n\nDeprecated since version 3.12, will be removed in version 3.14: [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning \"DeprecationWarning\")\n is emitted if [named placeholders](https://docs.python.org/3/library/sqlite3.html#sqlite3-placeholders)\n are used and the items in _parameters_ are sequences instead of [`dict`](https://docs.python.org/3/library/stdtypes.html#dict \"dict\")\ns. Starting with Python 3.14, [`ProgrammingError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.ProgrammingError \"sqlite3.ProgrammingError\")\n will be raised instead.\n\nexecutescript(_sql\\_script_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executescript \"Link to this definition\")\n\nExecute the SQL statements in _sql\\_script_. If the [`autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit \"sqlite3.Connection.autocommit\")\n is [`LEGACY_TRANSACTION_CONTROL`](https://docs.python.org/3/library/sqlite3.html#sqlite3.LEGACY_TRANSACTION_CONTROL \"sqlite3.LEGACY_TRANSACTION_CONTROL\")\n and there is a pending transaction, an implicit `COMMIT` statement is executed first. No other implicit transaction control is performed; any transaction control must be added to _sql\\_script_.\n\n_sql\\_script_ must be a [`string`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n.\n\nExample:\n\n\\# cur is an sqlite3.Cursor object\ncur.executescript(\"\"\"\n    BEGIN;\n    CREATE TABLE person(firstname, lastname, age);\n    CREATE TABLE book(title, author, published);\n    CREATE TABLE publisher(name, address);\n    COMMIT;\n\"\"\")\n\nfetchone()[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchone \"Link to this definition\")\n\nIf [`row_factory`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.row_factory \"sqlite3.Cursor.row_factory\")\n is `None`, return the next row query result set as a [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple \"tuple\")\n. Else, pass it to the row factory and return its result. Return `None` if no more data is available.\n\nfetchmany(_size\\=cursor.arraysize_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchmany \"Link to this definition\")\n\nReturn the next set of rows of a query result as a [`list`](https://docs.python.org/3/library/stdtypes.html#list \"list\")\n. Return an empty list if no more rows are available.\n\nThe number of rows to fetch per call is specified by the _size_ parameter. If _size_ is not given, [`arraysize`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.arraysize \"sqlite3.Cursor.arraysize\")\n determines the number of rows to be fetched. If fewer than _size_ rows are available, as many rows as are available are returned.\n\nNote there are performance considerations involved with the _size_ parameter. For optimal performance, it is usually best to use the arraysize attribute. If the _size_ parameter is used, then it is best for it to retain the same value from one [`fetchmany()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchmany \"sqlite3.Cursor.fetchmany\")\n call to the next.\n\nfetchall()[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchall \"Link to this definition\")\n\nReturn all (remaining) rows of a query result as a [`list`](https://docs.python.org/3/library/stdtypes.html#list \"list\")\n. Return an empty list if no rows are available. Note that the [`arraysize`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.arraysize \"sqlite3.Cursor.arraysize\")\n attribute can affect the performance of this operation.\n\nclose()[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.close \"Link to this definition\")\n\nClose the cursor now (rather than whenever `__del__` is called).\n\nThe cursor will be unusable from this point forward; a [`ProgrammingError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.ProgrammingError \"sqlite3.ProgrammingError\")\n exception will be raised if any operation is attempted with the cursor.\n\nsetinputsizes(_sizes_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.setinputsizes \"Link to this definition\")\n\nRequired by the DB-API. Does nothing in `sqlite3`.\n\nsetoutputsize(_size_, _column\\=None_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.setoutputsize \"Link to this definition\")\n\nRequired by the DB-API. Does nothing in `sqlite3`.\n\narraysize[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.arraysize \"Link to this definition\")\n\nRead/write attribute that controls the number of rows returned by [`fetchmany()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchmany \"sqlite3.Cursor.fetchmany\")\n. The default value is 1 which means a single row would be fetched per call.\n\nconnection[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.connection \"Link to this definition\")\n\nRead-only attribute that provides the SQLite database [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection \"sqlite3.Connection\")\n belonging to the cursor. A [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor \"sqlite3.Cursor\")\n object created by calling [`con.cursor()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.cursor \"sqlite3.Connection.cursor\")\n will have a [`connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.connection \"sqlite3.Cursor.connection\")\n attribute that refers to _con_:\n\n\\>>>\n\n\\>>> con \\= sqlite3.connect(\":memory:\")\n\\>>> cur \\= con.cursor()\n\\>>> cur.connection \\== con\nTrue\n\\>>> con.close()\n\ndescription[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.description \"Link to this definition\")\n\nRead-only attribute that provides the column names of the last query. To remain compatible with the Python DB API, it returns a 7-tuple for each column where the last six items of each tuple are `None`.\n\nIt is set for `SELECT` statements without any matching rows as well.\n\nlastrowid[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.lastrowid \"Link to this definition\")\n\nRead-only attribute that provides the row id of the last inserted row. It is only updated after successful `INSERT` or `REPLACE` statements using the [`execute()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute \"sqlite3.Cursor.execute\")\n method. For other statements, after [`executemany()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executemany \"sqlite3.Cursor.executemany\")\n or [`executescript()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executescript \"sqlite3.Cursor.executescript\")\n, or if the insertion failed, the value of `lastrowid` is left unchanged. The initial value of `lastrowid` is `None`.\n\nNote\n\nInserts into `WITHOUT ROWID` tables are not recorded.\n\nChanged in version 3.6: Added support for the `REPLACE` statement.\n\nrowcount[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.rowcount \"Link to this definition\")\n\nRead-only attribute that provides the number of modified rows for `INSERT`, `UPDATE`, `DELETE`, and `REPLACE` statements; is `-1` for other statements, including CTE queries. It is only updated by the [`execute()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute \"sqlite3.Cursor.execute\")\n and [`executemany()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executemany \"sqlite3.Cursor.executemany\")\n methods, after the statement has run to completion. This means that any resulting rows must be fetched in order for `rowcount` to be updated.\n\nrow\\_factory[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.row_factory \"Link to this definition\")\n\nControl how a row fetched from this `Cursor` is represented. If `None`, a row is represented as a [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple \"tuple\")\n. Can be set to the included [`sqlite3.Row`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Row \"sqlite3.Row\")\n; or a [callable](https://docs.python.org/3/glossary.html#term-callable)\n that accepts two arguments, a [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor \"sqlite3.Cursor\")\n object and the `tuple` of row values, and returns a custom object representing an SQLite row.\n\nDefaults to what [`Connection.row_factory`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.row_factory \"sqlite3.Connection.row_factory\")\n was set to when the `Cursor` was created. Assigning to this attribute does not affect [`Connection.row_factory`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.row_factory \"sqlite3.Connection.row_factory\")\n of the parent connection.\n\nSee [How to create and use row factories](https://docs.python.org/3/library/sqlite3.html#sqlite3-howto-row-factory)\n for more details.\n\n### Row objects[¶](https://docs.python.org/3/library/sqlite3.html#row-objects \"Link to this heading\")\n\n_class_ sqlite3.Row[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Row \"Link to this definition\")\n\nA `Row` instance serves as a highly optimized [`row_factory`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.row_factory \"sqlite3.Connection.row_factory\")\n for [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection \"sqlite3.Connection\")\n objects. It supports iteration, equality testing, [`len()`](https://docs.python.org/3/library/functions.html#len \"len\")\n, and [mapping](https://docs.python.org/3/glossary.html#term-mapping)\n access by column name and index.\n\nTwo `Row` objects compare equal if they have identical column names and values.\n\nSee [How to create and use row factories](https://docs.python.org/3/library/sqlite3.html#sqlite3-howto-row-factory)\n for more details.\n\nkeys()[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Row.keys \"Link to this definition\")\n\nReturn a [`list`](https://docs.python.org/3/library/stdtypes.html#list \"list\")\n of column names as [`strings`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n. Immediately after a query, it is the first member of each tuple in [`Cursor.description`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.description \"sqlite3.Cursor.description\")\n.\n\nChanged in version 3.5: Added support of slicing.\n\n### Blob objects[¶](https://docs.python.org/3/library/sqlite3.html#blob-objects \"Link to this heading\")\n\n_class_ sqlite3.Blob[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Blob \"Link to this definition\")\n\nAdded in version 3.11.\n\nA [`Blob`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Blob \"sqlite3.Blob\")\n instance is a [file-like object](https://docs.python.org/3/glossary.html#term-file-like-object)\n that can read and write data in an SQLite BLOB. Call [`len(blob)`](https://docs.python.org/3/library/functions.html#len \"len\")\n to get the size (number of bytes) of the blob. Use indices and [slices](https://docs.python.org/3/glossary.html#term-slice)\n for direct access to the blob data.\n\nUse the [`Blob`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Blob \"sqlite3.Blob\")\n as a [context manager](https://docs.python.org/3/glossary.html#term-context-manager)\n to ensure that the blob handle is closed after use.\n\ncon \\= sqlite3.connect(\":memory:\")\ncon.execute(\"CREATE TABLE test(blob\\_col blob)\")\ncon.execute(\"INSERT INTO test(blob\\_col) VALUES(zeroblob(13))\")\n\n\\# Write to our blob, using two write operations:\nwith con.blobopen(\"test\", \"blob\\_col\", 1) as blob:\n    blob.write(b\"hello, \")\n    blob.write(b\"world.\")\n    \\# Modify the first and last bytes of our blob\n    blob\\[0\\] \\= ord(\"H\")\n    blob\\[\\-1\\] \\= ord(\"!\")\n\n\\# Read the contents of our blob\nwith con.blobopen(\"test\", \"blob\\_col\", 1) as blob:\n    greeting \\= blob.read()\n\nprint(greeting)  \\# outputs \"b'Hello, world!'\"\ncon.close()\n\nclose()[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Blob.close \"Link to this definition\")\n\nClose the blob.\n\nThe blob will be unusable from this point onward. An [`Error`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Error \"sqlite3.Error\")\n (or subclass) exception will be raised if any further operation is attempted with the blob.\n\nread(_length\\=\\-1_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Blob.read \"Link to this definition\")\n\nRead _length_ bytes of data from the blob at the current offset position. If the end of the blob is reached, the data up to EOF will be returned. When _length_ is not specified, or is negative, [`read()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Blob.read \"sqlite3.Blob.read\")\n will read until the end of the blob.\n\nwrite(_data_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Blob.write \"Link to this definition\")\n\nWrite _data_ to the blob at the current offset. This function cannot change the blob length. Writing beyond the end of the blob will raise [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError \"ValueError\")\n.\n\ntell()[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Blob.tell \"Link to this definition\")\n\nReturn the current access position of the blob.\n\nseek(_offset_, _origin\\=os.SEEK\\_SET_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Blob.seek \"Link to this definition\")\n\nSet the current access position of the blob to _offset_. The _origin_ argument defaults to [`os.SEEK_SET`](https://docs.python.org/3/library/os.html#os.SEEK_SET \"os.SEEK_SET\")\n (absolute blob positioning). Other values for _origin_ are [`os.SEEK_CUR`](https://docs.python.org/3/library/os.html#os.SEEK_CUR \"os.SEEK_CUR\")\n (seek relative to the current position) and [`os.SEEK_END`](https://docs.python.org/3/library/os.html#os.SEEK_END \"os.SEEK_END\")\n (seek relative to the blob’s end).\n\n### PrepareProtocol objects[¶](https://docs.python.org/3/library/sqlite3.html#prepareprotocol-objects \"Link to this heading\")\n\n_class_ sqlite3.PrepareProtocol[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.PrepareProtocol \"Link to this definition\")\n\nThe PrepareProtocol type’s single purpose is to act as a [**PEP 246**](https://peps.python.org/pep-0246/)\n style adaption protocol for objects that can [adapt themselves](https://docs.python.org/3/library/sqlite3.html#sqlite3-conform)\n to [native SQLite types](https://docs.python.org/3/library/sqlite3.html#sqlite3-types)\n.\n\n### Exceptions[¶](https://docs.python.org/3/library/sqlite3.html#exceptions \"Link to this heading\")\n\nThe exception hierarchy is defined by the DB-API 2.0 ([**PEP 249**](https://peps.python.org/pep-0249/)\n).\n\n_exception_ sqlite3.Warning[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Warning \"Link to this definition\")\n\nThis exception is not currently raised by the `sqlite3` module, but may be raised by applications using `sqlite3`, for example if a user-defined function truncates data while inserting. `Warning` is a subclass of [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception \"Exception\")\n.\n\n_exception_ sqlite3.Error[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Error \"Link to this definition\")\n\nThe base class of the other exceptions in this module. Use this to catch all errors with one single [`except`](https://docs.python.org/3/reference/compound_stmts.html#except)\n statement. `Error` is a subclass of [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception \"Exception\")\n.\n\nIf the exception originated from within the SQLite library, the following two attributes are added to the exception:\n\nsqlite\\_errorcode[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Error.sqlite_errorcode \"Link to this definition\")\n\nThe numeric error code from the [SQLite API](https://sqlite.org/rescode.html)\n\nAdded in version 3.11.\n\nsqlite\\_errorname[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Error.sqlite_errorname \"Link to this definition\")\n\nThe symbolic name of the numeric error code from the [SQLite API](https://sqlite.org/rescode.html)\n\nAdded in version 3.11.\n\n_exception_ sqlite3.InterfaceError[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.InterfaceError \"Link to this definition\")\n\nException raised for misuse of the low-level SQLite C API. In other words, if this exception is raised, it probably indicates a bug in the `sqlite3` module. `InterfaceError` is a subclass of [`Error`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Error \"sqlite3.Error\")\n.\n\n_exception_ sqlite3.DatabaseError[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.DatabaseError \"Link to this definition\")\n\nException raised for errors that are related to the database. This serves as the base exception for several types of database errors. It is only raised implicitly through the specialised subclasses. `DatabaseError` is a subclass of [`Error`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Error \"sqlite3.Error\")\n.\n\n_exception_ sqlite3.DataError[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.DataError \"Link to this definition\")\n\nException raised for errors caused by problems with the processed data, like numeric values out of range, and strings which are too long. `DataError` is a subclass of [`DatabaseError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.DatabaseError \"sqlite3.DatabaseError\")\n.\n\n_exception_ sqlite3.OperationalError[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.OperationalError \"Link to this definition\")\n\nException raised for errors that are related to the database’s operation, and not necessarily under the control of the programmer. For example, the database path is not found, or a transaction could not be processed. `OperationalError` is a subclass of [`DatabaseError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.DatabaseError \"sqlite3.DatabaseError\")\n.\n\n_exception_ sqlite3.IntegrityError[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.IntegrityError \"Link to this definition\")\n\nException raised when the relational integrity of the database is affected, e.g. a foreign key check fails. It is a subclass of [`DatabaseError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.DatabaseError \"sqlite3.DatabaseError\")\n.\n\n_exception_ sqlite3.InternalError[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.InternalError \"Link to this definition\")\n\nException raised when SQLite encounters an internal error. If this is raised, it may indicate that there is a problem with the runtime SQLite library. `InternalError` is a subclass of [`DatabaseError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.DatabaseError \"sqlite3.DatabaseError\")\n.\n\n_exception_ sqlite3.ProgrammingError[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.ProgrammingError \"Link to this definition\")\n\nException raised for `sqlite3` API programming errors, for example supplying the wrong number of bindings to a query, or trying to operate on a closed [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection \"sqlite3.Connection\")\n. `ProgrammingError` is a subclass of [`DatabaseError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.DatabaseError \"sqlite3.DatabaseError\")\n.\n\n_exception_ sqlite3.NotSupportedError[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.NotSupportedError \"Link to this definition\")\n\nException raised in case a method or database API is not supported by the underlying SQLite library. For example, setting _deterministic_ to `True` in [`create_function()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.create_function \"sqlite3.Connection.create_function\")\n, if the underlying SQLite library does not support deterministic functions. `NotSupportedError` is a subclass of [`DatabaseError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.DatabaseError \"sqlite3.DatabaseError\")\n.\n\n### SQLite and Python types[¶](https://docs.python.org/3/library/sqlite3.html#sqlite-and-python-types \"Link to this heading\")\n\nSQLite natively supports the following types: `NULL`, `INTEGER`, `REAL`, `TEXT`, `BLOB`.\n\nThe following Python types can thus be sent to SQLite without any problem:\n\n| Python type | SQLite type |\n| --- | --- |\n| `None` | `NULL` |\n| [`int`](https://docs.python.org/3/library/functions.html#int \"int\") | `INTEGER` |\n| [`float`](https://docs.python.org/3/library/functions.html#float \"float\") | `REAL` |\n| [`str`](https://docs.python.org/3/library/stdtypes.html#str \"str\") | `TEXT` |\n| [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"bytes\") | `BLOB` |\n\nThis is how SQLite types are converted to Python types by default:\n\n| SQLite type | Python type |\n| --- | --- |\n| `NULL` | `None` |\n| `INTEGER` | [`int`](https://docs.python.org/3/library/functions.html#int \"int\") |\n| `REAL` | [`float`](https://docs.python.org/3/library/functions.html#float \"float\") |\n| `TEXT` | depends on [`text_factory`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.text_factory \"sqlite3.Connection.text_factory\")<br>, [`str`](https://docs.python.org/3/library/stdtypes.html#str \"str\")<br> by default |\n| `BLOB` | [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"bytes\") |\n\nThe type system of the `sqlite3` module is extensible in two ways: you can store additional Python types in an SQLite database via [object adapters](https://docs.python.org/3/library/sqlite3.html#sqlite3-adapters)\n, and you can let the `sqlite3` module convert SQLite types to Python types via [converters](https://docs.python.org/3/library/sqlite3.html#sqlite3-converters)\n.\n\n### Default adapters and converters (deprecated)[¶](https://docs.python.org/3/library/sqlite3.html#default-adapters-and-converters-deprecated \"Link to this heading\")\n\nNote\n\nThe default adapters and converters are deprecated as of Python 3.12. Instead, use the [Adapter and converter recipes](https://docs.python.org/3/library/sqlite3.html#sqlite3-adapter-converter-recipes)\n and tailor them to your needs.\n\nThe deprecated default adapters and converters consist of:\n\n*   An adapter for [`datetime.date`](https://docs.python.org/3/library/datetime.html#datetime.date \"datetime.date\")\n     objects to [`strings`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n     in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)\n     format.\n    \n*   An adapter for [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime \"datetime.datetime\")\n     objects to strings in ISO 8601 format.\n    \n*   A converter for [declared](https://docs.python.org/3/library/sqlite3.html#sqlite3-converters)\n     “date” types to [`datetime.date`](https://docs.python.org/3/library/datetime.html#datetime.date \"datetime.date\")\n     objects.\n    \n*   A converter for declared “timestamp” types to [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime \"datetime.datetime\")\n     objects. Fractional parts will be truncated to 6 digits (microsecond precision).\n    \n\nNote\n\nThe default “timestamp” converter ignores UTC offsets in the database and always returns a naive [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime \"datetime.datetime\")\n object. To preserve UTC offsets in timestamps, either leave converters disabled, or register an offset-aware converter with [`register_converter()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.register_converter \"sqlite3.register_converter\")\n.\n\nDeprecated since version 3.12.\n\n### Command-line interface[¶](https://docs.python.org/3/library/sqlite3.html#command-line-interface \"Link to this heading\")\n\nThe `sqlite3` module can be invoked as a script, using the interpreter’s [`-m`](https://docs.python.org/3/using/cmdline.html#cmdoption-m)\n switch, in order to provide a simple SQLite shell. The argument signature is as follows:\n\npython \\-m sqlite3 \\[\\-h\\] \\[\\-v\\] \\[filename\\] \\[sql\\]\n\nType `.quit` or CTRL-D to exit the shell.\n\n\\-h, \\--help[¶](https://docs.python.org/3/library/sqlite3.html#cmdoption-python-m-sqlite3-h-v-filename-sql-h \"Link to this definition\")\n\nPrint CLI help.\n\n\\-v, \\--version[¶](https://docs.python.org/3/library/sqlite3.html#cmdoption-python-m-sqlite3-h-v-filename-sql-v \"Link to this definition\")\n\nPrint underlying SQLite library version.\n\nAdded in version 3.12.\n\nHow-to guides[¶](https://docs.python.org/3/library/sqlite3.html#how-to-guides \"Link to this heading\")\n\n------------------------------------------------------------------------------------------------------\n\n### How to use placeholders to bind values in SQL queries[¶](https://docs.python.org/3/library/sqlite3.html#how-to-use-placeholders-to-bind-values-in-sql-queries \"Link to this heading\")\n\nSQL operations usually need to use values from Python variables. However, beware of using Python’s string operations to assemble queries, as they are vulnerable to [SQL injection attacks](https://en.wikipedia.org/wiki/SQL_injection)\n. For example, an attacker can simply close the single quote and inject `OR TRUE` to select all rows:\n\n\\>>>\n\n\\>>> \\# Never do this -- insecure!\n\\>>> symbol \\= input()\n' OR TRUE; --\n\\>>> sql \\= \"SELECT \\* FROM stocks WHERE symbol = '%s'\" % symbol\n\\>>> print(sql)\nSELECT \\* FROM stocks WHERE symbol = '' OR TRUE; --'\n\\>>> cur.execute(sql)\n\nInstead, use the DB-API’s parameter substitution. To insert a variable into a query string, use a placeholder in the string, and substitute the actual values into the query by providing them as a [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple \"tuple\")\n of values to the second argument of the cursor’s [`execute()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute \"sqlite3.Cursor.execute\")\n method.\n\nAn SQL statement may use one of two kinds of placeholders: question marks (qmark style) or named placeholders (named style). For the qmark style, _parameters_ must be a [sequence](https://docs.python.org/3/glossary.html#term-sequence)\n whose length must match the number of placeholders, or a [`ProgrammingError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.ProgrammingError \"sqlite3.ProgrammingError\")\n is raised. For the named style, _parameters_ must be an instance of a [`dict`](https://docs.python.org/3/library/stdtypes.html#dict \"dict\")\n (or a subclass), which must contain keys for all named parameters; any extra items are ignored. Here’s an example of both styles:\n\ncon \\= sqlite3.connect(\":memory:\")\ncur \\= con.execute(\"CREATE TABLE lang(name, first\\_appeared)\")\n\n\\# This is the named style used with executemany():\ndata \\= (\n    {\"name\": \"C\", \"year\": 1972},\n    {\"name\": \"Fortran\", \"year\": 1957},\n    {\"name\": \"Python\", \"year\": 1991},\n    {\"name\": \"Go\", \"year\": 2009},\n)\ncur.executemany(\"INSERT INTO lang VALUES(:name, :year)\", data)\n\n\\# This is the qmark style used in a SELECT query:\nparams \\= (1972,)\ncur.execute(\"SELECT \\* FROM lang WHERE first\\_appeared = ?\", params)\nprint(cur.fetchall())\ncon.close()\n\nNote\n\n[**PEP 249**](https://peps.python.org/pep-0249/)\n numeric placeholders are _not_ supported. If used, they will be interpreted as named placeholders.\n\n### How to adapt custom Python types to SQLite values[¶](https://docs.python.org/3/library/sqlite3.html#how-to-adapt-custom-python-types-to-sqlite-values \"Link to this heading\")\n\nSQLite supports only a limited set of data types natively. To store custom Python types in SQLite databases, _adapt_ them to one of the [Python types SQLite natively understands](https://docs.python.org/3/library/sqlite3.html#sqlite3-types)\n.\n\nThere are two ways to adapt Python objects to SQLite types: letting your object adapt itself, or using an _adapter callable_. The latter will take precedence above the former. For a library that exports a custom type, it may make sense to enable that type to adapt itself. As an application developer, it may make more sense to take direct control by registering custom adapter functions.\n\n#### How to write adaptable objects[¶](https://docs.python.org/3/library/sqlite3.html#how-to-write-adaptable-objects \"Link to this heading\")\n\nSuppose we have a `Point` class that represents a pair of coordinates, `x` and `y`, in a Cartesian coordinate system. The coordinate pair will be stored as a text string in the database, using a semicolon to separate the coordinates. This can be implemented by adding a `__conform__(self, protocol)` method which returns the adapted value. The object passed to _protocol_ will be of type [`PrepareProtocol`](https://docs.python.org/3/library/sqlite3.html#sqlite3.PrepareProtocol \"sqlite3.PrepareProtocol\")\n.\n\nclass Point:\n    def \\_\\_init\\_\\_(self, x, y):\n        self.x, self.y \\= x, y\n\n    def \\_\\_conform\\_\\_(self, protocol):\n        if protocol is sqlite3.PrepareProtocol:\n            return f\"{self.x};{self.y}\"\n\ncon \\= sqlite3.connect(\":memory:\")\ncur \\= con.cursor()\n\ncur.execute(\"SELECT ?\", (Point(4.0, \\-3.2),))\nprint(cur.fetchone()\\[0\\])\ncon.close()\n\n#### How to register adapter callables[¶](https://docs.python.org/3/library/sqlite3.html#how-to-register-adapter-callables \"Link to this heading\")\n\nThe other possibility is to create a function that converts the Python object to an SQLite-compatible type. This function can then be registered using [`register_adapter()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.register_adapter \"sqlite3.register_adapter\")\n.\n\nclass Point:\n    def \\_\\_init\\_\\_(self, x, y):\n        self.x, self.y \\= x, y\n\ndef adapt\\_point(point):\n    return f\"{point.x};{point.y}\"\n\nsqlite3.register\\_adapter(Point, adapt\\_point)\n\ncon \\= sqlite3.connect(\":memory:\")\ncur \\= con.cursor()\n\ncur.execute(\"SELECT ?\", (Point(1.0, 2.5),))\nprint(cur.fetchone()\\[0\\])\ncon.close()\n\n### How to convert SQLite values to custom Python types[¶](https://docs.python.org/3/library/sqlite3.html#how-to-convert-sqlite-values-to-custom-python-types \"Link to this heading\")\n\nWriting an adapter lets you convert _from_ custom Python types _to_ SQLite values. To be able to convert _from_ SQLite values _to_ custom Python types, we use _converters_.\n\nLet’s go back to the `Point` class. We stored the x and y coordinates separated via semicolons as strings in SQLite.\n\nFirst, we’ll define a converter function that accepts the string as a parameter and constructs a `Point` object from it.\n\nNote\n\nConverter functions are **always** passed a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"bytes\")\n object, no matter the underlying SQLite data type.\n\ndef convert\\_point(s):\n    x, y \\= map(float, s.split(b\";\"))\n    return Point(x, y)\n\nWe now need to tell `sqlite3` when it should convert a given SQLite value. This is done when connecting to a database, using the _detect\\_types_ parameter of [`connect()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.connect \"sqlite3.connect\")\n. There are three options:\n\n*   Implicit: set _detect\\_types_ to [`PARSE_DECLTYPES`](https://docs.python.org/3/library/sqlite3.html#sqlite3.PARSE_DECLTYPES \"sqlite3.PARSE_DECLTYPES\")\n    \n*   Explicit: set _detect\\_types_ to [`PARSE_COLNAMES`](https://docs.python.org/3/library/sqlite3.html#sqlite3.PARSE_COLNAMES \"sqlite3.PARSE_COLNAMES\")\n    \n*   Both: set _detect\\_types_ to `sqlite3.PARSE_DECLTYPES | sqlite3.PARSE_COLNAMES`. Column names take precedence over declared types.\n    \n\nThe following example illustrates the implicit and explicit approaches:\n\nclass Point:\n    def \\_\\_init\\_\\_(self, x, y):\n        self.x, self.y \\= x, y\n\n    def \\_\\_repr\\_\\_(self):\n        return f\"Point({self.x}, {self.y})\"\n\ndef adapt\\_point(point):\n    return f\"{point.x};{point.y}\"\n\ndef convert\\_point(s):\n    x, y \\= list(map(float, s.split(b\";\")))\n    return Point(x, y)\n\n\\# Register the adapter and converter\nsqlite3.register\\_adapter(Point, adapt\\_point)\nsqlite3.register\\_converter(\"point\", convert\\_point)\n\n\\# 1) Parse using declared types\np \\= Point(4.0, \\-3.2)\ncon \\= sqlite3.connect(\":memory:\", detect\\_types\\=sqlite3.PARSE\\_DECLTYPES)\ncur \\= con.execute(\"CREATE TABLE test(p point)\")\n\ncur.execute(\"INSERT INTO test(p) VALUES(?)\", (p,))\ncur.execute(\"SELECT p FROM test\")\nprint(\"with declared types:\", cur.fetchone()\\[0\\])\ncur.close()\ncon.close()\n\n\\# 2) Parse using column names\ncon \\= sqlite3.connect(\":memory:\", detect\\_types\\=sqlite3.PARSE\\_COLNAMES)\ncur \\= con.execute(\"CREATE TABLE test(p)\")\n\ncur.execute(\"INSERT INTO test(p) VALUES(?)\", (p,))\ncur.execute('SELECT p AS \"p \\[point\\]\" FROM test')\nprint(\"with column names:\", cur.fetchone()\\[0\\])\ncur.close()\ncon.close()\n\n### Adapter and converter recipes[¶](https://docs.python.org/3/library/sqlite3.html#adapter-and-converter-recipes \"Link to this heading\")\n\nThis section shows recipes for common adapters and converters.\n\nimport datetime\nimport sqlite3\n\ndef adapt\\_date\\_iso(val):\n    \"\"\"Adapt datetime.date to ISO 8601 date.\"\"\"\n    return val.isoformat()\n\ndef adapt\\_datetime\\_iso(val):\n    \"\"\"Adapt datetime.datetime to timezone-naive ISO 8601 date.\"\"\"\n    return val.isoformat()\n\ndef adapt\\_datetime\\_epoch(val):\n    \"\"\"Adapt datetime.datetime to Unix timestamp.\"\"\"\n    return int(val.timestamp())\n\nsqlite3.register\\_adapter(datetime.date, adapt\\_date\\_iso)\nsqlite3.register\\_adapter(datetime.datetime, adapt\\_datetime\\_iso)\nsqlite3.register\\_adapter(datetime.datetime, adapt\\_datetime\\_epoch)\n\ndef convert\\_date(val):\n    \"\"\"Convert ISO 8601 date to datetime.date object.\"\"\"\n    return datetime.date.fromisoformat(val.decode())\n\ndef convert\\_datetime(val):\n    \"\"\"Convert ISO 8601 datetime to datetime.datetime object.\"\"\"\n    return datetime.datetime.fromisoformat(val.decode())\n\ndef convert\\_timestamp(val):\n    \"\"\"Convert Unix epoch timestamp to datetime.datetime object.\"\"\"\n    return datetime.datetime.fromtimestamp(int(val))\n\nsqlite3.register\\_converter(\"date\", convert\\_date)\nsqlite3.register\\_converter(\"datetime\", convert\\_datetime)\nsqlite3.register\\_converter(\"timestamp\", convert\\_timestamp)\n\n### How to use connection shortcut methods[¶](https://docs.python.org/3/library/sqlite3.html#how-to-use-connection-shortcut-methods \"Link to this heading\")\n\nUsing the [`execute()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.execute \"sqlite3.Connection.execute\")\n, [`executemany()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.executemany \"sqlite3.Connection.executemany\")\n, and [`executescript()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.executescript \"sqlite3.Connection.executescript\")\n methods of the [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection \"sqlite3.Connection\")\n class, your code can be written more concisely because you don’t have to create the (often superfluous) [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor \"sqlite3.Cursor\")\n objects explicitly. Instead, the [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor \"sqlite3.Cursor\")\n objects are created implicitly and these shortcut methods return the cursor objects. This way, you can execute a `SELECT` statement and iterate over it directly using only a single call on the [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection \"sqlite3.Connection\")\n object.\n\n\\# Create and fill the table.\ncon \\= sqlite3.connect(\":memory:\")\ncon.execute(\"CREATE TABLE lang(name, first\\_appeared)\")\ndata \\= \\[\\\n    (\"C++\", 1985),\\\n    (\"Objective-C\", 1984),\\\n\\]\ncon.executemany(\"INSERT INTO lang(name, first\\_appeared) VALUES(?, ?)\", data)\n\n\\# Print the table contents\nfor row in con.execute(\"SELECT name, first\\_appeared FROM lang\"):\n    print(row)\n\nprint(\"I just deleted\", con.execute(\"DELETE FROM lang\").rowcount, \"rows\")\n\n\\# close() is not a shortcut method and it's not called automatically;\n\\# the connection object should be closed manually\ncon.close()\n\n### How to use the connection context manager[¶](https://docs.python.org/3/library/sqlite3.html#how-to-use-the-connection-context-manager \"Link to this heading\")\n\nA [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection \"sqlite3.Connection\")\n object can be used as a context manager that automatically commits or rolls back open transactions when leaving the body of the context manager. If the body of the [`with`](https://docs.python.org/3/reference/compound_stmts.html#with)\n statement finishes without exceptions, the transaction is committed. If this commit fails, or if the body of the `with` statement raises an uncaught exception, the transaction is rolled back. If [`autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit \"sqlite3.Connection.autocommit\")\n is `False`, a new transaction is implicitly opened after committing or rolling back.\n\nIf there is no open transaction upon leaving the body of the `with` statement, or if [`autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit \"sqlite3.Connection.autocommit\")\n is `True`, the context manager does nothing.\n\nNote\n\nThe context manager neither implicitly opens a new transaction nor closes the connection. If you need a closing context manager, consider using [`contextlib.closing()`](https://docs.python.org/3/library/contextlib.html#contextlib.closing \"contextlib.closing\")\n.\n\ncon \\= sqlite3.connect(\":memory:\")\ncon.execute(\"CREATE TABLE lang(id INTEGER PRIMARY KEY, name VARCHAR UNIQUE)\")\n\n\\# Successful, con.commit() is called automatically afterwards\nwith con:\n    con.execute(\"INSERT INTO lang(name) VALUES(?)\", (\"Python\",))\n\n\\# con.rollback() is called after the with block finishes with an exception,\n\\# the exception is still raised and must be caught\ntry:\n    with con:\n        con.execute(\"INSERT INTO lang(name) VALUES(?)\", (\"Python\",))\nexcept sqlite3.IntegrityError:\n    print(\"couldn't add Python twice\")\n\n\\# Connection object used as context manager only commits or rollbacks transactions,\n\\# so the connection object should be closed manually\ncon.close()\n\n### How to work with SQLite URIs[¶](https://docs.python.org/3/library/sqlite3.html#how-to-work-with-sqlite-uris \"Link to this heading\")\n\nSome useful URI tricks include:\n\n*   Open a database in read-only mode:\n    \n\n\\>>>\n\n\\>>> con \\= sqlite3.connect(\"file:tutorial.db?mode=ro\", uri\\=True)\n\\>>> con.execute(\"CREATE TABLE readonly(data)\")\nTraceback (most recent call last):\nOperationalError: attempt to write a readonly database\n\\>>> con.close()\n\n*   Do not implicitly create a new database file if it does not already exist; will raise [`OperationalError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.OperationalError \"sqlite3.OperationalError\")\n     if unable to create a new file:\n    \n\n\\>>>\n\n\\>>> con \\= sqlite3.connect(\"file:nosuchdb.db?mode=rw\", uri\\=True)\nTraceback (most recent call last):\nOperationalError: unable to open database file\n\n*   Create a shared named in-memory database:\n    \n\ndb \\= \"file:mem1?mode=memory&cache=shared\"\ncon1 \\= sqlite3.connect(db, uri\\=True)\ncon2 \\= sqlite3.connect(db, uri\\=True)\nwith con1:\n    con1.execute(\"CREATE TABLE shared(data)\")\n    con1.execute(\"INSERT INTO shared VALUES(28)\")\nres \\= con2.execute(\"SELECT data FROM shared\")\nassert res.fetchone() \\== (28,)\n\ncon1.close()\ncon2.close()\n\nMore information about this feature, including a list of parameters, can be found in the [SQLite URI documentation](https://www.sqlite.org/uri.html)\n.\n\n### How to create and use row factories[¶](https://docs.python.org/3/library/sqlite3.html#how-to-create-and-use-row-factories \"Link to this heading\")\n\nBy default, `sqlite3` represents each row as a [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple \"tuple\")\n. If a `tuple` does not suit your needs, you can use the [`sqlite3.Row`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Row \"sqlite3.Row\")\n class or a custom [`row_factory`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.row_factory \"sqlite3.Cursor.row_factory\")\n.\n\nWhile `row_factory` exists as an attribute both on the [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor \"sqlite3.Cursor\")\n and the [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection \"sqlite3.Connection\")\n, it is recommended to set [`Connection.row_factory`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.row_factory \"sqlite3.Connection.row_factory\")\n, so all cursors created from the connection will use the same row factory.\n\n`Row` provides indexed and case-insensitive named access to columns, with minimal memory overhead and performance impact over a `tuple`. To use `Row` as a row factory, assign it to the `row_factory` attribute:\n\n\\>>>\n\n\\>>> con \\= sqlite3.connect(\":memory:\")\n\\>>> con.row\\_factory \\= sqlite3.Row\n\nQueries now return `Row` objects:\n\n\\>>>\n\n\\>>> res \\= con.execute(\"SELECT 'Earth' AS name, 6378 AS radius\")\n\\>>> row \\= res.fetchone()\n\\>>> row.keys()\n\\['name', 'radius'\\]\n\\>>> row\\[0\\]         \\# Access by index.\n'Earth'\n\\>>> row\\[\"name\"\\]    \\# Access by name.\n'Earth'\n\\>>> row\\[\"RADIUS\"\\]  \\# Column names are case-insensitive.\n6378\n\\>>> con.close()\n\nNote\n\nThe `FROM` clause can be omitted in the `SELECT` statement, as in the above example. In such cases, SQLite returns a single row with columns defined by expressions, e.g. literals, with the given aliases `expr AS alias`.\n\nYou can create a custom [`row_factory`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.row_factory \"sqlite3.Cursor.row_factory\")\n that returns each row as a [`dict`](https://docs.python.org/3/library/stdtypes.html#dict \"dict\")\n, with column names mapped to values:\n\ndef dict\\_factory(cursor, row):\n    fields \\= \\[column\\[0\\] for column in cursor.description\\]\n    return {key: value for key, value in zip(fields, row)}\n\nUsing it, queries now return a `dict` instead of a `tuple`:\n\n\\>>>\n\n\\>>> con \\= sqlite3.connect(\":memory:\")\n\\>>> con.row\\_factory \\= dict\\_factory\n\\>>> for row in con.execute(\"SELECT 1 AS a, 2 AS b\"):\n...     print(row)\n{'a': 1, 'b': 2}\n\\>>> con.close()\n\nThe following row factory returns a [named tuple](https://docs.python.org/3/glossary.html#term-named-tuple)\n:\n\nfrom collections import namedtuple\n\ndef namedtuple\\_factory(cursor, row):\n    fields \\= \\[column\\[0\\] for column in cursor.description\\]\n    cls \\= namedtuple(\"Row\", fields)\n    return cls.\\_make(row)\n\n`namedtuple_factory()` can be used as follows:\n\n\\>>>\n\n\\>>> con \\= sqlite3.connect(\":memory:\")\n\\>>> con.row\\_factory \\= namedtuple\\_factory\n\\>>> cur \\= con.execute(\"SELECT 1 AS a, 2 AS b\")\n\\>>> row \\= cur.fetchone()\n\\>>> row\nRow(a=1, b=2)\n\\>>> row\\[0\\]  \\# Indexed access.\n1\n\\>>> row.b   \\# Attribute access.\n2\n\\>>> con.close()\n\nWith some adjustments, the above recipe can be adapted to use a [`dataclass`](https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass \"dataclasses.dataclass\")\n, or any other custom class, instead of a [`namedtuple`](https://docs.python.org/3/library/collections.html#collections.namedtuple \"collections.namedtuple\")\n.\n\n### How to handle non-UTF-8 text encodings[¶](https://docs.python.org/3/library/sqlite3.html#how-to-handle-non-utf-8-text-encodings \"Link to this heading\")\n\nBy default, `sqlite3` uses [`str`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n to adapt SQLite values with the `TEXT` data type. This works well for UTF-8 encoded text, but it might fail for other encodings and invalid UTF-8. You can use a custom [`text_factory`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.text_factory \"sqlite3.Connection.text_factory\")\n to handle such cases.\n\nBecause of SQLite’s [flexible typing](https://www.sqlite.org/flextypegood.html)\n, it is not uncommon to encounter table columns with the `TEXT` data type containing non-UTF-8 encodings, or even arbitrary data. To demonstrate, let’s assume we have a database with ISO-8859-2 (Latin-2) encoded text, for example a table of Czech-English dictionary entries. Assuming we now have a [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection \"sqlite3.Connection\")\n instance `con` connected to this database, we can decode the Latin-2 encoded text using this [`text_factory`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.text_factory \"sqlite3.Connection.text_factory\")\n:\n\ncon.text\\_factory \\= lambda data: str(data, encoding\\=\"latin2\")\n\nFor invalid UTF-8 or arbitrary data in stored in `TEXT` table columns, you can use the following technique, borrowed from the [Unicode HOWTO](https://docs.python.org/3/howto/unicode.html#unicode-howto)\n:\n\ncon.text\\_factory \\= lambda data: str(data, errors\\=\"surrogateescape\")\n\nNote\n\nThe `sqlite3` module API does not support strings containing surrogates.\n\nSee also\n\n[Unicode HOWTO](https://docs.python.org/3/howto/unicode.html#unicode-howto)\n\nExplanation[¶](https://docs.python.org/3/library/sqlite3.html#explanation \"Link to this heading\")\n\n--------------------------------------------------------------------------------------------------\n\n### Transaction control[¶](https://docs.python.org/3/library/sqlite3.html#transaction-control \"Link to this heading\")\n\n`sqlite3` offers multiple methods of controlling whether, when and how database transactions are opened and closed. [Transaction control via the autocommit attribute](https://docs.python.org/3/library/sqlite3.html#sqlite3-transaction-control-autocommit)\n is recommended, while [Transaction control via the isolation\\_level attribute](https://docs.python.org/3/library/sqlite3.html#sqlite3-transaction-control-isolation-level)\n retains the pre-Python 3.12 behaviour.\n\n#### Transaction control via the `autocommit` attribute[¶](https://docs.python.org/3/library/sqlite3.html#transaction-control-via-the-autocommit-attribute \"Link to this heading\")\n\nThe recommended way of controlling transaction behaviour is through the [`Connection.autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit \"sqlite3.Connection.autocommit\")\n attribute, which should preferably be set using the _autocommit_ parameter of [`connect()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.connect \"sqlite3.connect\")\n.\n\nIt is suggested to set _autocommit_ to `False`, which implies [**PEP 249**](https://peps.python.org/pep-0249/)\n\\-compliant transaction control. This means:\n\n*   `sqlite3` ensures that a transaction is always open, so [`connect()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.connect \"sqlite3.connect\")\n    , [`Connection.commit()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.commit \"sqlite3.Connection.commit\")\n    , and [`Connection.rollback()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.rollback \"sqlite3.Connection.rollback\")\n     will implicitly open a new transaction (immediately after closing the pending one, for the latter two). `sqlite3` uses `BEGIN DEFERRED` statements when opening transactions.\n    \n*   Transactions should be committed explicitly using `commit()`.\n    \n*   Transactions should be rolled back explicitly using `rollback()`.\n    \n*   An implicit rollback is performed if the database is [`close()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.close \"sqlite3.Connection.close\")\n    \\-ed with pending changes.\n    \n\nSet _autocommit_ to `True` to enable SQLite’s [autocommit mode](https://www.sqlite.org/lang_transaction.html#implicit_versus_explicit_transactions)\n. In this mode, [`Connection.commit()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.commit \"sqlite3.Connection.commit\")\n and [`Connection.rollback()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.rollback \"sqlite3.Connection.rollback\")\n have no effect. Note that SQLite’s autocommit mode is distinct from the [**PEP 249**](https://peps.python.org/pep-0249/)\n\\-compliant [`Connection.autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit \"sqlite3.Connection.autocommit\")\n attribute; use [`Connection.in_transaction`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.in_transaction \"sqlite3.Connection.in_transaction\")\n to query the low-level SQLite autocommit mode.\n\nSet _autocommit_ to [`LEGACY_TRANSACTION_CONTROL`](https://docs.python.org/3/library/sqlite3.html#sqlite3.LEGACY_TRANSACTION_CONTROL \"sqlite3.LEGACY_TRANSACTION_CONTROL\")\n to leave transaction control behaviour to the [`Connection.isolation_level`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.isolation_level \"sqlite3.Connection.isolation_level\")\n attribute. See [Transaction control via the isolation\\_level attribute](https://docs.python.org/3/library/sqlite3.html#sqlite3-transaction-control-isolation-level)\n for more information.\n\n#### Transaction control via the `isolation_level` attribute[¶](https://docs.python.org/3/library/sqlite3.html#transaction-control-via-the-isolation-level-attribute \"Link to this heading\")\n\nNote\n\nThe recommended way of controlling transactions is via the [`autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit \"sqlite3.Connection.autocommit\")\n attribute. See [Transaction control via the autocommit attribute](https://docs.python.org/3/library/sqlite3.html#sqlite3-transaction-control-autocommit)\n.\n\nIf [`Connection.autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit \"sqlite3.Connection.autocommit\")\n is set to [`LEGACY_TRANSACTION_CONTROL`](https://docs.python.org/3/library/sqlite3.html#sqlite3.LEGACY_TRANSACTION_CONTROL \"sqlite3.LEGACY_TRANSACTION_CONTROL\")\n (the default), transaction behaviour is controlled using the [`Connection.isolation_level`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.isolation_level \"sqlite3.Connection.isolation_level\")\n attribute. Otherwise, `isolation_level` has no effect.\n\nIf the connection attribute [`isolation_level`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.isolation_level \"sqlite3.Connection.isolation_level\")\n is not `None`, new transactions are implicitly opened before [`execute()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute \"sqlite3.Cursor.execute\")\n and [`executemany()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executemany \"sqlite3.Cursor.executemany\")\n executes `INSERT`, `UPDATE`, `DELETE`, or `REPLACE` statements; for other statements, no implicit transaction handling is performed. Use the [`commit()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.commit \"sqlite3.Connection.commit\")\n and [`rollback()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.rollback \"sqlite3.Connection.rollback\")\n methods to respectively commit and roll back pending transactions. You can choose the underlying [SQLite transaction behaviour](https://www.sqlite.org/lang_transaction.html#deferred_immediate_and_exclusive_transactions)\n — that is, whether and what type of `BEGIN` statements `sqlite3` implicitly executes – via the [`isolation_level`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.isolation_level \"sqlite3.Connection.isolation_level\")\n attribute.\n\nIf [`isolation_level`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.isolation_level \"sqlite3.Connection.isolation_level\")\n is set to `None`, no transactions are implicitly opened at all. This leaves the underlying SQLite library in [autocommit mode](https://www.sqlite.org/lang_transaction.html#implicit_versus_explicit_transactions)\n, but also allows the user to perform their own transaction handling using explicit SQL statements. The underlying SQLite library autocommit mode can be queried using the [`in_transaction`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.in_transaction \"sqlite3.Connection.in_transaction\")\n attribute.\n\nThe [`executescript()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executescript \"sqlite3.Cursor.executescript\")\n method implicitly commits any pending transaction before execution of the given SQL script, regardless of the value of [`isolation_level`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.isolation_level \"sqlite3.Connection.isolation_level\")\n.\n\nChanged in version 3.6: `sqlite3` used to implicitly commit an open transaction before DDL statements. This is no longer the case.\n\nChanged in version 3.12: The recommended way of controlling transactions is now via the [`autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit \"sqlite3.Connection.autocommit\")\n attribute.\n\n### [Table of Contents](https://docs.python.org/3/contents.html)\n\n*   [`sqlite3` — DB-API 2.0 interface for SQLite databases](https://docs.python.org/3/library/sqlite3.html#)\n    *   [Tutorial](https://docs.python.org/3/library/sqlite3.html#tutorial)\n        \n    *   [Reference](https://docs.python.org/3/library/sqlite3.html#reference)\n        *   [Module functions](https://docs.python.org/3/library/sqlite3.html#module-functions)\n            \n        *   [Module constants](https://docs.python.org/3/library/sqlite3.html#module-constants)\n            \n        *   [Connection objects](https://docs.python.org/3/library/sqlite3.html#connection-objects)\n            \n        *   [Cursor objects](https://docs.python.org/3/library/sqlite3.html#cursor-objects)\n            \n        *   [Row objects](https://docs.python.org/3/library/sqlite3.html#row-objects)\n            \n        *   [Blob objects](https://docs.python.org/3/library/sqlite3.html#blob-objects)\n            \n        *   [PrepareProtocol objects](https://docs.python.org/3/library/sqlite3.html#prepareprotocol-objects)\n            \n        *   [Exceptions](https://docs.python.org/3/library/sqlite3.html#exceptions)\n            \n        *   [SQLite and Python types](https://docs.python.org/3/library/sqlite3.html#sqlite-and-python-types)\n            \n        *   [Default adapters and converters (deprecated)](https://docs.python.org/3/library/sqlite3.html#default-adapters-and-converters-deprecated)\n            \n        *   [Command-line interface](https://docs.python.org/3/library/sqlite3.html#command-line-interface)\n            \n    *   [How-to guides](https://docs.python.org/3/library/sqlite3.html#how-to-guides)\n        *   [How to use placeholders to bind values in SQL queries](https://docs.python.org/3/library/sqlite3.html#how-to-use-placeholders-to-bind-values-in-sql-queries)\n            \n        *   [How to adapt custom Python types to SQLite values](https://docs.python.org/3/library/sqlite3.html#how-to-adapt-custom-python-types-to-sqlite-values)\n            *   [How to write adaptable objects](https://docs.python.org/3/library/sqlite3.html#how-to-write-adaptable-objects)\n                \n            *   [How to register adapter callables](https://docs.python.org/3/library/sqlite3.html#how-to-register-adapter-callables)\n                \n        *   [How to convert SQLite values to custom Python types](https://docs.python.org/3/library/sqlite3.html#how-to-convert-sqlite-values-to-custom-python-types)\n            \n        *   [Adapter and converter recipes](https://docs.python.org/3/library/sqlite3.html#adapter-and-converter-recipes)\n            \n        *   [How to use connection shortcut methods](https://docs.python.org/3/library/sqlite3.html#how-to-use-connection-shortcut-methods)\n            \n        *   [How to use the connection context manager](https://docs.python.org/3/library/sqlite3.html#how-to-use-the-connection-context-manager)\n            \n        *   [How to work with SQLite URIs](https://docs.python.org/3/library/sqlite3.html#how-to-work-with-sqlite-uris)\n            \n        *   [How to create and use row factories](https://docs.python.org/3/library/sqlite3.html#how-to-create-and-use-row-factories)\n            \n        *   [How to handle non-UTF-8 text encodings](https://docs.python.org/3/library/sqlite3.html#how-to-handle-non-utf-8-text-encodings)\n            \n    *   [Explanation](https://docs.python.org/3/library/sqlite3.html#explanation)\n        *   [Transaction control](https://docs.python.org/3/library/sqlite3.html#transaction-control)\n            *   [Transaction control via the `autocommit` attribute](https://docs.python.org/3/library/sqlite3.html#transaction-control-via-the-autocommit-attribute)\n                \n            *   [Transaction control via the `isolation_level` attribute](https://docs.python.org/3/library/sqlite3.html#transaction-control-via-the-isolation-level-attribute)\n                \n\n#### Previous topic\n\n[`dbm` — Interfaces to Unix “databases”](https://docs.python.org/3/library/dbm.html \"previous chapter\")\n\n#### Next topic\n\n[Data Compression and Archiving](https://docs.python.org/3/library/archiving.html \"next chapter\")\n\n### This Page\n\n*   [Report a Bug](https://docs.python.org/3/bugs.html)\n    \n*   [Show Source](https://github.com/python/cpython/blob/main/Doc/library/sqlite3.rst)\n    \n\n«\n\n### Navigation\n\n*   [index](https://docs.python.org/3/genindex.html \"General Index\")\n    \n*   [modules](https://docs.python.org/3/py-modindex.html \"Python Module Index\")\n     |\n*   [next](https://docs.python.org/3/library/archiving.html \"Data Compression and Archiving\")\n     |\n*   [previous](https://docs.python.org/3/library/dbm.html \"dbm — Interfaces to Unix “databases”\")\n     |\n*   ![Python logo](https://docs.python.org/3/_static/py.svg)\n*   [Python](https://www.python.org/)\n     »\n*   EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文\n    \n    dev (3.14)3.13.23.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6\n    \n\n*   [3.13.2 Documentation](https://docs.python.org/3/index.html)\n     »\n*   [The Python Standard Library](https://docs.python.org/3/library/index.html)\n     »\n*   [Data Persistence](https://docs.python.org/3/library/persistence.html)\n     »\n*   [`sqlite3` — DB-API 2.0 interface for SQLite databases](https://docs.python.org/3/library/sqlite3.html)\n    \n*    \n    \n    |\n*   Theme Auto Light Dark |","metadata":{"og:site_name":"Python documentation","og:type":"website","viewport":["width=device-width, initial-scale=1.0","width=device-width, initial-scale=1","width=device-width, initial-scale=1.0"],"ogSiteName":"Python documentation","ogDescription":"Source code: Lib/sqlite3/ SQLite is a C library that provides a lightweight disk-based database that doesn’t require a separate server process and allows accessing the database using a nonstandard ...","title":"sqlite3 — DB-API 2.0 interface for SQLite databases — Python 3.13.2 documentation","description":"Source code: Lib/sqlite3/ SQLite is a C library that provides a lightweight disk-based database that doesn’t require a separate server process and allows accessing the database using a nonstandard ...","ogImage":"https://docs.python.org/3/_static/og-image.png","og:description":"Source code: Lib/sqlite3/ SQLite is a C library that provides a lightweight disk-based database that doesn’t require a separate server process and allows accessing the database using a nonstandard ...","og:image:width":"200","readthedocs-addons-api-version":"1","og:image":"https://docs.python.org/3/_static/og-image.png","ogTitle":"sqlite3 — DB-API 2.0 interface for SQLite databases","favicon":"https://docs.python.org/3/_static/py.svg","og:title":"sqlite3 — DB-API 2.0 interface for SQLite databases","og:url":"https://docs.python.org/3/library/sqlite3.html","og:image:alt":"Python documentation","ogUrl":"https://docs.python.org/3/library/sqlite3.html","og:image:height":"200","language":"en","theme-color":"#3776ab","scrapeId":"0c45e8f1-5777-48b6-a584-7fc7f311cfe0","sourceURL":"https://docs.python.org/3/library/sqlite3.html","url":"https://docs.python.org/3/library/sqlite3.html","statusCode":200}}]}