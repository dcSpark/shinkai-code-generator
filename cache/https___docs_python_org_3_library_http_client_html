{"success":true,"status":"completed","completed":1,"total":1,"creditsUsed":1,"expiresAt":"2025-03-05T21:28:45.000Z","data":[{"markdown":"### Navigation\n\n*   [index](https://docs.python.org/3/genindex.html \"General Index\")\n    \n*   [modules](https://docs.python.org/3/py-modindex.html \"Python Module Index\")\n     |\n*   [next](https://docs.python.org/3/library/ftplib.html \"ftplib — FTP protocol client\")\n     |\n*   [previous](https://docs.python.org/3/library/http.html \"http — HTTP modules\")\n     |\n*   ![Python logo](https://docs.python.org/3/_static/py.svg)\n*   [Python](https://www.python.org/)\n     »\n*   EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文\n    \n    dev (3.14)3.13.23.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6\n    \n\n*   [3.13.2 Documentation](https://docs.python.org/3/index.html)\n     »\n*   [The Python Standard Library](https://docs.python.org/3/library/index.html)\n     »\n*   [Internet Protocols and Support](https://docs.python.org/3/library/internet.html)\n     »\n*   [`http.client` — HTTP protocol client](https://docs.python.org/3/library/http.client.html)\n    \n*    \n    \n    |\n*   Theme Auto Light Dark |\n\n`http.client` — HTTP protocol client[¶](https://docs.python.org/3/library/http.client.html#module-http.client \"Link to this heading\")\n\n======================================================================================================================================\n\n**Source code:** [Lib/http/client.py](https://github.com/python/cpython/tree/3.13/Lib/http/client.py)\n\n* * *\n\nThis module defines classes that implement the client side of the HTTP and HTTPS protocols. It is normally not used directly — the module [`urllib.request`](https://docs.python.org/3/library/urllib.request.html#module-urllib.request \"urllib.request: Extensible library for opening URLs.\")\n uses it to handle URLs that use HTTP and HTTPS.\n\nSee also\n\nThe [Requests package](https://requests.readthedocs.io/en/latest/)\n is recommended for a higher-level HTTP client interface.\n\nNote\n\nHTTPS support is only available if Python was compiled with SSL support (through the [`ssl`](https://docs.python.org/3/library/ssl.html#module-ssl \"ssl: TLS/SSL wrapper for socket objects\")\n module).\n\n[Availability](https://docs.python.org/3/library/intro.html#availability)\n: not WASI.\n\nThis module does not work or is not available on WebAssembly. See [WebAssembly platforms](https://docs.python.org/3/library/intro.html#wasm-availability)\n for more information.\n\nThe module provides the following classes:\n\n_class_ http.client.HTTPConnection(_host_, _port=None_, \\[_timeout_, \\]_source\\_address=None_, _blocksize=8192_)[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection \"Link to this definition\")\n\nAn [`HTTPConnection`](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection \"http.client.HTTPConnection\")\n instance represents one transaction with an HTTP server. It should be instantiated by passing it a host and optional port number. If no port number is passed, the port is extracted from the host string if it has the form `host:port`, else the default HTTP port (80) is used. If the optional _timeout_ parameter is given, blocking operations (like connection attempts) will timeout after that many seconds (if it is not given, the global default timeout setting is used). The optional _source\\_address_ parameter may be a tuple of a (host, port) to use as the source address the HTTP connection is made from. The optional _blocksize_ parameter sets the buffer size in bytes for sending a file-like message body.\n\nFor example, the following calls all create instances that connect to the server at the same host and port:\n\n\\>>>\n\n\\>>> h1 \\= http.client.HTTPConnection('www.python.org')\n\\>>> h2 \\= http.client.HTTPConnection('www.python.org:80')\n\\>>> h3 \\= http.client.HTTPConnection('www.python.org', 80)\n\\>>> h4 \\= http.client.HTTPConnection('www.python.org', 80, timeout\\=10)\n\nChanged in version 3.2: _source\\_address_ was added.\n\nChanged in version 3.4: The _strict_ parameter was removed. HTTP 0.9-style “Simple Responses” are no longer supported.\n\nChanged in version 3.7: _blocksize_ parameter was added.\n\n_class_ http.client.HTTPSConnection(_host_, _port=None_, _\\*_, \\[_timeout_, \\]_source\\_address=None_, _context=None_, _blocksize=8192_)[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection \"Link to this definition\")\n\nA subclass of [`HTTPConnection`](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection \"http.client.HTTPConnection\")\n that uses SSL for communication with secure servers. Default port is `443`. If _context_ is specified, it must be a [`ssl.SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext \"ssl.SSLContext\")\n instance describing the various SSL options.\n\nPlease read [Security considerations](https://docs.python.org/3/library/ssl.html#ssl-security)\n for more information on best practices.\n\nChanged in version 3.2: _source\\_address_, _context_ and _check\\_hostname_ were added.\n\nChanged in version 3.2: This class now supports HTTPS virtual hosts if possible (that is, if [`ssl.HAS_SNI`](https://docs.python.org/3/library/ssl.html#ssl.HAS_SNI \"ssl.HAS_SNI\")\n is true).\n\nChanged in version 3.4: The _strict_ parameter was removed. HTTP 0.9-style “Simple Responses” are no longer supported.\n\nChanged in version 3.4.3: This class now performs all the necessary certificate and hostname checks by default. To revert to the previous, unverified, behavior `ssl._create_unverified_context()` can be passed to the _context_ parameter.\n\nChanged in version 3.8: This class now enables TLS 1.3 [`ssl.SSLContext.post_handshake_auth`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.post_handshake_auth \"ssl.SSLContext.post_handshake_auth\")\n for the default _context_ or when _cert\\_file_ is passed with a custom _context_.\n\nChanged in version 3.10: This class now sends an ALPN extension with protocol indicator `http/1.1` when no _context_ is given. Custom _context_ should set ALPN protocols with [`set_alpn_protocols()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_alpn_protocols \"ssl.SSLContext.set_alpn_protocols\")\n.\n\nChanged in version 3.12: The deprecated _key\\_file_, _cert\\_file_ and _check\\_hostname_ parameters have been removed.\n\n_class_ http.client.HTTPResponse(_sock_, _debuglevel\\=0_, _method\\=None_, _url\\=None_)[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse \"Link to this definition\")\n\nClass whose instances are returned upon successful connection. Not instantiated directly by user.\n\nChanged in version 3.4: The _strict_ parameter was removed. HTTP 0.9 style “Simple Responses” are no longer supported.\n\nThis module provides the following function:\n\nhttp.client.parse\\_headers(_fp_)[¶](https://docs.python.org/3/library/http.client.html#http.client.parse_headers \"Link to this definition\")\n\nParse the headers from a file pointer _fp_ representing a HTTP request/response. The file has to be a [`BufferedIOBase`](https://docs.python.org/3/library/io.html#io.BufferedIOBase \"io.BufferedIOBase\")\n reader (i.e. not text) and must provide a valid [**RFC 2822**](https://datatracker.ietf.org/doc/html/rfc2822.html)\n style header.\n\nThis function returns an instance of [`http.client.HTTPMessage`](https://docs.python.org/3/library/http.client.html#http.client.HTTPMessage \"http.client.HTTPMessage\")\n that holds the header fields, but no payload (the same as [`HTTPResponse.msg`](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.msg \"http.client.HTTPResponse.msg\")\n and [`http.server.BaseHTTPRequestHandler.headers`](https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.headers \"http.server.BaseHTTPRequestHandler.headers\")\n). After returning, the file pointer _fp_ is ready to read the HTTP body.\n\nNote\n\n[`parse_headers()`](https://docs.python.org/3/library/http.client.html#http.client.parse_headers \"http.client.parse_headers\")\n does not parse the start-line of a HTTP message; it only parses the `Name: value` lines. The file has to be ready to read these field lines, so the first line should already be consumed before calling the function.\n\nThe following exceptions are raised as appropriate:\n\n_exception_ http.client.HTTPException[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPException \"Link to this definition\")\n\nThe base class of the other exceptions in this module. It is a subclass of [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception \"Exception\")\n.\n\n_exception_ http.client.NotConnected[¶](https://docs.python.org/3/library/http.client.html#http.client.NotConnected \"Link to this definition\")\n\nA subclass of [`HTTPException`](https://docs.python.org/3/library/http.client.html#http.client.HTTPException \"http.client.HTTPException\")\n.\n\n_exception_ http.client.InvalidURL[¶](https://docs.python.org/3/library/http.client.html#http.client.InvalidURL \"Link to this definition\")\n\nA subclass of [`HTTPException`](https://docs.python.org/3/library/http.client.html#http.client.HTTPException \"http.client.HTTPException\")\n, raised if a port is given and is either non-numeric or empty.\n\n_exception_ http.client.UnknownProtocol[¶](https://docs.python.org/3/library/http.client.html#http.client.UnknownProtocol \"Link to this definition\")\n\nA subclass of [`HTTPException`](https://docs.python.org/3/library/http.client.html#http.client.HTTPException \"http.client.HTTPException\")\n.\n\n_exception_ http.client.UnknownTransferEncoding[¶](https://docs.python.org/3/library/http.client.html#http.client.UnknownTransferEncoding \"Link to this definition\")\n\nA subclass of [`HTTPException`](https://docs.python.org/3/library/http.client.html#http.client.HTTPException \"http.client.HTTPException\")\n.\n\n_exception_ http.client.UnimplementedFileMode[¶](https://docs.python.org/3/library/http.client.html#http.client.UnimplementedFileMode \"Link to this definition\")\n\nA subclass of [`HTTPException`](https://docs.python.org/3/library/http.client.html#http.client.HTTPException \"http.client.HTTPException\")\n.\n\n_exception_ http.client.IncompleteRead[¶](https://docs.python.org/3/library/http.client.html#http.client.IncompleteRead \"Link to this definition\")\n\nA subclass of [`HTTPException`](https://docs.python.org/3/library/http.client.html#http.client.HTTPException \"http.client.HTTPException\")\n.\n\n_exception_ http.client.ImproperConnectionState[¶](https://docs.python.org/3/library/http.client.html#http.client.ImproperConnectionState \"Link to this definition\")\n\nA subclass of [`HTTPException`](https://docs.python.org/3/library/http.client.html#http.client.HTTPException \"http.client.HTTPException\")\n.\n\n_exception_ http.client.CannotSendRequest[¶](https://docs.python.org/3/library/http.client.html#http.client.CannotSendRequest \"Link to this definition\")\n\nA subclass of [`ImproperConnectionState`](https://docs.python.org/3/library/http.client.html#http.client.ImproperConnectionState \"http.client.ImproperConnectionState\")\n.\n\n_exception_ http.client.CannotSendHeader[¶](https://docs.python.org/3/library/http.client.html#http.client.CannotSendHeader \"Link to this definition\")\n\nA subclass of [`ImproperConnectionState`](https://docs.python.org/3/library/http.client.html#http.client.ImproperConnectionState \"http.client.ImproperConnectionState\")\n.\n\n_exception_ http.client.ResponseNotReady[¶](https://docs.python.org/3/library/http.client.html#http.client.ResponseNotReady \"Link to this definition\")\n\nA subclass of [`ImproperConnectionState`](https://docs.python.org/3/library/http.client.html#http.client.ImproperConnectionState \"http.client.ImproperConnectionState\")\n.\n\n_exception_ http.client.BadStatusLine[¶](https://docs.python.org/3/library/http.client.html#http.client.BadStatusLine \"Link to this definition\")\n\nA subclass of [`HTTPException`](https://docs.python.org/3/library/http.client.html#http.client.HTTPException \"http.client.HTTPException\")\n. Raised if a server responds with a HTTP status code that we don’t understand.\n\n_exception_ http.client.LineTooLong[¶](https://docs.python.org/3/library/http.client.html#http.client.LineTooLong \"Link to this definition\")\n\nA subclass of [`HTTPException`](https://docs.python.org/3/library/http.client.html#http.client.HTTPException \"http.client.HTTPException\")\n. Raised if an excessively long line is received in the HTTP protocol from the server.\n\n_exception_ http.client.RemoteDisconnected[¶](https://docs.python.org/3/library/http.client.html#http.client.RemoteDisconnected \"Link to this definition\")\n\nA subclass of [`ConnectionResetError`](https://docs.python.org/3/library/exceptions.html#ConnectionResetError \"ConnectionResetError\")\n and [`BadStatusLine`](https://docs.python.org/3/library/http.client.html#http.client.BadStatusLine \"http.client.BadStatusLine\")\n. Raised by [`HTTPConnection.getresponse()`](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.getresponse \"http.client.HTTPConnection.getresponse\")\n when the attempt to read the response results in no data read from the connection, indicating that the remote end has closed the connection.\n\nAdded in version 3.5: Previously, [`BadStatusLine`](https://docs.python.org/3/library/http.client.html#http.client.BadStatusLine \"http.client.BadStatusLine\")\n`('')` was raised.\n\nThe constants defined in this module are:\n\nhttp.client.HTTP\\_PORT[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTP_PORT \"Link to this definition\")\n\nThe default port for the HTTP protocol (always `80`).\n\nhttp.client.HTTPS\\_PORT[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPS_PORT \"Link to this definition\")\n\nThe default port for the HTTPS protocol (always `443`).\n\nhttp.client.responses[¶](https://docs.python.org/3/library/http.client.html#http.client.responses \"Link to this definition\")\n\nThis dictionary maps the HTTP 1.1 status codes to the W3C names.\n\nExample: `http.client.responses[http.client.NOT_FOUND]` is `'Not Found'`.\n\nSee [HTTP status codes](https://docs.python.org/3/library/http.html#http-status-codes)\n for a list of HTTP status codes that are available in this module as constants.\n\nHTTPConnection Objects[¶](https://docs.python.org/3/library/http.client.html#httpconnection-objects \"Link to this heading\")\n\n----------------------------------------------------------------------------------------------------------------------------\n\n[`HTTPConnection`](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection \"http.client.HTTPConnection\")\n instances have the following methods:\n\nHTTPConnection.request(_method_, _url_, _body\\=None_, _headers\\={}_, _\\*_, _encode\\_chunked\\=False_)[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.request \"Link to this definition\")\n\nThis will send a request to the server using the HTTP request method _method_ and the request URI _url_. The provided _url_ must be an absolute path to conform with [**RFC 2616 §5.1.2**](https://datatracker.ietf.org/doc/html/rfc2616.html#section-5.1.2)\n (unless connecting to an HTTP proxy server or using the `OPTIONS` or `CONNECT` methods).\n\nIf _body_ is specified, the specified data is sent after the headers are finished. It may be a [`str`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n, a [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object)\n, an open [file object](https://docs.python.org/3/glossary.html#term-file-object)\n, or an iterable of [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes \"bytes\")\n. If _body_ is a string, it is encoded as ISO-8859-1, the default for HTTP. If it is a bytes-like object, the bytes are sent as is. If it is a [file object](https://docs.python.org/3/glossary.html#term-file-object)\n, the contents of the file is sent; this file object should support at least the `read()` method. If the file object is an instance of [`io.TextIOBase`](https://docs.python.org/3/library/io.html#io.TextIOBase \"io.TextIOBase\")\n, the data returned by the `read()` method will be encoded as ISO-8859-1, otherwise the data returned by `read()` is sent as is. If _body_ is an iterable, the elements of the iterable are sent as is until the iterable is exhausted.\n\nThe _headers_ argument should be a mapping of extra HTTP headers to send with the request. A [**Host header**](https://datatracker.ietf.org/doc/html/rfc2616.html#section-14.23)\n must be provided to conform with [**RFC 2616 §5.1.2**](https://datatracker.ietf.org/doc/html/rfc2616.html#section-5.1.2)\n (unless connecting to an HTTP proxy server or using the `OPTIONS` or `CONNECT` methods).\n\nIf _headers_ contains neither Content-Length nor Transfer-Encoding, but there is a request body, one of those header fields will be added automatically. If _body_ is `None`, the Content-Length header is set to `0` for methods that expect a body (`PUT`, `POST`, and `PATCH`). If _body_ is a string or a bytes-like object that is not also a [file](https://docs.python.org/3/glossary.html#term-file-object)\n, the Content-Length header is set to its length. Any other type of _body_ (files and iterables in general) will be chunk-encoded, and the Transfer-Encoding header will automatically be set instead of Content-Length.\n\nThe _encode\\_chunked_ argument is only relevant if Transfer-Encoding is specified in _headers_. If _encode\\_chunked_ is `False`, the HTTPConnection object assumes that all encoding is handled by the calling code. If it is `True`, the body will be chunk-encoded.\n\nFor example, to perform a `GET` request to `https://docs.python.org/3/`:\n\n\\>>>\n\n\\>>> import http.client\n\\>>> host \\= \"docs.python.org\"\n\\>>> conn \\= http.client.HTTPSConnection(host)\n\\>>> conn.request(\"GET\", \"/3/\", headers\\={\"Host\": host})\n\\>>> response \\= conn.getresponse()\n\\>>> print(response.status, response.reason)\n200 OK\n\nNote\n\nChunked transfer encoding has been added to the HTTP protocol version 1.1. Unless the HTTP server is known to handle HTTP 1.1, the caller must either specify the Content-Length, or must pass a [`str`](https://docs.python.org/3/library/stdtypes.html#str \"str\")\n or bytes-like object that is not also a file as the body representation.\n\nChanged in version 3.2: _body_ can now be an iterable.\n\nChanged in version 3.6: If neither Content-Length nor Transfer-Encoding are set in _headers_, file and iterable _body_ objects are now chunk-encoded. The _encode\\_chunked_ argument was added. No attempt is made to determine the Content-Length for file objects.\n\nHTTPConnection.getresponse()[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.getresponse \"Link to this definition\")\n\nShould be called after a request is sent to get the response from the server. Returns an [`HTTPResponse`](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse \"http.client.HTTPResponse\")\n instance.\n\nNote\n\nNote that you must have read the whole response before you can send a new request to the server.\n\nChanged in version 3.5: If a [`ConnectionError`](https://docs.python.org/3/library/exceptions.html#ConnectionError \"ConnectionError\")\n or subclass is raised, the [`HTTPConnection`](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection \"http.client.HTTPConnection\")\n object will be ready to reconnect when a new request is sent.\n\nHTTPConnection.set\\_debuglevel(_level_)[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.set_debuglevel \"Link to this definition\")\n\nSet the debugging level. The default debug level is `0`, meaning no debugging output is printed. Any value greater than `0` will cause all currently defined debug output to be printed to stdout. The `debuglevel` is passed to any new [`HTTPResponse`](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse \"http.client.HTTPResponse\")\n objects that are created.\n\nAdded in version 3.1.\n\nHTTPConnection.set\\_tunnel(_host_, _port\\=None_, _headers\\=None_)[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.set_tunnel \"Link to this definition\")\n\nSet the host and the port for HTTP Connect Tunnelling. This allows running the connection through a proxy server.\n\nThe _host_ and _port_ arguments specify the endpoint of the tunneled connection (i.e. the address included in the CONNECT request, _not_ the address of the proxy server).\n\nThe _headers_ argument should be a mapping of extra HTTP headers to send with the CONNECT request.\n\nAs HTTP/1.1 is used for HTTP CONNECT tunnelling request, [as per the RFC](https://datatracker.ietf.org/doc/html/rfc7231#section-4.3.6)\n, a HTTP `Host:` header must be provided, matching the authority-form of the request target provided as the destination for the CONNECT request. If a HTTP `Host:` header is not provided via the headers argument, one is generated and transmitted automatically.\n\nFor example, to tunnel through a HTTPS proxy server running locally on port 8080, we would pass the address of the proxy to the [`HTTPSConnection`](https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection \"http.client.HTTPSConnection\")\n constructor, and the address of the host that we eventually want to reach to the [`set_tunnel()`](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.set_tunnel \"http.client.HTTPConnection.set_tunnel\")\n method:\n\n\\>>>\n\n\\>>> import http.client\n\\>>> conn \\= http.client.HTTPSConnection(\"localhost\", 8080)\n\\>>> conn.set\\_tunnel(\"www.python.org\")\n\\>>> conn.request(\"HEAD\",\"/index.html\")\n\nAdded in version 3.2.\n\nChanged in version 3.12: HTTP CONNECT tunnelling requests use protocol HTTP/1.1, upgraded from protocol HTTP/1.0. `Host:` HTTP headers are mandatory for HTTP/1.1, so one will be automatically generated and transmitted if not provided in the headers argument.\n\nHTTPConnection.get\\_proxy\\_response\\_headers()[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.get_proxy_response_headers \"Link to this definition\")\n\nReturns a dictionary with the headers of the response received from the proxy server to the CONNECT request.\n\nIf the CONNECT request was not sent, the method returns `None`.\n\nAdded in version 3.12.\n\nHTTPConnection.connect()[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.connect \"Link to this definition\")\n\nConnect to the server specified when the object was created. By default, this is called automatically when making a request if the client does not already have a connection.\n\nRaises an [auditing event](https://docs.python.org/3/library/sys.html#auditing)\n `http.client.connect` with arguments `self`, `host`, `port`.\n\nHTTPConnection.close()[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.close \"Link to this definition\")\n\nClose the connection to the server.\n\nHTTPConnection.blocksize[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.blocksize \"Link to this definition\")\n\nBuffer size in bytes for sending a file-like message body.\n\nAdded in version 3.7.\n\nAs an alternative to using the [`request()`](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.request \"http.client.HTTPConnection.request\")\n method described above, you can also send your request step by step, by using the four functions below.\n\nHTTPConnection.putrequest(_method_, _url_, _skip\\_host\\=False_, _skip\\_accept\\_encoding\\=False_)[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.putrequest \"Link to this definition\")\n\nThis should be the first call after the connection to the server has been made. It sends a line to the server consisting of the _method_ string, the _url_ string, and the HTTP version (`HTTP/1.1`). To disable automatic sending of `Host:` or `Accept-Encoding:` headers (for example to accept additional content encodings), specify _skip\\_host_ or _skip\\_accept\\_encoding_ with non-False values.\n\nHTTPConnection.putheader(_header_, _argument_\\[, _..._\\])[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.putheader \"Link to this definition\")\n\nSend an [**RFC 822**](https://datatracker.ietf.org/doc/html/rfc822.html)\n\\-style header to the server. It sends a line to the server consisting of the header, a colon and a space, and the first argument. If more arguments are given, continuation lines are sent, each consisting of a tab and an argument.\n\nHTTPConnection.endheaders(_message\\_body\\=None_, _\\*_, _encode\\_chunked\\=False_)[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.endheaders \"Link to this definition\")\n\nSend a blank line to the server, signalling the end of the headers. The optional _message\\_body_ argument can be used to pass a message body associated with the request.\n\nIf _encode\\_chunked_ is `True`, the result of each iteration of _message\\_body_ will be chunk-encoded as specified in [**RFC 7230**](https://datatracker.ietf.org/doc/html/rfc7230.html)\n, Section 3.3.1. How the data is encoded is dependent on the type of _message\\_body_. If _message\\_body_ implements the [buffer interface](https://docs.python.org/3/c-api/buffer.html#bufferobjects)\n the encoding will result in a single chunk. If _message\\_body_ is a [`collections.abc.Iterable`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable \"collections.abc.Iterable\")\n, each iteration of _message\\_body_ will result in a chunk. If _message\\_body_ is a [file object](https://docs.python.org/3/glossary.html#term-file-object)\n, each call to `.read()` will result in a chunk. The method automatically signals the end of the chunk-encoded data immediately after _message\\_body_.\n\nNote\n\nDue to the chunked encoding specification, empty chunks yielded by an iterator body will be ignored by the chunk-encoder. This is to avoid premature termination of the read of the request by the target server due to malformed encoding.\n\nChanged in version 3.6: Added chunked encoding support and the _encode\\_chunked_ parameter.\n\nHTTPConnection.send(_data_)[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.send \"Link to this definition\")\n\nSend data to the server. This should be used directly only after the [`endheaders()`](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.endheaders \"http.client.HTTPConnection.endheaders\")\n method has been called and before [`getresponse()`](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection.getresponse \"http.client.HTTPConnection.getresponse\")\n is called.\n\nRaises an [auditing event](https://docs.python.org/3/library/sys.html#auditing)\n `http.client.send` with arguments `self`, `data`.\n\nHTTPResponse Objects[¶](https://docs.python.org/3/library/http.client.html#httpresponse-objects \"Link to this heading\")\n\n------------------------------------------------------------------------------------------------------------------------\n\nAn [`HTTPResponse`](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse \"http.client.HTTPResponse\")\n instance wraps the HTTP response from the server. It provides access to the request headers and the entity body. The response is an iterable object and can be used in a with statement.\n\nChanged in version 3.5: The [`io.BufferedIOBase`](https://docs.python.org/3/library/io.html#io.BufferedIOBase \"io.BufferedIOBase\")\n interface is now implemented and all of its reader operations are supported.\n\nHTTPResponse.read(\\[_amt_\\])[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.read \"Link to this definition\")\n\nReads and returns the response body, or up to the next _amt_ bytes.\n\nHTTPResponse.readinto(_b_)[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.readinto \"Link to this definition\")\n\nReads up to the next len(b) bytes of the response body into the buffer _b_. Returns the number of bytes read.\n\nAdded in version 3.3.\n\nHTTPResponse.getheader(_name_, _default\\=None_)[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.getheader \"Link to this definition\")\n\nReturn the value of the header _name_, or _default_ if there is no header matching _name_. If there is more than one header with the name _name_, return all of the values joined by ‘, ‘. If _default_ is any iterable other than a single string, its elements are similarly returned joined by commas.\n\nHTTPResponse.getheaders()[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.getheaders \"Link to this definition\")\n\nReturn a list of (header, value) tuples.\n\nHTTPResponse.fileno()[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.fileno \"Link to this definition\")\n\nReturn the `fileno` of the underlying socket.\n\nHTTPResponse.msg[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.msg \"Link to this definition\")\n\nA [`http.client.HTTPMessage`](https://docs.python.org/3/library/http.client.html#http.client.HTTPMessage \"http.client.HTTPMessage\")\n instance containing the response headers. [`http.client.HTTPMessage`](https://docs.python.org/3/library/http.client.html#http.client.HTTPMessage \"http.client.HTTPMessage\")\n is a subclass of [`email.message.Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message \"email.message.Message\")\n.\n\nHTTPResponse.version[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.version \"Link to this definition\")\n\nHTTP protocol version used by server. 10 for HTTP/1.0, 11 for HTTP/1.1.\n\nHTTPResponse.url[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.url \"Link to this definition\")\n\nURL of the resource retrieved, commonly used to determine if a redirect was followed.\n\nHTTPResponse.headers[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.headers \"Link to this definition\")\n\nHeaders of the response in the form of an [`email.message.EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage \"email.message.EmailMessage\")\n instance.\n\nHTTPResponse.status[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.status \"Link to this definition\")\n\nStatus code returned by server.\n\nHTTPResponse.reason[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.reason \"Link to this definition\")\n\nReason phrase returned by server.\n\nHTTPResponse.debuglevel[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.debuglevel \"Link to this definition\")\n\nA debugging hook. If [`debuglevel`](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.debuglevel \"http.client.HTTPResponse.debuglevel\")\n is greater than zero, messages will be printed to stdout as the response is read and parsed.\n\nHTTPResponse.closed[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.closed \"Link to this definition\")\n\nIs `True` if the stream is closed.\n\nHTTPResponse.geturl()[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.geturl \"Link to this definition\")\n\nDeprecated since version 3.9: Deprecated in favor of [`url`](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.url \"http.client.HTTPResponse.url\")\n.\n\nHTTPResponse.info()[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.info \"Link to this definition\")\n\nDeprecated since version 3.9: Deprecated in favor of [`headers`](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.headers \"http.client.HTTPResponse.headers\")\n.\n\nHTTPResponse.getcode()[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.getcode \"Link to this definition\")\n\nDeprecated since version 3.9: Deprecated in favor of [`status`](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.status \"http.client.HTTPResponse.status\")\n.\n\nExamples[¶](https://docs.python.org/3/library/http.client.html#examples \"Link to this heading\")\n\n------------------------------------------------------------------------------------------------\n\nHere is an example session that uses the `GET` method:\n\n\\>>>\n\n\\>>> import http.client\n\\>>> conn \\= http.client.HTTPSConnection(\"www.python.org\")\n\\>>> conn.request(\"GET\", \"/\")\n\\>>> r1 \\= conn.getresponse()\n\\>>> print(r1.status, r1.reason)\n200 OK\n\\>>> data1 \\= r1.read()  \\# This will return entire content.\n\\>>> \\# The following example demonstrates reading data in chunks.\n\\>>> conn.request(\"GET\", \"/\")\n\\>>> r1 \\= conn.getresponse()\n\\>>> while chunk := r1.read(200):\n...     print(repr(chunk))\nb'<!doctype html>\\\\n<!--\\[if\"...\\\n...\\\n\\>>> \\# Example of an invalid request\\\n\\>>> conn \\= http.client.HTTPSConnection(\"docs.python.org\")\\\n\\>>> conn.request(\"GET\", \"/parrot.spam\")\\\n\\>>> r2 \\= conn.getresponse()\\\n\\>>> print(r2.status, r2.reason)\\\n404 Not Found\\\n\\>>> data2 \\= r2.read()\\\n\\>>> conn.close()\\\n\\\nHere is an example session that uses the `HEAD` method. Note that the `HEAD` method never returns any data.\\\n\\\n\\>>>\\\n\\\n\\>>> import http.client\\\n\\>>> conn \\= http.client.HTTPSConnection(\"www.python.org\")\\\n\\>>> conn.request(\"HEAD\", \"/\")\\\n\\>>> res \\= conn.getresponse()\\\n\\>>> print(res.status, res.reason)\\\n200 OK\\\n\\>>> data \\= res.read()\\\n\\>>> print(len(data))\\\n0\\\n\\>>> data \\== b''\\\nTrue\\\n\\\nHere is an example session that uses the `POST` method:\\\n\\\n\\>>>\\\n\\\n\\>>> import http.client, urllib.parse\\\n\\>>> params \\= urllib.parse.urlencode({'@number': 12524, '@type': 'issue', '@action': 'show'})\\\n\\>>> headers \\= {\"Content-type\": \"application/x-www-form-urlencoded\",\\\n...            \"Accept\": \"text/plain\"}\\\n\\>>> conn \\= http.client.HTTPConnection(\"bugs.python.org\")\\\n\\>>> conn.request(\"POST\", \"\", params, headers)\\\n\\>>> response \\= conn.getresponse()\\\n\\>>> print(response.status, response.reason)\\\n302 Found\\\n\\>>> data \\= response.read()\\\n\\>>> data\\\nb'Redirecting to <a href=\"https://bugs.python.org/issue12524\">https://bugs.python.org/issue12524</a>'\\\n\\>>> conn.close()\\\n\\\nClient side HTTP `PUT` requests are very similar to `POST` requests. The difference lies only on the server side where HTTP servers will allow resources to be created via `PUT` requests. It should be noted that custom HTTP methods are also handled in [`urllib.request.Request`](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request \"urllib.request.Request\")\\\n by setting the appropriate method attribute. Here is an example session that uses the `PUT` method:\\\n\\\n\\>>>\\\n\\\n\\>>> \\# This creates an HTTP request\\\n\\>>> \\# with the content of BODY as the enclosed representation\\\n\\>>> \\# for the resource http://localhost:8080/file\\\n...\\\n\\>>> import http.client\\\n\\>>> BODY \\= \"\\*\\*\\*filecontents\\*\\*\\*\"\\\n\\>>> conn \\= http.client.HTTPConnection(\"localhost\", 8080)\\\n\\>>> conn.request(\"PUT\", \"/file\", BODY)\\\n\\>>> response \\= conn.getresponse()\\\n\\>>> print(response.status, response.reason)\\\n200, OK\\\n\\\nHTTPMessage Objects[¶](https://docs.python.org/3/library/http.client.html#httpmessage-objects \"Link to this heading\")\\\n\\\n----------------------------------------------------------------------------------------------------------------------\\\n\\\n_class_ http.client.HTTPMessage(_email.message.Message_)[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPMessage \"Link to this definition\")\\\n\\\nAn [`http.client.HTTPMessage`](https://docs.python.org/3/library/http.client.html#http.client.HTTPMessage \"http.client.HTTPMessage\")\\\n instance holds the headers from an HTTP response. It is implemented using the [`email.message.Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message \"email.message.Message\")\\\n class.\\\n\\\n### [Table of Contents](https://docs.python.org/3/contents.html)\\\n\\\n*   [`http.client` — HTTP protocol client](https://docs.python.org/3/library/http.client.html#)\\\n    *   [HTTPConnection Objects](https://docs.python.org/3/library/http.client.html#httpconnection-objects)\\\n        \\\n    *   [HTTPResponse Objects](https://docs.python.org/3/library/http.client.html#httpresponse-objects)\\\n        \\\n    *   [Examples](https://docs.python.org/3/library/http.client.html#examples)\\\n        \\\n    *   [HTTPMessage Objects](https://docs.python.org/3/library/http.client.html#httpmessage-objects)\\\n        \\\n\\\n#### Previous topic\\\n\\\n[`http` — HTTP modules](https://docs.python.org/3/library/http.html \"previous chapter\")\\\n\\\n#### Next topic\\\n\\\n[`ftplib` — FTP protocol client](https://docs.python.org/3/library/ftplib.html \"next chapter\")\\\n\\\n### This Page\\\n\\\n*   [Report a Bug](https://docs.python.org/3/bugs.html)\\\n    \\\n*   [Show Source](https://github.com/python/cpython/blob/main/Doc/library/http.client.rst)\\\n    \\\n\\\n«\\\n\\\n### Navigation\\\n\\\n*   [index](https://docs.python.org/3/genindex.html \"General Index\")\\\n    \\\n*   [modules](https://docs.python.org/3/py-modindex.html \"Python Module Index\")\\\n     |\\\n*   [next](https://docs.python.org/3/library/ftplib.html \"ftplib — FTP protocol client\")\\\n     |\\\n*   [previous](https://docs.python.org/3/library/http.html \"http — HTTP modules\")\\\n     |\\\n*   ![Python logo](https://docs.python.org/3/_static/py.svg)\\\n*   [Python](https://www.python.org/)\\\n     »\\\n*   EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文\\\n    \\\n    dev (3.14)3.13.23.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6\\\n    \\\n\\\n*   [3.13.2 Documentation](https://docs.python.org/3/index.html)\\\n     »\\\n*   [The Python Standard Library](https://docs.python.org/3/library/index.html)\\\n     »\\\n*   [Internet Protocols and Support](https://docs.python.org/3/library/internet.html)\\\n     »\\\n*   [`http.client` — HTTP protocol client](https://docs.python.org/3/library/http.client.html)\\\n    \\\n*    \\\n    \\\n    |\\\n*   Theme Auto Light Dark |","metadata":{"og:image":"https://docs.python.org/3/_static/og-image.png","og:image:width":"200","ogSiteName":"Python documentation","readthedocs-addons-api-version":"1","og:image:height":"200","og:description":"Source code: Lib/http/client.py This module defines classes that implement the client side of the HTTP and HTTPS protocols. It is normally not used directly — the module urllib.request uses it to h...","viewport":["width=device-width, initial-scale=1.0","width=device-width, initial-scale=1","width=device-width, initial-scale=1.0"],"og:type":"website","ogTitle":"http.client — HTTP protocol client","theme-color":"#3776ab","title":"http.client — HTTP protocol client — Python 3.13.2 documentation","ogUrl":"https://docs.python.org/3/library/http.client.html","ogImage":"https://docs.python.org/3/_static/og-image.png","og:site_name":"Python documentation","og:url":"https://docs.python.org/3/library/http.client.html","description":"Source code: Lib/http/client.py This module defines classes that implement the client side of the HTTP and HTTPS protocols. It is normally not used directly — the module urllib.request uses it to h...","og:title":"http.client — HTTP protocol client","og:image:alt":"Python documentation","favicon":"https://docs.python.org/3/_static/py.svg","language":"en","ogDescription":"Source code: Lib/http/client.py This module defines classes that implement the client side of the HTTP and HTTPS protocols. It is normally not used directly — the module urllib.request uses it to h...","scrapeId":"501b299d-8211-476c-ae32-5f8a5a9495a6","sourceURL":"https://docs.python.org/3/library/http.client.html","url":"https://docs.python.org/3/library/http.client.html","statusCode":200}}]}