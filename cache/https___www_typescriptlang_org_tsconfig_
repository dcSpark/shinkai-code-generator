{"success":true,"status":"completed","completed":1,"total":1,"creditsUsed":1,"expiresAt":"2025-03-05T21:15:39.000Z","data":[{"markdown":"[Intro to the TSConfig Reference\\\n-------------------------------\\\n\\\nA TSConfig file in a directory indicates that the directory is the root of a TypeScript or JavaScript project...](https://www.typescriptlang.org/tsconfig/#)\n\nCompiler Options\n----------------\n\n##### Top Level\n\n1.  `[files](https://www.typescriptlang.org/tsconfig/#files) ,`\n2.  `[extends](https://www.typescriptlang.org/tsconfig/#extends) ,`\n3.  `[include](https://www.typescriptlang.org/tsconfig/#include) ,`\n4.  `[exclude](https://www.typescriptlang.org/tsconfig/#exclude)  and`\n5.  `[references](https://www.typescriptlang.org/tsconfig/#references) `\n\n#### `[\"compilerOptions\"](https://www.typescriptlang.org/tsconfig/#compilerOptions) `\n\n##### Type Checking\n\n1.  `[allowUnreachableCode](https://www.typescriptlang.org/tsconfig/#allowUnreachableCode) ,`\n2.  `[allowUnusedLabels](https://www.typescriptlang.org/tsconfig/#allowUnusedLabels) ,`\n3.  `[alwaysStrict](https://www.typescriptlang.org/tsconfig/#alwaysStrict) ,`\n4.  `[exactOptionalPropertyTypes](https://www.typescriptlang.org/tsconfig/#exactOptionalPropertyTypes) ,`\n5.  `[noFallthroughCasesInSwitch](https://www.typescriptlang.org/tsconfig/#noFallthroughCasesInSwitch) ,`\n6.  `[noImplicitAny](https://www.typescriptlang.org/tsconfig/#noImplicitAny) ,`\n7.  `[noImplicitOverride](https://www.typescriptlang.org/tsconfig/#noImplicitOverride) ,`\n8.  `[noImplicitReturns](https://www.typescriptlang.org/tsconfig/#noImplicitReturns) ,`\n9.  `[noImplicitThis](https://www.typescriptlang.org/tsconfig/#noImplicitThis) ,`\n10.  `[noPropertyAccessFromIndexSignature](https://www.typescriptlang.org/tsconfig/#noPropertyAccessFromIndexSignature) ,`\n11.  `[noUncheckedIndexedAccess](https://www.typescriptlang.org/tsconfig/#noUncheckedIndexedAccess) ,`\n12.  `[noUnusedLocals](https://www.typescriptlang.org/tsconfig/#noUnusedLocals) ,`\n13.  `[noUnusedParameters](https://www.typescriptlang.org/tsconfig/#noUnusedParameters) ,`\n14.  `[strict](https://www.typescriptlang.org/tsconfig/#strict) ,`\n15.  `[strictBindCallApply](https://www.typescriptlang.org/tsconfig/#strictBindCallApply) ,`\n16.  `[strictBuiltinIteratorReturn](https://www.typescriptlang.org/tsconfig/#strictBuiltinIteratorReturn) ,`\n17.  `[strictFunctionTypes](https://www.typescriptlang.org/tsconfig/#strictFunctionTypes) ,`\n18.  `[strictNullChecks](https://www.typescriptlang.org/tsconfig/#strictNullChecks) ,`\n19.  `[strictPropertyInitialization](https://www.typescriptlang.org/tsconfig/#strictPropertyInitialization)  and`\n20.  `[useUnknownInCatchVariables](https://www.typescriptlang.org/tsconfig/#useUnknownInCatchVariables) `\n\n##### Modules\n\n1.  `[allowArbitraryExtensions](https://www.typescriptlang.org/tsconfig/#allowArbitraryExtensions) ,`\n2.  `[allowImportingTsExtensions](https://www.typescriptlang.org/tsconfig/#allowImportingTsExtensions) ,`\n3.  `[allowUmdGlobalAccess](https://www.typescriptlang.org/tsconfig/#allowUmdGlobalAccess) ,`\n4.  `[baseUrl](https://www.typescriptlang.org/tsconfig/#baseUrl) ,`\n5.  `[customConditions](https://www.typescriptlang.org/tsconfig/#customConditions) ,`\n6.  `[module](https://www.typescriptlang.org/tsconfig/#module) ,`\n7.  `[moduleResolution](https://www.typescriptlang.org/tsconfig/#moduleResolution) ,`\n8.  `[moduleSuffixes](https://www.typescriptlang.org/tsconfig/#moduleSuffixes) ,`\n9.  `[noResolve](https://www.typescriptlang.org/tsconfig/#noResolve) ,`\n10.  `[noUncheckedSideEffectImports](https://www.typescriptlang.org/tsconfig/#noUncheckedSideEffectImports) ,`\n11.  `[paths](https://www.typescriptlang.org/tsconfig/#paths) ,`\n12.  `[resolveJsonModule](https://www.typescriptlang.org/tsconfig/#resolveJsonModule) ,`\n13.  `[resolvePackageJsonExports](https://www.typescriptlang.org/tsconfig/#resolvePackageJsonExports) ,`\n14.  `[resolvePackageJsonImports](https://www.typescriptlang.org/tsconfig/#resolvePackageJsonImports) ,`\n15.  `[rewriteRelativeImportExtensions](https://www.typescriptlang.org/tsconfig/#rewriteRelativeImportExtensions) ,`\n16.  `[rootDir](https://www.typescriptlang.org/tsconfig/#rootDir) ,`\n17.  `[rootDirs](https://www.typescriptlang.org/tsconfig/#rootDirs) ,`\n18.  `[typeRoots](https://www.typescriptlang.org/tsconfig/#typeRoots)  and`\n19.  `[types](https://www.typescriptlang.org/tsconfig/#types) `\n\n##### Emit\n\n1.  `[declaration](https://www.typescriptlang.org/tsconfig/#declaration) ,`\n2.  `[declarationDir](https://www.typescriptlang.org/tsconfig/#declarationDir) ,`\n3.  `[declarationMap](https://www.typescriptlang.org/tsconfig/#declarationMap) ,`\n4.  `[downlevelIteration](https://www.typescriptlang.org/tsconfig/#downlevelIteration) ,`\n5.  `[emitBOM](https://www.typescriptlang.org/tsconfig/#emitBOM) ,`\n6.  `[emitDeclarationOnly](https://www.typescriptlang.org/tsconfig/#emitDeclarationOnly) ,`\n7.  `[importHelpers](https://www.typescriptlang.org/tsconfig/#importHelpers) ,`\n8.  `[inlineSourceMap](https://www.typescriptlang.org/tsconfig/#inlineSourceMap) ,`\n9.  `[inlineSources](https://www.typescriptlang.org/tsconfig/#inlineSources) ,`\n10.  `[mapRoot](https://www.typescriptlang.org/tsconfig/#mapRoot) ,`\n11.  `[newLine](https://www.typescriptlang.org/tsconfig/#newLine) ,`\n12.  `[noEmit](https://www.typescriptlang.org/tsconfig/#noEmit) ,`\n13.  `[noEmitHelpers](https://www.typescriptlang.org/tsconfig/#noEmitHelpers) ,`\n14.  `[noEmitOnError](https://www.typescriptlang.org/tsconfig/#noEmitOnError) ,`\n15.  `[outDir](https://www.typescriptlang.org/tsconfig/#outDir) ,`\n16.  `[outFile](https://www.typescriptlang.org/tsconfig/#outFile) ,`\n17.  `[preserveConstEnums](https://www.typescriptlang.org/tsconfig/#preserveConstEnums) ,`\n18.  `[removeComments](https://www.typescriptlang.org/tsconfig/#removeComments) ,`\n19.  `[sourceMap](https://www.typescriptlang.org/tsconfig/#sourceMap) ,`\n20.  `[sourceRoot](https://www.typescriptlang.org/tsconfig/#sourceRoot)  and`\n21.  `[stripInternal](https://www.typescriptlang.org/tsconfig/#stripInternal) `\n\n##### JavaScript Support\n\n1.  `[allowJs](https://www.typescriptlang.org/tsconfig/#allowJs) ,`\n2.  `[checkJs](https://www.typescriptlang.org/tsconfig/#checkJs)  and`\n3.  `[maxNodeModuleJsDepth](https://www.typescriptlang.org/tsconfig/#maxNodeModuleJsDepth) `\n\n##### Editor Support\n\n1.  `[disableSizeLimit](https://www.typescriptlang.org/tsconfig/#disableSizeLimit)  and`\n2.  `[plugins](https://www.typescriptlang.org/tsconfig/#plugins) `\n\n##### Interop Constraints\n\n1.  `[allowSyntheticDefaultImports](https://www.typescriptlang.org/tsconfig/#allowSyntheticDefaultImports) ,`\n2.  `[erasableSyntaxOnly](https://www.typescriptlang.org/tsconfig/#erasableSyntaxOnly) ,`\n3.  `[esModuleInterop](https://www.typescriptlang.org/tsconfig/#esModuleInterop) ,`\n4.  `[forceConsistentCasingInFileNames](https://www.typescriptlang.org/tsconfig/#forceConsistentCasingInFileNames) ,`\n5.  `[isolatedDeclarations](https://www.typescriptlang.org/tsconfig/#isolatedDeclarations) ,`\n6.  `[isolatedModules](https://www.typescriptlang.org/tsconfig/#isolatedModules) ,`\n7.  `[preserveSymlinks](https://www.typescriptlang.org/tsconfig/#preserveSymlinks)  and`\n8.  `[verbatimModuleSyntax](https://www.typescriptlang.org/tsconfig/#verbatimModuleSyntax) `\n\n##### Backwards Compatibility\n\n1.  `[charset](https://www.typescriptlang.org/tsconfig/#charset) ,`\n2.  `[importsNotUsedAsValues](https://www.typescriptlang.org/tsconfig/#importsNotUsedAsValues) ,`\n3.  `[keyofStringsOnly](https://www.typescriptlang.org/tsconfig/#keyofStringsOnly) ,`\n4.  `[noImplicitUseStrict](https://www.typescriptlang.org/tsconfig/#noImplicitUseStrict) ,`\n5.  `[noStrictGenericChecks](https://www.typescriptlang.org/tsconfig/#noStrictGenericChecks) ,`\n6.  `[out](https://www.typescriptlang.org/tsconfig/#out) ,`\n7.  `[preserveValueImports](https://www.typescriptlang.org/tsconfig/#preserveValueImports) ,`\n8.  `[suppressExcessPropertyErrors](https://www.typescriptlang.org/tsconfig/#suppressExcessPropertyErrors)  and`\n9.  `[suppressImplicitAnyIndexErrors](https://www.typescriptlang.org/tsconfig/#suppressImplicitAnyIndexErrors) `\n\n##### Language and Environment\n\n1.  `[emitDecoratorMetadata](https://www.typescriptlang.org/tsconfig/#emitDecoratorMetadata) ,`\n2.  `[experimentalDecorators](https://www.typescriptlang.org/tsconfig/#experimentalDecorators) ,`\n3.  `[jsx](https://www.typescriptlang.org/tsconfig/#jsx) ,`\n4.  `[jsxFactory](https://www.typescriptlang.org/tsconfig/#jsxFactory) ,`\n5.  `[jsxFragmentFactory](https://www.typescriptlang.org/tsconfig/#jsxFragmentFactory) ,`\n6.  `[jsxImportSource](https://www.typescriptlang.org/tsconfig/#jsxImportSource) ,`\n7.  `[lib](https://www.typescriptlang.org/tsconfig/#lib) ,`\n8.  `[libReplacement](https://www.typescriptlang.org/tsconfig/#libReplacement) ,`\n9.  `[moduleDetection](https://www.typescriptlang.org/tsconfig/#moduleDetection) ,`\n10.  `[noLib](https://www.typescriptlang.org/tsconfig/#noLib) ,`\n11.  `[reactNamespace](https://www.typescriptlang.org/tsconfig/#reactNamespace) ,`\n12.  `[target](https://www.typescriptlang.org/tsconfig/#target)  and`\n13.  `[useDefineForClassFields](https://www.typescriptlang.org/tsconfig/#useDefineForClassFields) `\n\n##### Compiler Diagnostics\n\n1.  `[diagnostics](https://www.typescriptlang.org/tsconfig/#diagnostics) ,`\n2.  `[explainFiles](https://www.typescriptlang.org/tsconfig/#explainFiles) ,`\n3.  `[extendedDiagnostics](https://www.typescriptlang.org/tsconfig/#extendedDiagnostics) ,`\n4.  `[generateCpuProfile](https://www.typescriptlang.org/tsconfig/#generateCpuProfile) ,`\n5.  `[generateTrace](https://www.typescriptlang.org/tsconfig/#generateTrace) ,`\n6.  `[listEmittedFiles](https://www.typescriptlang.org/tsconfig/#listEmittedFiles) ,`\n7.  `[listFiles](https://www.typescriptlang.org/tsconfig/#listFiles) ,`\n8.  `[noCheck](https://www.typescriptlang.org/tsconfig/#noCheck)  and`\n9.  `[traceResolution](https://www.typescriptlang.org/tsconfig/#traceResolution) `\n\n##### Projects\n\n1.  `[composite](https://www.typescriptlang.org/tsconfig/#composite) ,`\n2.  `[disableReferencedProjectLoad](https://www.typescriptlang.org/tsconfig/#disableReferencedProjectLoad) ,`\n3.  `[disableSolutionSearching](https://www.typescriptlang.org/tsconfig/#disableSolutionSearching) ,`\n4.  `[disableSourceOfProjectReferenceRedirect](https://www.typescriptlang.org/tsconfig/#disableSourceOfProjectReferenceRedirect) ,`\n5.  `[incremental](https://www.typescriptlang.org/tsconfig/#incremental)  and`\n6.  `[tsBuildInfoFile](https://www.typescriptlang.org/tsconfig/#tsBuildInfoFile) `\n\n##### Output Formatting\n\n1.  `[noErrorTruncation](https://www.typescriptlang.org/tsconfig/#noErrorTruncation) ,`\n2.  `[preserveWatchOutput](https://www.typescriptlang.org/tsconfig/#preserveWatchOutput)  and`\n3.  `[pretty](https://www.typescriptlang.org/tsconfig/#pretty) `\n\n##### Completeness\n\n1.  `[skipDefaultLibCheck](https://www.typescriptlang.org/tsconfig/#skipDefaultLibCheck)  and`\n2.  `[skipLibCheck](https://www.typescriptlang.org/tsconfig/#skipLibCheck) `\n\n##### Command Line\n\n##### Watch Options\n\n1.  `[assumeChangesOnlyAffectDirectDependencies](https://www.typescriptlang.org/tsconfig/#assumeChangesOnlyAffectDirectDependencies) `\n\n#### `[\"watchOptions\"](https://www.typescriptlang.org/tsconfig/#watchOptions) `\n\n##### watchOptions\n\n1.  `[watchFile](https://www.typescriptlang.org/tsconfig/#watch-watchFile) ,`\n2.  `[watchDirectory](https://www.typescriptlang.org/tsconfig/#watch-watchDirectory) ,`\n3.  `[fallbackPolling](https://www.typescriptlang.org/tsconfig/#watch-fallbackPolling) ,`\n4.  `[synchronousWatchDirectory](https://www.typescriptlang.org/tsconfig/#watch-synchronousWatchDirectory) ,`\n5.  `[excludeDirectories](https://www.typescriptlang.org/tsconfig/#watch-excludeDirectories)  and`\n6.  `[excludeFiles](https://www.typescriptlang.org/tsconfig/#watch-excludeFiles) `\n\n#### `[\"typeAcquisition\"](https://www.typescriptlang.org/tsconfig/#typeAcquisition) `\n\n##### typeAcquisition\n\n1.  `[enable](https://www.typescriptlang.org/tsconfig/#type-enable) ,`\n2.  `[include](https://www.typescriptlang.org/tsconfig/#type-include) ,`\n3.  `[exclude](https://www.typescriptlang.org/tsconfig/#type-exclude)  and`\n4.  `[disableFilenameBasedTypeAcquisition](https://www.typescriptlang.org/tsconfig/#type-disableFilenameBasedTypeAcquisition) `\n\n### [](https://www.typescriptlang.org/tsconfig/#root-fields)\nRoot Fields\n\nStarting up are the root options in the TSConfig - these options relate to how your TypeScript or JavaScript project is set up.\n\n### [#](https://www.typescriptlang.org/tsconfig/#files)\n Files - `files`\n\nSpecifies an allowlist of files to include in the program. An error occurs if any of the files can’t be found.\n\n`   {    \"[compilerOptions](https://www.typescriptlang.org/tsconfig#compilerOptions) \": {},    \"[files](https://www.typescriptlang.org/tsconfig#files) \": [      \"core.ts\",      \"sys.ts\",      \"types.ts\",      \"scanner.ts\",      \"parser.ts\",      \"utilities.ts\",      \"binder.ts\",      \"checker.ts\",      \"tsc.ts\"    ]  }   `\n\nThis is useful when you only have a small number of files and don’t need to use a glob to reference many files. If you need that then use [`include`](https://www.typescriptlang.org/tsconfig/#include)\n.\n\n*   Default:\n    \n    `false`\n    \n*   Related:\n    *   [`include`](https://www.typescriptlang.org/tsconfig/#include)\n        \n    *   [`exclude`](https://www.typescriptlang.org/tsconfig/#exclude)\n        \n*   Released:\n    \n    [1.5](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-5.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#extends)\n Extends - `extends`\n\nThe value of `extends` is a string which contains a path to another configuration file to inherit from. The path may use Node.js style resolution.\n\nThe configuration from the base file are loaded first, then overridden by those in the inheriting config file. All relative paths found in the configuration file will be resolved relative to the configuration file they originated in.\n\nIt’s worth noting that [`files`](https://www.typescriptlang.org/tsconfig/#files)\n, [`include`](https://www.typescriptlang.org/tsconfig/#include)\n, and [`exclude`](https://www.typescriptlang.org/tsconfig/#exclude)\n from the inheriting config file _overwrite_ those from the base config file, and that circularity between configuration files is not allowed.\n\nCurrently, the only top-level property that is excluded from inheritance is [`references`](https://www.typescriptlang.org/tsconfig/#references)\n.\n\n##### [](https://www.typescriptlang.org/tsconfig/#example)\nExample\n\n`configs/base.json`:\n\n`   {    \"[compilerOptions](https://www.typescriptlang.org/tsconfig#compilerOptions) \": {      \"[noImplicitAny](https://www.typescriptlang.org/tsconfig#noImplicitAny) \": true,      \"[strictNullChecks](https://www.typescriptlang.org/tsconfig#strictNullChecks) \": true    }  }   `\n\n`tsconfig.json`:\n\n`   {    \"[extends](https://www.typescriptlang.org/tsconfig#extends) \": \"./configs/base\",    \"[files](https://www.typescriptlang.org/tsconfig#files) \": [\"main.ts\", \"supplemental.ts\"]  }   `\n\n`tsconfig.nostrictnull.json`:\n\n`   {    \"[extends](https://www.typescriptlang.org/tsconfig#extends) \": \"./tsconfig\",    \"[compilerOptions](https://www.typescriptlang.org/tsconfig#compilerOptions) \": {      \"[strictNullChecks](https://www.typescriptlang.org/tsconfig#strictNullChecks) \": false    }  }   `\n\nProperties with relative paths found in the configuration file, which aren’t excluded from inheritance, will be resolved relative to the configuration file they originated in.\n\n*   Default:\n    \n    `false`\n    \n*   Released:\n    \n    [2.1](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-1.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#include)\n Include - `include`\n\nSpecifies an array of filenames or patterns to include in the program. These filenames are resolved relative to the directory containing the `tsconfig.json` file.\n\njson\n\n`   {    \"include\": [\"src/**/*\", \"tests/**/*\"]  }   `\n\nWhich would include:\n\n`   .  ├── scripts                ⨯  │   ├── lint.ts            ⨯  │   ├── update_deps.ts     ⨯  │   └── utils.ts           ⨯  ├── src                    ✓  │   ├── client             ✓  │   │    ├── index.ts      ✓  │   │    └── utils.ts      ✓  │   ├── server             ✓  │   │    └── index.ts      ✓  ├── tests                  ✓  │   ├── app.test.ts        ✓  │   ├── utils.ts           ✓  │   └── tests.d.ts         ✓  ├── package.json  ├── tsconfig.json  └── yarn.lock   `\n\n`include` and `exclude` support wildcard characters to make glob patterns:\n\n*   `*` matches zero or more characters (excluding directory separators)\n*   `?` matches any one character (excluding directory separators)\n*   `**/` matches any directory nested to any level\n\nIf the last path segment in a pattern does not contain a file extension or wildcard character, then it is treated as a directory, and files with supported extensions inside that directory are included (e.g. `.ts`, `.tsx`, and `.d.ts` by default, with `.js` and `.jsx` if [`allowJs`](https://www.typescriptlang.org/tsconfig/#allowJs)\n is set to true).\n\n*   Default:\n    \n    `[]` if [`files`](https://www.typescriptlang.org/tsconfig/#files)\n     is specified; `**/*` otherwise.\n    \n*   Related:\n    *   [`files`](https://www.typescriptlang.org/tsconfig/#files)\n        \n    *   [`exclude`](https://www.typescriptlang.org/tsconfig/#exclude)\n        \n*   Released:\n    \n    [2.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#exclude)\n Exclude - `exclude`\n\nSpecifies an array of filenames or patterns that should be skipped when resolving [`include`](https://www.typescriptlang.org/tsconfig/#include)\n.\n\n**Important**: `exclude` _only_ changes which files are included as a result of the [`include`](https://www.typescriptlang.org/tsconfig/#include)\n setting. A file specified by `exclude` can still become part of your codebase due to an `import` statement in your code, a `types` inclusion, a `/// <reference` directive, or being specified in the [`files`](https://www.typescriptlang.org/tsconfig/#files)\n list.\n\nIt is not a mechanism that **prevents** a file from being included in the codebase - it simply changes what the [`include`](https://www.typescriptlang.org/tsconfig/#include)\n setting finds.\n\n*   Default:\n    \n    node\\_modules bower\\_components jspm\\_packages [`outDir`](https://www.typescriptlang.org/tsconfig/#outDir)\n    \n*   Related:\n    *   [`include`](https://www.typescriptlang.org/tsconfig/#include)\n        \n    *   [`files`](https://www.typescriptlang.org/tsconfig/#files)\n        \n*   Released:\n    \n    [2.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#references)\n References - `references`\n\nProject references are a way to structure your TypeScript programs into smaller pieces. Using Project References can greatly improve build and editor interaction times, enforce logical separation between components, and organize your code in new and improved ways.\n\nYou can read more about how references works in the [Project References](https://www.typescriptlang.org/docs/handbook/project-references.html)\n section of the handbook\n\n*   Default:\n    \n    `false`\n    \n*   Released:\n    \n    [3.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html)\n    \n\n### [](https://www.typescriptlang.org/tsconfig/#compiler-options)\nCompiler Options\n\nThese options make up the bulk of TypeScript’s configuration and it covers how the language should work.\n\n[#](https://www.typescriptlang.org/tsconfig/#Type_Checking_6248)\nType Checking\n------------------------------------------------------------------------------\n\n### [#](https://www.typescriptlang.org/tsconfig/#allowUnreachableCode)\n Allow Unreachable Code - `allowUnreachableCode`\n\nWhen:\n\n*   `undefined` (default) provide suggestions as warnings to editors\n*   `true` unreachable code is ignored\n*   `false` raises compiler errors about unreachable code\n\nThese warnings are only about code which is provably unreachable due to the use of JavaScript syntax, for example:\n\nts\n\n`   function fn(n: number) {    if (n > 5) {      return true;    } else {      return false;    }    return true;  }   `\n\nWith `\"allowUnreachableCode\": false`:\n\nts\n\n`   function fn(n: number) {    if (n > 5) {      return true;    } else {      return false;    }    return true;  Unreachable code detected.7027Unreachable code detected.  }   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYBMaBQIIBDAG2LgHcBVAO2kkIGMALQgI2MgGE4ATSVAGYlEkXAICu1BgBcAlnGqgB1ABTVU1cQFtWMAJSgA3rlChZA0GtAA+UAFYDx06brTx0RdOjjIAbhOgAL6gkMQiRgEukG4eSsJ+AYEBru6e3gmBQA)\n\nThis does not affect errors on the basis of code which _appears_ to be unreachable due to type analysis.\n\n*   Released:\n    \n    [1.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-8.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#allowUnusedLabels)\n Allow Unused Labels - `allowUnusedLabels`\n\nWhen:\n\n*   `undefined` (default) provide suggestions as warnings to editors\n*   `true` unused labels are ignored\n*   `false` raises compiler errors about unused labels\n\nLabels are very rare in JavaScript and typically indicate an attempt to write an object literal:\n\nts\n\n`   function verifyAge(age: number) {    // Forgot 'return' statement    if (age > 18) {      verified: true;  Unused label.7028Unused label.    }  }   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYBMAOAUCBAIYA2JcA7gKoB2AropACYAyRARpCSqAGamM8vOjQDGAFwCWcGqABuMSbwCeAQQDmkABRFNqegFtO0AJSgA3nlChCAMQTq440AHJokcXWg0XoROKJxSANIGnErUCVQHU1QAD5QAEYcM0trawVoJUlmVHFoOkgAbgiAXzxSoA)\n\n*   Released:\n    \n    [1.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-8.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#alwaysStrict)\n Always Strict - `alwaysStrict`\n\nEnsures that your files are parsed in the ECMAScript strict mode, and emit “use strict” for each source file.\n\n[ECMAScript strict](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Strict_mode)\n mode was introduced in ES5 and provides behavior tweaks to the runtime of the JavaScript engine to improve performance, and makes a set of errors throw instead of silently ignoring them.\n\n*   Recommended\n*   Default:\n    \n    `true` if [`strict`](https://www.typescriptlang.org/tsconfig/#strict)\n    ; `false` otherwise.\n    \n*   Related:\n    *   [`strict`](https://www.typescriptlang.org/tsconfig/#strict)\n        \n*   Released:\n    \n    [2.1](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-1.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#exactOptionalPropertyTypes)\n Exact Optional Property Types - `exactOptionalPropertyTypes`\n\nWith exactOptionalPropertyTypes enabled, TypeScript applies stricter rules around how it handles properties on `type` or `interfaces` which have a `?` prefix.\n\nFor example, this interface declares that there is a property which can be one of two strings: ‘dark’ or ‘light’ or it should not be in the object.\n\nts\n\n`   interface UserDefaults {    // The absence of a value represents 'system'    colorThemeOverride?: \"dark\" | \"light\";  }   `\n\nWithout this flag enabled, there are three values which you can set `colorThemeOverride` to be: “dark”, “light” and `undefined`.\n\nSetting the value to `undefined` will allow most JavaScript runtime checks for the existence to fail, which is effectively falsy. However, this isn’t quite accurate; `colorThemeOverride: undefined` is not the same as `colorThemeOverride` not being defined. For example, `\"colorThemeOverride\" in settings` would have different behavior with `undefined` as the key compared to not being defined.\n\n`exactOptionalPropertyTypes` makes TypeScript truly enforce the definition provided as an optional property:\n\nts\n\n`  const settings = getUserSettings();  settings.colorThemeOverride = \"dark\";  settings.colorThemeOverride = \"light\";  // But not:  settings.colorThemeOverride = undefined;  Type 'undefined' is not assignable to type '\"dark\" | \"light\"' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.2412Type 'undefined' is not assignable to type '\"dark\" | \"light\"' with 'exactOptionalPropertyTypes: true'. Consider adding 'undefined' to the type of the target.`[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMA8EMGMAuB5ADoglgewHawDYAKATlqpMYgJ4AqV5AzgFAgQWnEMBcoATAMy9efACwBGXkww5EFAGYJIoAKoMKAEUgKArvkQNQAbyahQ8LPizEaAC0gBbSMgBu7DABNIAfh4Aid7DEANa+oAA+oL74GADmNoi+ANxMAL5MnvD4gUpy2jhI2DigMZCIqhQAyqWYODEMABQAlDzlxJo6egzJrAC0ffDaiH09TOY4DIigaog1daAAvMWlrVUz0nVNydOzDAB05pbWdo4ubp4LkQHBSUzb63sHVrYOTq7ExB5Ki1Gx8TcsYAAQoNQDgsIguLdqvd9hYnsdXmcvqA8p45NJIO5EkA)\n\n*   Recommended\n*   Released:\n    \n    [4.4](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-4.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#noFallthroughCasesInSwitch)\n No Fallthrough Cases In Switch - `noFallthroughCasesInSwitch`\n\nReport errors for fallthrough cases in switch statements. Ensures that any non-empty case inside a switch statement includes either `break`, `return`, or `throw`. This means you won’t accidentally ship a case fallthrough bug.\n\nts\n\n`   const a: number = 6;  switch (a) {    case 0:  Fallthrough case in switch.7029Fallthrough case in switch.      console.log(\"even\");    case 1:      console.log(\"odd\");      break;  }   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEDsHsDEEMA2iAuALATtArgczQMLwDOApsQJKQDKA7gJYoDGaAUCBKRlhsQFygA7AAYATAE5WTaJGIpQ8AZGwBbAEZdQAXlAA2ANytWxBszSgAFPACUoAN6tQoJiVKhhfR0+czi0RKQAdIjQuBYARKQAbqSQ4daGTi5koACMnt4+sv5BIWHh0AAmhfGJ3moYpPAA1oYAvkA)\n\n*   Released:\n    \n    [1.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-8.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#noImplicitAny)\n No Implicit Any - `noImplicitAny`\n\nIn some cases where no type annotations are present, TypeScript will fall back to a type of `any` for a variable when it cannot infer the type.\n\nThis can cause some errors to be missed, for example:\n\nts\n\n`   function fn(s) {    // No error?    console.log(s.subtr(3));  }  fn(42);   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoAZgIbIDOApgFAkCuk6Wq0kpkAFJQJSgBvWqFAhQAOWihqAJxnQZAfmGh07StGTUAdMmgBzHtsoMARlhlcAzL14BuWgF963ACwAme0A)\n\nTurning on `noImplicitAny` however TypeScript will issue an error whenever it would have inferred `any`:\n\nts\n\n`   function fn(s) {  Parameter 's' implicitly has an 'any' type.7006Parameter 's' implicitly has an 'any' type.    console.log(s.subtr(3));  }   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYMDYBQAzAVwDsBjAFwEs5jR9iAKRASlAG9dRRSbE4AbSADp+cAOZMhiQgCNy0BgGZmzANy4AvkA)\n\n*   Recommended\n*   Default:\n    \n    `true` if [`strict`](https://www.typescriptlang.org/tsconfig/#strict)\n    ; `false` otherwise.\n    \n*   Related:\n    *   [`strict`](https://www.typescriptlang.org/tsconfig/#strict)\n        \n*   Released:\n    \n    [1.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#noImplicitOverride)\n No Implicit Override - `noImplicitOverride`\n\nWhen working with classes which use inheritance, it’s possible for a sub-class to get “out of sync” with the functions it overloads when they are renamed in the base class.\n\nFor example, imagine you are modeling a music album syncing system:\n\nts\n\n`   class Album {    download() {      // Default behavior    }  }  class SharedAlbum extends Album {    download() {      // Override to get info from many sources    }  }   `[Try](https://www.typescriptlang.org/play/#code/MYGwhgzhAECCICMCuBbaBvAUNaATA9gO4B2I+YuAFAJQbY7QD0j0AIgKYBmYSIALtATsAFmABuAS3wAnegF9MCzKEgwAyqOntc8ZGnYAPPu2K4Yu1HRwESZCjSsNm0APJj206RNztoffNAA5uwCEsScAZzS+GgoYMQAntAQ+EjSwOwQ8opAA)\n\nThen when you add support for machine-learning generated playlists, you refactor the `Album` class to have a ‘setup’ function instead:\n\nts\n\n`   class Album {    setup() {      // Default behavior    }  }  class MLAlbum extends Album {    setup() {      // Override to get info from algorithm    }  }  class SharedAlbum extends Album {    download() {      // Override to get info from many sources    }  }   `[Try](https://www.typescriptlang.org/play/#code/MYGwhgzhAECCICMCuBbaBvAUNaECmALkgA4AUAlBtjtAPS3QAieAZmEiAdAngBZgA3AJYB7AE7UAvpmmZQkGAFkAMvGRo8ADwJ4AdgBMYa1FRz4iZSlhp0GAeQF4xYofrzQCI6AHNC0IbosXixiImhgIN7iQgS8KFIymHLgUNAAyvxiePrGGtp6hnCIJtbQ+iIA7rogImD6FKY09NAOTi5uHl6+XAFB0CFh0ChgugCeuCJIYsB4EAmSQA)\n\nIn this case, TypeScript has provided no warning that `download` on `SharedAlbum` _expected_ to override a function in the base class.\n\nUsing `noImplicitOverride` you can ensure that the sub-classes never go out of sync, by ensuring that functions which override include the keyword `override`.\n\nThe following example has `noImplicitOverride` enabled, and you can see the error received when `override` is missing:\n\nts\n\n`   class Album {    setup() {}  }  class MLAlbum extends Album {    override setup() {}  }  class SharedAlbum extends Album {    setup() {}  This member must have an 'override' modifier because it overrides a member in the base class 'Album'.4114This member must have an 'override' modifier because it overrides a member in the base class 'Album'.  }   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwPIDcBTAJyNQBMCAoECYo6IgZwC5QAWARg7cvWQENGjUAEFkAIwCu8UAG9KoUIwJZJiABQBKOQF9Ke3gKGgAsgBkxUmQQAeWApDLDL0uQtDRCJcgSUq1Wrr6lIaCwgDKABb8RARkLtZ2Dk6iEq7yisqqGtqyejpAA)\n\n*   Released:\n    \n    [4.3](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-3.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#noImplicitReturns)\n No Implicit Returns - `noImplicitReturns`\n\nWhen enabled, TypeScript will check all code paths in a function to ensure they return a value.\n\nts\n\n`   function lookupHeadphonesManufacturer(color: \"blue\" | \"black\"): string {  Function lacks ending return statement and return type does not include 'undefined'.2366Function lacks ending return statement and return type does not include 'undefined'.    if (color === \"blue\") {      return \"beats\";    } else {      (\"bose\");    }  }   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsX0bWgFABmArgHYDGALgJZzmgA2ccA1qQA4ASkAhgBNOACwaREAWT7lSxPjVLQYACkpwW0VACIARk1KQtoAD6hdTeWy0BKVImrRa5AOagA3oVChaxUKvUIoAC8IWZ6Bjbunl6gStSKjLr81IhaANzRAL6gkEyIkFExfrpw+TYZXpmEmUA)\n\n*   Released:\n    \n    [1.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-8.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#noImplicitThis)\n No Implicit This - `noImplicitThis`\n\nRaise error on ‘this’ expressions with an implied ‘any’ type.\n\nFor example, the class below returns a function which tries to access `this.width` and `this.height` – but the context for `this` inside the function inside `getAreaFunction` is not the instance of the Rectangle.\n\nts\n\n`   class Rectangle {    width: number;    height: number;    constructor(width: number, height: number) {      this.width = width;      this.height = height;    }    getAreaFunction() {      return function () {        return this.width * this.height;  'this' implicitly has type 'any' because it does not have a type annotation.   'this' implicitly has type 'any' because it does not have a type annotation.2683   2683'this' implicitly has type 'any' because it does not have a type annotation.   'this' implicitly has type 'any' because it does not have a type annotation.      };    }  }   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwDYAcBmAUAMYA2AhooqAEqQEAuJAdgOZGSgDeeooA7gJYATWgAtUDAK4BbAEYwA3F1DDIfJsNpips6AsUE4DRLWji6CABT8ho0BJkwANEpVqNtrTACUHRdxF9EADorEVAAXl5BEQVuP2EAwOVVdXDnZNoY0ABfPEUmSFoAQWhIEgAxcQY6PgNzb05Y0BLacWgGUAAzSuqDUDqfRu5m1vb-IJDhUAAqUDHEl3VM7izMnKygA)\n\n*   Recommended\n*   Default:\n    \n    `true` if [`strict`](https://www.typescriptlang.org/tsconfig/#strict)\n    ; `false` otherwise.\n    \n*   Related:\n    *   [`strict`](https://www.typescriptlang.org/tsconfig/#strict)\n        \n*   Released:\n    \n    [2.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#noPropertyAccessFromIndexSignature)\n No Property Access From Index Signature - `noPropertyAccessFromIndexSignature`\n\nThis setting ensures consistency between accessing a field via the “dot” (`obj.key`) syntax, and “indexed” (`obj[\"key\"]`) and the way which the property is declared in the type.\n\nWithout this flag, TypeScript will allow you to use the dot syntax to access fields which are not defined:\n\nts\n\n``   interface GameSettings {    // Known up-front properties    speed: \"fast\" | \"medium\" | \"slow\";    quality: \"high\" | \"low\";    // Assume anything unknown to the interface    // is a string.    [key: string]: string;  }  const settings = getSettings();  settings.speed;              (property) GameSettings.speed: \"fast\" | \"medium\" | \"slow\"  settings.quality;               (property) GameSettings.quality: \"high\" | \"low\"  // Unknown key accessors are allowed on  // this object, and are `string`  settings.username;                (index) GameSettings[string]: string   ``[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygCwEYsCgAmkBjAGwENpJQAzAVwDsCAXASzltAHNIGBlL529ogAUASlQBxEgFtIvBv0EBubCFABaDQWoMNa7E1oMYlEgQqSZchYlABvbKFCqA0rTgB3NtQAOayvENQb3hvGGZIRAdQRFDIXFQAIhNEBgTQAB9QBJlcJmopNMyExCIPBOVHAEdqEiImBgBPRIALJnZmwqzS93LsKNUAQUREfIoSWgaGVoFQOgBrN09QBjhl5ooDI2gTM36wJhsSaIZoA3YAOiiAbTnIJuPTgQBdVBTH9mUAXz6CVhTovhnGwAXg4XCsQNEykQgIEiHOMUgcWUqkcaNAAD0APzYGHyIHnaq1eoNFFgdGObF9VQAVVoCw8bFuDVApjMwwQh3IrKI3TioFYKjAUwOAoARgArQgMAA0rNouFZ3IABm8zsrcbDBOdqDDoLRpJAyRTKVigA)\n\nTurning the flag on will raise an error because the unknown field uses dot syntax instead of indexed syntax.\n\nts\n\n`   const settings = getSettings();  settings.speed;  settings.quality;  // This would need to be settings[\"username\"];  settings.username;  Property 'username' comes from an index signature, so it must be accessed with ['username'].4111Property 'username' comes from an index signature, so it must be accessed with ['username'].                (index) GameSettings[string]: string   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygCwEYsCgQQHZwAK8ADjAC4CeAggMZ2SKIBi8AtgJL4AmkAHgGUAlgHN8AQwoBXaJGx86AGwlzQAM2n46FYXHyhRkCoOO78oxAAoAlKgDiE9pFMVzlgNzZh+CjHUSjKCOzq7uiKAA3tigoIjkkDyoAEQBiBTJoAA+oMnOPMLS7Jk5yYhKcADuyV6xAI7SEkrC1CkAFmJtJbkV1bWgANoA1pBUqOnQPqIAuuMUkxZeAL64YAC0G3TSFBtr2HT66XFmUxEAvIbGYae2XognFogAdPGQiXcPlk8NTS1UXqtQAAVDoRSpwaRKHigfBvaEUOCgABGkGOblOA2S0nu0EkzmS0w+6MeT2xMDxkC8eFiNNAAD0APxAA)\n\nThe goal of this flag is to signal intent in your calling syntax about how certain you are this property exists.\n\n*   Released:\n    \n    [4.2](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-2.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#noUncheckedIndexedAccess)\n No Unchecked Indexed Access - `noUncheckedIndexedAccess`\n\nTypeScript has a way to describe objects which have unknown keys but known values on an object, via index signatures.\n\nts\n\n`   interface EnvironmentVars {    NAME: string;    OS: string;    // Unknown properties are covered by this index signature.    [propName: string]: string;  }  declare const env: EnvironmentVars;  // Declared as existing  const sysName = env.NAME;  const os = env.OS;          const os: string  // Not declared, but because of the index  // signature, then it is considered a string  const nodeEnv = env.NODE_ENV;            const nodeEnv: string   `[Try](https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKIgG7CgexAWwnADU4oBnZAbwChlkA5AQQFlUAuZcsKUAcwDcdZAHkAyp268QgmsID085AFUQAaxA4A7iGQAHXHuhhgESmRQIcGaBAAmyAEYBPZGAAWwSqDsQAHlzAfCBwYACuUBAAdMIA2gY4egxwhJI8-AC6adKyAL5yvggANhbIViDcyEQYnOhYuAREYKQUQjSKyAAiEMUWDnCU-l4mMjTlleTO5MmEyAC8VZhRzGxC42DIOJQL1VHiQh30yAB6APxyHQw4G4UlkXYANE5hG449cGHkKDgwbu4oPn87SU5CCIXCkSeHiIyGAGy8ZTwoN892QcC46VG62Qml8dXmiwwyxEnVQAH1UAxiAclEczkA)\n\nTurning on `noUncheckedIndexedAccess` will add `undefined` to any un-declared field in the type.\n\nts\n\n`   declare const env: EnvironmentVars;  // Declared as existing  const sysName = env.NAME;  const os = env.OS;          const os: string  // Not declared, but because of the index  // signature, then it is considered a string  const nodeEnv = env.NODE_ENV;            const nodeEnv: string | undefined   `[Try](https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgKIgG7CgexAWwnADU4oBnZAbwChlkA5AQQFlUAuZcsKUAcwDcdZAHkAyp268QgmsID085AFUQAaxA4A7iGQAHXHuhhgESmRQIcGaBAAmyAEYBPZGAAWwSqDsQAHlzAfCBwYACuUBAAdMIA2gY4egxwhJI8-AC6adKyAL40isgAApqqCO4QCGr2AJIgvn72TAhI5OQFSgC03QhhYN2dNL4IADYWyFYg3MhEGJzoWLgERGCkFEIdyAAilWORDnCU-l4mMjST0+TO5MmEyAC8M5hRzGxCF2DIOJSPs1HiQkK9GQAD0APxyQoMHCfYZ7ewAGicfSclTgYXIKBwMDcFWQPn8m3IQRC4UiSI8RHxny8EzwxN8+2QcC46TOH2Qml8CweTwwLxEW1QAH1UAxiIClMDwUA)\n\n*   Released:\n    \n    [4.1](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#noUnusedLocals)\n No Unused Locals - `noUnusedLocals`\n\nReport errors on unused local variables.\n\nts\n\n`   const createKeyboard = (modelID: number) => {    const defaultModelID = 23;  'defaultModelID' is declared but its value is never read.6133'defaultModelID' is declared but its value is never read.    return { type: \"keyboard\", modelID };  };   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEDsHsFVIK4GcCmATAMtAxgQwDZIBQIEKATudOUgFygBsAjAMwtHbSRIAuo25FLh4oA0igCeAI2i5yaUAF5QACgC20NCnwBJACL1EaqRQCUSgHygA3kVD8uvUFoBmuBPh4BZTdv1LQACYWAG47UEEeBHJIG1AeCQAHFHoAIgBrSRk5NFSAGlANLV09UABfMIqgA)\n\n*   Released:\n    \n    [2.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#noUnusedParameters)\n No Unused Parameters - `noUnusedParameters`\n\nReport errors on unused parameters in functions.\n\nts\n\n`   const createDefaultKeyboard = (modelID: number) => {  'modelID' is declared but its value is never read.6133'modelID' is declared but its value is never read.    const defaultModelID = 23;    return { type: \"keyboard\", modelID: defaultModelID };  };   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEDsHsFVIK4GcCmATACgQwE5YLYoAuKOSAUCBKTtGQFygBsAjAMxvkDG0kSRoLjhRYSAERQAzLAgA2RANIoAngCNouNKAC8oABT5oaFLICSYxonyrSASh0A+UAG9yoQb36hj0uUQCyRibmOqAATGwA3G6gwkQIOJAuoETKAA4ojABEANYq6ppZADSghsZmFt5SMvKB5SEAvtFNQA)\n\n*   Released:\n    \n    [2.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#strict)\n Strict - `strict`\n\nThe `strict` flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness. Turning this on is equivalent to enabling all of the _strict mode family_ options, which are outlined below. You can then turn off individual strict mode family checks as needed.\n\nFuture versions of TypeScript may introduce additional stricter checking under this flag, so upgrades of TypeScript might result in new type errors in your program. When appropriate and possible, a corresponding flag will be added to disable that behavior.\n\n*   Recommended\n*   Related:\n    *   [`alwaysStrict`](https://www.typescriptlang.org/tsconfig/#alwaysStrict)\n        \n    *   [`strictNullChecks`](https://www.typescriptlang.org/tsconfig/#strictNullChecks)\n        \n    *   [`strictBindCallApply`](https://www.typescriptlang.org/tsconfig/#strictBindCallApply)\n        \n    *   [`strictBuiltinIteratorReturn`](https://www.typescriptlang.org/tsconfig/#strictBuiltinIteratorReturn)\n        \n    *   [`strictFunctionTypes`](https://www.typescriptlang.org/tsconfig/#strictFunctionTypes)\n        \n    *   [`strictPropertyInitialization`](https://www.typescriptlang.org/tsconfig/#strictPropertyInitialization)\n        \n    *   [`noImplicitAny`](https://www.typescriptlang.org/tsconfig/#noImplicitAny)\n        \n    *   [`noImplicitThis`](https://www.typescriptlang.org/tsconfig/#noImplicitThis)\n        \n    *   [`useUnknownInCatchVariables`](https://www.typescriptlang.org/tsconfig/#useUnknownInCatchVariables)\n        \n*   Released:\n    \n    [2.3](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-3.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#strictBindCallApply)\n Strict Bind Call Apply - `strictBindCallApply`\n\nWhen set, TypeScript will check that the built-in methods of functions `call`, `bind`, and `apply` are invoked with correct argument for the underlying function:\n\nts\n\n`  // With strictBindCallApply on  function fn(x: string) {    return parseInt(x);  }  const n1 = fn.call(undefined, \"10\");  const n2 = fn.call(undefined, false);  Argument of type 'boolean' is not assignable to parameter of type 'string'.2345Argument of type 'boolean' is not assignable to parameter of type 'string'.`[Try](https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BC8B2ATAwgQwDb4CCADifgJ4BcocArgKYBQIEDssA9rJDQEwBmACwBWJizAB1eNAAWoGAmRoseQqXIVQndEwBmddMng7Qe9AAoAHjUUYA5gEpQAbyahQsBtDqx0oElweBgBJdGhrRwBuJgBfcUQdGFB0AEZQAF4zdAA6RAJ8C0NMBj0MBkwAGlAAIlSABhrohKToFL5M7LyCoqxS8qqzAkgGaKA)\n\nOtherwise, these functions accept any arguments and will return `any`:\n\nts\n\n`   // With strictBindCallApply off  function fn(x: string) {    return parseInt(x);  }  // Note: No error; return type is 'any'  const n = fn.call(undefined, false);   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BC8B2ATAwgQwDb4CCADifgJ4BcoAZgZAKYBQzIoA6vNABagwJkaLHkKlyFUAHtatZrQCu6ZPCno66ABQAPGgIwBzAJSgA3s1ChYjaAtjqSuWEwCS6aDqMBuZgF9W7AByUtCMNMGgjLCwUrBeVjZ26tAUJIyg8JCgAOS46BTZzIhqMKDqALwaAHSIBPiaSpiMtBiMmAA0dAyM3kA)\n\n*   Recommended\n*   Default:\n    \n    `true` if [`strict`](https://www.typescriptlang.org/tsconfig/#strict)\n    ; `false` otherwise.\n    \n*   Related:\n    *   [`strict`](https://www.typescriptlang.org/tsconfig/#strict)\n        \n*   Released:\n    \n    [3.2](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-2.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#strictBuiltinIteratorReturn)\n strictBuiltinIteratorReturn - `strictBuiltinIteratorReturn`\n\nBuilt-in iterators are instantiated with a \\`TReturn\\` type of undefined instead of \\`any\\`.\n\n*   Recommended\n*   Default:\n    \n    `true` if [`strict`](https://www.typescriptlang.org/tsconfig/#strict)\n    ; `false` otherwise.\n    \n*   Related:\n    *   [`strict`](https://www.typescriptlang.org/tsconfig/#strict)\n        \n*   Released:\n    \n    [5.6](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-6.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#strictFunctionTypes)\n Strict Function Types - `strictFunctionTypes`\n\nWhen enabled, this flag causes functions parameters to be checked more correctly.\n\nHere’s a basic example with `strictFunctionTypes` off:\n\nts\n\n`   function fn(x: string) {    console.log(\"Hello, \" + x.toLowerCase());  }  type StringOrNumberFunc = (ns: string | number) => void;  // Unsafe assignment  let func: StringOrNumberFunc = fn;  // Unsafe call - will crash  func(10);   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0BiBXAds+B7DAVATwAcBTSALlADMBDAG0lIChrNs8aMAKADypgIMAcwCUoAN7NQoRHkg56pAHT0cw7gCIAEqXpqANKE2gA1KF7LoOADI4A7qVgBhWk26jRAbmYBfZszQJKSgAMpw8CIA8rAAcmgAtgBGTuhYoAC8oNwYlKCCkcKgAD6gGIkpsOIZAHygAG448AAmPswgoACqubTUIW6Q8MIYCaQY0MxK0DTsVOFCwjHxyansmVw+Hd2QvSGIDPSgALSg9vD6srBuABas7NwAjAAM3kA)\n\nWith `strictFunctionTypes` _on_, the error is correctly detected:\n\nts\n\n`  function fn(x: string) {    console.log(\"Hello, \" + x.toLowerCase());  }  type StringOrNumberFunc = (ns: string | number) => void;  // Unsafe assignment is prevented  let func: StringOrNumberFunc = fn;  Type '(x: string) => void' is not assignable to type 'StringOrNumberFunc'.   Types of parameters 'x' and 'ns' are incompatible.     Type 'string | number' is not assignable to type 'string'.       Type 'number' is not assignable to type 'string'.2322Type '(x: string) => void' is not assignable to type 'StringOrNumberFunc'.   Types of parameters 'x' and 'ns' are incompatible.     Type 'string | number' is not assignable to type 'string'.       Type 'number' is not assignable to type 'string'.`[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFADMBXAOwGMAXASziNDyIAoAPVRM6CogcwEpQBvHKFAlqiOABtIAOnFxO9AEQAJSONkAaUAtABqUIylk4AGTgB3GAGEAhokj1u3ANw4AvjhxkAngAdIoAGU2Dk4AeWgAOQIAWwAjGAAxYhJQAF5QeiIUUFZ2LlAAH1AiGPjoXlSAPlAANzgKABMXHBBQAFUs6zx-W0QKTiJoyCIyUApEUB9oSBrhskgGnElRwlJUILywyNLE5LTaIicgA)\n\nDuring development of this feature, we discovered a large number of inherently unsafe class hierarchies, including some in the DOM. Because of this, the setting only applies to functions written in _function_ syntax, not to those in _method_ syntax:\n\nts\n\n`   type Methodish = {    func(x: string | number): void;  };  function fn(x: string) {    console.log(\"Hello, \" + x.toLowerCase());  }  // Ultimately an unsafe assignment, but not detected  const m: Methodish = {    func: fn,  };  m.func(10);   `[Try](https://www.typescriptlang.org/play/#code/C4TwDgpgBAshwAsD2ATAlgZwVAvFA3gFBRQBmArgHYDGAFAB4BcUGwATmpQOZQA+UlcgFsARhDYBKZgDckaFAG5CAXyWEKNYGiSUylBs1YduEgsSjUdGJABsIAOhtIutAEQAJCDacAaKK6gAaih6e2AkABkkAHdxAGEAQwwIWgkJJWVCQgB6bKgAVRstIQTgLxAoBN0qDATSaCSMNC5KIQhKYD8RcmABJF6UeAhqMpRCS0pWKCFmOERUTGw8IhINamZSSh8VJSF7NdoARgAGdKA)\n\n*   Recommended\n*   Default:\n    \n    `true` if [`strict`](https://www.typescriptlang.org/tsconfig/#strict)\n    ; `false` otherwise.\n    \n*   Related:\n    *   [`strict`](https://www.typescriptlang.org/tsconfig/#strict)\n        \n*   Released:\n    \n    [2.6](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-6.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#strictNullChecks)\n Strict Null Checks - `strictNullChecks`\n\nWhen `strictNullChecks` is `false`, `null` and `undefined` are effectively ignored by the language. This can lead to unexpected errors at runtime.\n\nWhen `strictNullChecks` is `true`, `null` and `undefined` have their own distinct types and you’ll get a type error if you try to use them where a concrete value is expected.\n\nFor example with this TypeScript code, `users.find` has no guarantee that it will actually find a user, but you can write code as though it will:\n\nts\n\n`   declare const loggedInUsername: string;  const users = [    { name: \"Oby\", age: 12 },    { name: \"Heera\", age: 32 },  ];  const loggedInUser = users.find((u) => u.name === loggedInUsername);  console.log(loggedInUser.age);   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsDG0ByBXANhgwgCwKaIDWkAXKAGYCGGk+AUCBNFbAOb7TkCiAygEwAGAIwBWegBNCGVvlCIA9gDsYoDArYcJASSUBVOrCVUAtvnIwEStgG569RSuig0hyKAC8oANr1QoAG9QYzNyACIAeQAjAE8wgBpQKg5yYX5QAF94v0Dg03NQMIAJfHxYKgSklNAAZnSs+gBdOwdlVXVNfB19Q08XNwA6CnglCQAKMbQASk8APhcBkLkPFbUNLV0DMqWpu0dIBQx8AY6xjo2esoHk-F2gA)\n\nSetting `strictNullChecks` to `true` will raise an error that you have not made a guarantee that the `loggedInUser` exists before trying to use it.\n\nts\n\n`  declare const loggedInUsername: string;  const users = [    { name: \"Oby\", age: 12 },    { name: \"Heera\", age: 32 },  ];  const loggedInUser = users.find((u) => u.name === loggedInUsername);  console.log(loggedInUser.age);  'loggedInUser' is possibly 'undefined'.18048'loggedInUser' is possibly 'undefined'.`[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYME50FYM1QBGADgAYAWUgKBAgBcBDaAc0gdQFEBlNc-nTDhEDaAEsAxgwByAVwA2CgMIALSJIDWiGgBMNClpFCS4AO1GgFcVu10BJMwFVEMM0wC2kVKIlnWANw0NKYWDKByrkigALygANo0oKAA3qDuXqgARADyAEYAnlkANKBM7KjERAC+xUmp6Z7eoFkAEpAwTCVlFaCEoLU0ALpBIeaW1raQDs5RsRFRiAB0AGbiZroAFJtyAJSxAHwRSxnGMedWNnaOLm5Nu0GhiHAKkEuTm5PXszBL5ZAPIA)\n\nThe second example failed because the array’s `find` function looks a bit like this simplification:\n\nts\n\n`   // When strictNullChecks: true  type Array = {    find(predicate: (value: any, index: number) => boolean): S | undefined;  };  // When strictNullChecks: false the undefined is removed from the type system,  // allowing you to write code which assumes it always found a result  type Array = {    find(predicate: (value: any, index: number) => boolean): S;  };   `\n\n*   Recommended\n*   Default:\n    \n    `true` if [`strict`](https://www.typescriptlang.org/tsconfig/#strict)\n    ; `false` otherwise.\n    \n*   Related:\n    *   [`strict`](https://www.typescriptlang.org/tsconfig/#strict)\n        \n*   Released:\n    \n    [2.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#strictPropertyInitialization)\n Strict Property Initialization - `strictPropertyInitialization`\n\nWhen set to true, TypeScript will raise an error when a class property was declared but not set in the constructor.\n\nts\n\n`   class UserAccount {    name: string;    accountType = \"user\";    email: string;  Property 'email' has no initializer and is not definitely assigned in the constructor.2564Property 'email' has no initializer and is not definitely assigned in the constructor.    address: string | undefined;    constructor(name: string) {      this.name = name;      // Note that this.email is not set    }  }   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwFYBsAWAUAMYA2AhooqAKqIwCCBBcArgHYAuoA3nqKCyQFtIqRG2gBLFgHMA3D1AkGzdgBUAngAdIoALygARExrR9c+ZAElxREWMmz5JACZPokcrYnTQAH1CsnSAAzSUgnM15GFlFoJgI2BAAKfiFPewBKLnleNgALcUQAOhTtPRK5Xl4QUAA5ODZtPJIOPILCiysiUAK+etAaNnkAXzwhoA)\n\nIn the above case:\n\n*   `this.name` is set specifically.\n*   `this.accountType` is set by default.\n*   `this.email` is not set and raises an error.\n*   `this.address` is declared as potentially `undefined` which means it does not have to be set.\n\n*   Recommended\n*   Default:\n    \n    `true` if [`strict`](https://www.typescriptlang.org/tsconfig/#strict)\n    ; `false` otherwise.\n    \n*   Related:\n    *   [`strict`](https://www.typescriptlang.org/tsconfig/#strict)\n        \n*   Released:\n    \n    [2.7](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#useUnknownInCatchVariables)\n Use Unknown In Catch Variables - `useUnknownInCatchVariables`\n\nIn TypeScript 4.0, support was added to allow changing the type of the variable in a catch clause from `any` to `unknown`. Allowing for code like:\n\nts\n\n`   try {    // ...  } catch (err: unknown) {    // We have to verify err is an    // error before using it as one.    if (err instanceof Error) {      console.log(err.message);    }  }   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEFcGcFMFUB2BrRB7A7ogkogwgIYAuAxgBYBqBATgJYEBGANrNAFBHUCeoA3m6FAhQAOjFsAvqBLFyoABSxq1AFyhIKdFgCUfAULAB1WKDIEAbiaJpQlugDMeS6qFrRQBRPuHO0LhrD2fiYwtIgA5q5EHu5oiLAi+rT2Cs6uiNBEniSwaCkAosp+uvyCgiRx0GgsIkxo4YrKIgC2rNAE4bDaANz6EpJAA)\n\nThis pattern ensures that error handling code becomes more comprehensive because you cannot guarantee that the object being thrown _is_ a Error subclass ahead of time. With the flag `useUnknownInCatchVariables` enabled, then you do not need the additional syntax (`: unknown`) nor a linter rule to try enforce this behavior.\n\n*   Recommended\n*   Default:\n    \n    `true` if [`strict`](https://www.typescriptlang.org/tsconfig/#strict)\n    ; `false` otherwise.\n    \n*   Related:\n    *   [`strict`](https://www.typescriptlang.org/tsconfig/#strict)\n        \n*   Released:\n    \n    [4.4](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-4.html)\n    \n\n[#](https://www.typescriptlang.org/tsconfig/#Modules_6244)\nModules\n------------------------------------------------------------------\n\n### [#](https://www.typescriptlang.org/tsconfig/#allowArbitraryExtensions)\n Allow Arbitrary Extensions - `allowArbitraryExtensions`\n\nIn TypeScript 5.0, when an import path ends in an extension that isn’t a known JavaScript or TypeScript file extension, the compiler will look for a declaration file for that path in the form of `{file basename}.d.{extension}.ts`. For example, if you are using a CSS loader in a bundler project, you might want to write (or generate) declaration files for those stylesheets:\n\ncss\n\n`   /* app.css */  .cookie-banner {    display: none;  }   `\n\nts\n\n`   // app.d.css.ts  declare const css: {    cookieBanner: string;  };  export default css;   `\n\nts\n\n`   // App.tsx  import styles from \"./app.css\";  styles.cookieBanner; // string   `\n\nBy default, this import will raise an error to let you know that TypeScript doesn’t understand this file type and your runtime might not support importing it. But if you’ve configured your runtime or bundler to handle it, you can suppress the error with the new `--allowArbitraryExtensions` compiler option.\n\nNote that historically, a similar effect has often been achievable by adding a declaration file named `app.css.d.ts` instead of `app.d.css.ts` - however, this just worked through Node’s `require` resolution rules for CommonJS. Strictly speaking, the former is interpreted as a declaration file for a JavaScript file named `app.css.js`. Because relative files imports need to include extensions in Node’s ESM support, TypeScript would error on our example in an ESM file under `--moduleResolution node16` or `nodenext`.\n\nFor more information, read up [the proposal for this feature](https://github.com/microsoft/TypeScript/issues/50133)\n and [its corresponding pull request](https://github.com/microsoft/TypeScript/pull/51435)\n.\n\n*   Released:\n    \n    [5.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#allowImportingTsExtensions)\n Allow Importing TS Extensions - `allowImportingTsExtensions`\n\n`--allowImportingTsExtensions` allows TypeScript files to import each other with a TypeScript-specific extension like `.ts`, `.mts`, or `.tsx`.\n\nThis flag is only allowed when `--noEmit` or `--emitDeclarationOnly` is enabled, since these import paths would not be resolvable at runtime in JavaScript output files. The expectation here is that your resolver (e.g. your bundler, a runtime, or some other tool) is going to make these imports between `.ts` files work.\n\n*   Default:\n    \n    `true` if [`rewriteRelativeImportExtensions`](https://www.typescriptlang.org/tsconfig/#rewriteRelativeImportExtensions)\n    ; `false` otherwise.\n    \n*   Released:\n    \n    [5.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#allowUmdGlobalAccess)\n Allow Umd Global Access - `allowUmdGlobalAccess`\n\nWhen set to true, `allowUmdGlobalAccess` lets you access UMD exports as globals from inside module files. A module file is a file that has imports and/or exports. Without this flag, using an export from a UMD module requires an import declaration.\n\nAn example use case for this flag would be a web project where you know the particular library (like jQuery or Lodash) will always be available at runtime, but you can’t access it with an import.\n\n*   Released:\n    \n    [3.5](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-5.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#baseUrl)\n Base URL - `baseUrl`\n\nSets a base directory from which to resolve bare specifier module names. For example, in the directory structure:\n\n`   project  ├── ex.ts  ├── hello  │   └── world.ts  └── tsconfig.json   `\n\nWith `\"baseUrl\": \"./\"`, TypeScript will look for files starting at the same folder as the `tsconfig.json`:\n\nts\n\n`   import { helloWorld } from \"hello/world\";  console.log(helloWorld);   `\n\nThis resolution has higher priority than lookups from `node_modules`.\n\nThis feature was designed for use in conjunction with AMD module loaders in the browser, and is not recommended in any other context. As of TypeScript 4.1, `baseUrl` is no longer required to be set when using [`paths`](https://www.typescriptlang.org/tsconfig/#paths)\n.\n\n*   Released:\n    \n    [2.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#customConditions)\n Custom Conditions - `customConditions`\n\n`--customConditions` takes a list of additional [conditions](https://nodejs.org/api/packages.html#nested-conditions)\n that should succeed when TypeScript resolves from an [`exports`](https://nodejs.org/api/packages.html#exports)\n or [`imports`](https://nodejs.org/api/packages.html#imports)\n field of a `package.json`. These conditions are added to whatever existing conditions a resolver will use by default.\n\nFor example, when this field is set in a `tsconfig.json` as so:\n\njsonc\n\n`   {    \"compilerOptions\": {      \"target\": \"es2022\",      \"moduleResolution\": \"bundler\",      \"customConditions\": [\"my-condition\"]    }  }   `\n\nAny time an `exports` or `imports` field is referenced in `package.json`, TypeScript will consider conditions called `my-condition`.\n\nSo when importing from a package with the following `package.json`\n\njsonc\n\n`   {    // ...    \"exports\": {      \".\": {        \"my-condition\": \"./foo.mjs\",        \"node\": \"./bar.mjs\",        \"import\": \"./baz.mjs\",        \"require\": \"./biz.mjs\"      }    }  }   `\n\nTypeScript will try to look for files corresponding to `foo.mjs`.\n\nThis field is only valid under the `node16`, `nodenext`, and `bundler` options for [`--moduleResolution`](https://www.typescriptlang.org/tsconfig/#moduleResolution)\n.\n\n*   Related:\n    *   [`moduleResolution`](https://www.typescriptlang.org/tsconfig/#moduleResolution)\n        \n    *   [`resolvePackageJsonExports`](https://www.typescriptlang.org/tsconfig/#resolvePackageJsonExports)\n        \n    *   [`resolvePackageJsonImports`](https://www.typescriptlang.org/tsconfig/#resolvePackageJsonImports)\n        \n*   Released:\n    \n    [5.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#module)\n Module - `module`\n\nSets the module system for the program. See the [theory behind TypeScript’s `module` option](https://www.typescriptlang.org/docs/handbook/modules/theory.html#the-module-output-format)\n and [its reference page](https://www.typescriptlang.org/docs/handbook/modules/reference.html#the-module-compiler-option)\n for more information. You very likely want `\"nodenext\"` for modern Node.js projects and `preserve` or `esnext` for code that will be bundled.\n\nChanging `module` affects [`moduleResolution`](https://www.typescriptlang.org/tsconfig/#moduleResolution)\n which [also has a reference page](https://www.typescriptlang.org/docs/handbook/modules/reference.html#the-moduleresolution-compiler-option)\n.\n\nHere’s some example output for this file:\n\nts\n\n`   // @filename: index.ts  import { valueOfPi } from \"./constants\";  export const twoPi = valueOfPi * 2;   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAxge0QM4AuyiRBAdOQFDwAeADrgE5E77GgBuysArvADykAArRQAXlABmCgEYALACYA3NRCgAtNux8i2zerBQ4SNJlDREAE3pUC1aKiatQAb268BwsaAC+oJDMuKigAEQUwHiEJGQEYWq0jCxs0ZxEAO64vlI8-EKi4gBUoKpAA)\n\n#### [](https://www.typescriptlang.org/tsconfig/#commonjs)\n`CommonJS`\n\nts\n\n`\"use strict\";  Object.defineProperty(exports, \"__esModule\", { value: true });  exports.twoPi = void 0;  const constants_1 = require(\"./constants\");  exports.twoPi = constants_1.valueOfPi * 2;` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlAGNZk8A7AK0mzHHtkQCcvYuXUyAA590oAN6gAbgENihUgHkAZgAVUoAL6hlvZKABEAOmA16kdDPrpIBgNyZMpAB4iuYsxdDp4sdaABeaTkFFX8AKlAAJjsgA)\n\n#### [](https://www.typescriptlang.org/tsconfig/#umd)\n`UMD`\n\nts\n\n`(function (factory) {      if (typeof module === \"object\" && typeof module.exports === \"object\") {          var v = factory(require, exports);          if (v !== undefined) module.exports = v;      }      else if (typeof define === \"function\" && define.amd) {          define([\"require\", \"exports\", \"./constants\"], factory);      }  })(function (require, exports) {      \"use strict\";      Object.defineProperty(exports, \"__esModule\", { value: true });      exports.twoPi = void 0;      const constants_1 = require(\"./constants\");      exports.twoPi = constants_1.valueOfPi * 2;  });` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlEOX2zHADtZEAnF2FyTVZABw-SgA3qABuAQ2KFSAeQBmABVSgAvqDntkoAEQA6YAGNYDSOnEN0kbQG5MmUgA9+LQUZOD08WEtABeMZLS8j4AVKAATNZAA)\n\n#### [](https://www.typescriptlang.org/tsconfig/#amd)\n`AMD`\n\nts\n\n`define([\"require\", \"exports\", \"./constants\"], function (require, exports, constants_1) {      \"use strict\";      Object.defineProperty(exports, \"__esModule\", { value: true });      exports.twoPi = void 0;      exports.twoPi = constants_1.valueOfPi * 2;  });` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlAENl9sxwA7WRAJ1dlck1WQAdO6UAG9QANyrFCpAPIAzAAqpQAX1ByOyUACIAdMADGsRpHRVG6SNoDcmTKQAeA1kKMmh6eLCWgAvOMlpeR8AKlAAJmsgA)\n\n#### [](https://www.typescriptlang.org/tsconfig/#system)\n`System`\n\nts\n\n`System.register([\"./constants\"], function (exports_1, context_1) {      \"use strict\";      var constants_1, twoPi;      var __moduleName = context_1 && context_1.id;      return {          setters: [              function (constants_1_1) {                  constants_1 = constants_1_1;              }          ],          execute: function () {              exports_1(\"twoPi\", twoPi = constants_1.valueOfPi * 2);          }      };  });` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlEgE9J1TlsxwA7WRAJw9g8k1WQAHHulABvUADcAhsUKkA8gDMACqlABfUEu7JQAIgB0wAMawWdaS3SR9AbkyZSAD2EdRZi6PTxYa0AC8UrLyyv4AVKAATHZAA)\n\n#### [](https://www.typescriptlang.org/tsconfig/#esnext)\n`ESNext`\n\nts\n\n`import { valueOfPi } from \"./constants\";  export const twoPi = valueOfPi * 2;` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlFMgDtSAPLHcG2RAJ3dnck1WQAO3dKADeoAG4BDYoVIB5AGYAFVKAC+oRV2SgARADpgAY1g1I6KTXSQ9AbkyYGQ9iNPmR6eLFWgAvJIyckq+AFSgAEx2QA)\n\n#### [](https://www.typescriptlang.org/tsconfig/#es2015es6es2020es2022)\n`ES2015`/`ES6`/`ES2020`/`ES2022`\n\nts\n\n`import { valueOfPi } from \"./constants\";  export const twoPi = valueOfPi * 2;` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlFMgCYAGARgFZsxwA7WRAJ29m8iZUyAA790oAN6gAbgENihUgHkAZgAVUoAL6hVfZKABEAOmABjWO0jo57dJCMBuTJlIAPMdwmXrE9PCwmqAAvLIKSmrBAFSgNE5AA)\n\nIn addition to the base functionality of `ES2015`/`ES6`, `ES2020` adds support for [dynamic `import`s](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import)\n, and [`import.meta`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta)\n while `ES2022` further adds support for [top level `await`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#top_level_await)\n.\n\n#### [](https://www.typescriptlang.org/tsconfig/#node16node18nodenext)\n`node16`/`node18`/`nodenext`\n\nThe `node16`, `node18`, and `nodenext` modes integrate with Node’s [native ECMAScript Module support](https://nodejs.org/api/esm.html)\n. The emitted JavaScript uses either `CommonJS` or `ES2020` output depending on the file extension and the value of the `type` setting in the nearest `package.json`. Module resolution also works differently. You can learn more in the [handbook](https://www.typescriptlang.org/docs/handbook/esm-node.html)\n and [Modules Reference](https://www.typescriptlang.org/docs/handbook/modules/reference.html#node16-node18-nodenext)\n.\n\n*   `node16` is available from TypeScript 4.7\n*   `node18` is available from TypeScript 5.8 as a replacement for `node16`, with added support for import attributes.\n*   `nodenext` is available from TypeScript 4.7, but its behavior changes with the latest stable versions of Node.js. As of TypeScript 5.8, `nodenext` supports `require` of ECMAScript modules.\n\n#### [](https://www.typescriptlang.org/tsconfig/#preserve)\n`preserve`\n\nIn `--module preserve` ([added](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-4.html#support-for-require-calls-in---moduleresolution-bundler-and---module-preserve)\n in TypeScript 5.4), ECMAScript imports and exports written in input files are preserved in the output, and CommonJS-style `import x = require(\"...\")` and `export = ...` statements are emitted as CommonJS `require` and `module.exports`. In other words, the format of each individual import or export statement is preserved, rather than being coerced into a single format for the whole compilation (or even a whole file).\n\nts\n\n`import { valueOfPi } from \"./constants\";  const constants = require(\"./constants\");  export const piSquared = valueOfPi * constants.valueOfPi;` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlAAcAnUyUmgN1OzHADtZEabYbImVMir90oAN6gmAQ2KFSAeQBmABVSgAvqGV9koAEQA6YAGNYHSOhkd0kAwG4hIsaHOXrtyKAC8oOgCOhKh0ABTGZhZWNnYGAJROmKQAHqI04u5W1KgAykEydPi+0nIKKuqgAFRuUZ52RrLySmqoDkA)\n\nWhile it’s rare to need to mix imports and require calls in the same file, this `module` mode best reflects the capabilities of most modern bundlers, as well as the Bun runtime.\n\n> Why care about TypeScript’s `module` emit with a bundler or with Bun, where you’re likely also setting `noEmit`? TypeScript’s type checking and module resolution behavior are affected by the module format that it _would_ emit. Setting `module` gives TypeScript information about how your bundler or runtime will process imports and exports, which ensures that the types you see on imported values accurately reflect what will happen at runtime or after bundling.\n\n#### [](https://www.typescriptlang.org/tsconfig/#none)\n`None`\n\nts\n\n`\"use strict\";  Object.defineProperty(exports, \"__esModule\", { value: true });  exports.twoPi = void 0;  const constants_1 = require(\"./constants\");  exports.twoPi = constants_1.valueOfPi * 2;` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgs2ATAVwBsBTALlADtYrTsxwbEAnF2FyTVZABw-SgA3qABuAQ2KFSAeQBmABVSgAvqDntkoAEQA6YAGNakdOKrpI2gNyZMpAB78Wgo1ROh08WEtABeMZLS8j4AVKAATFZAA)\n\n*   Default:\n    \n    `CommonJS` if [`target`](https://www.typescriptlang.org/tsconfig/#target)\n     is `ES5`; `ES6`/`ES2015` otherwise.\n    \n*   Allowed:\n    *   `none`\n        \n    *   `commonjs`\n        \n    *   `amd`\n        \n    *   `umd`\n        \n    *   `system`\n        \n    *   `es6`/`es2015`\n        \n    *   `es2020`\n        \n    *   `es2022`\n        \n    *   `esnext`\n        \n    *   `node16`\n        \n    *   `node18`\n        \n    *   `nodenext`\n        \n    *   `preserve`\n        \n*   Related:\n    *   [`moduleResolution`](https://www.typescriptlang.org/tsconfig/#moduleResolution)\n        \n    *   [`esModuleInterop`](https://www.typescriptlang.org/tsconfig/#esModuleInterop)\n        \n    *   [`allowImportingTsExtensions`](https://www.typescriptlang.org/tsconfig/#allowImportingTsExtensions)\n        \n    *   [`allowArbitraryExtensions`](https://www.typescriptlang.org/tsconfig/#allowArbitraryExtensions)\n        \n    *   [`resolveJsonModule`](https://www.typescriptlang.org/tsconfig/#resolveJsonModule)\n        \n*   Released:\n    \n    [1.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#moduleResolution)\n Module Resolution - `moduleResolution`\n\nSpecify the module resolution strategy:\n\n*   `'node16'` or `'nodenext'` for modern versions of Node.js. Node.js v12 and later supports both ECMAScript imports and CommonJS `require`, which resolve using different algorithms. These `moduleResolution` values, when combined with the corresponding [`module`](https://www.typescriptlang.org/tsconfig/#module)\n     values, picks the right algorithm for each resolution based on whether Node.js will see an `import` or `require` in the output JavaScript code.\n*   `'node10'` (previously called `'node'`) for Node.js versions older than v10, which only support CommonJS `require`. You probably won’t need to use `node10` in modern code.\n*   `'bundler'` for use with bundlers. Like `node16` and `nodenext`, this mode supports package.json `\"imports\"` and `\"exports\"`, but unlike the Node.js resolution modes, `bundler` never requires file extensions on relative paths in imports.\n*   `'classic'` was used in TypeScript before the release of 1.6. `classic` should not be used.\n\nThere are reference pages explaining the [theory behind TypeScript’s module resolution](https://www.typescriptlang.org/docs/handbook/modules/theory.html#module-resolution)\n and the [details of each option](https://www.typescriptlang.org/docs/handbook/modules/reference.html#the-moduleresolution-compiler-option)\n.\n\n*   Default:\n    \n    `Classic` if [`module`](https://www.typescriptlang.org/tsconfig/#module)\n     is `AMD`, `UMD`, `System`, or `ES6`/`ES2015`; Matches if [`module`](https://www.typescriptlang.org/tsconfig/#module)\n     is `node16` or `nodenext`; `Node` otherwise.\n    \n*   Allowed:\n    *   `classic`\n        \n    *   `node10`/`node`\n        \n    *   `node16`\n        \n    *   `nodenext`\n        \n    *   `bundler`\n        \n*   Related:\n    *   [`module`](https://www.typescriptlang.org/tsconfig/#module)\n        \n    *   [`paths`](https://www.typescriptlang.org/tsconfig/#paths)\n        \n    *   [`baseUrl`](https://www.typescriptlang.org/tsconfig/#baseUrl)\n        \n    *   [`rootDirs`](https://www.typescriptlang.org/tsconfig/#rootDirs)\n        \n    *   [`moduleSuffixes`](https://www.typescriptlang.org/tsconfig/#moduleSuffixes)\n        \n    *   [`customConditions`](https://www.typescriptlang.org/tsconfig/#customConditions)\n        \n    *   [`resolvePackageJsonExports`](https://www.typescriptlang.org/tsconfig/#resolvePackageJsonExports)\n        \n    *   [`resolvePackageJsonImports`](https://www.typescriptlang.org/tsconfig/#resolvePackageJsonImports)\n        \n*   Released:\n    \n    [1.6](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-6.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#moduleSuffixes)\n Module Suffixes - `moduleSuffixes`\n\nProvides a way to override the default list of file name suffixes to search when resolving a module.\n\n`   {    \"[compilerOptions](https://www.typescriptlang.org/tsconfig#compilerOptions) \": {      \"[moduleSuffixes](https://www.typescriptlang.org/tsconfig#moduleSuffixes) \": [\".ios\", \".native\", \"\"]    }  }   `\n\nGiven the above configuration, an import like the following:\n\nts\n\n`   import * as foo from \"./foo\";   `\n\nTypeScript will look for the relative files `./foo.ios.ts`, `./foo.native.ts`, and finally `./foo.ts`.\n\nNote the empty string `\"\"` in [`moduleSuffixes`](https://www.typescriptlang.org/tsconfig/#moduleSuffixes)\n which is necessary for TypeScript to also look-up `./foo.ts`.\n\nThis feature can be useful for React Native projects where each target platform can use a separate tsconfig.json with differing `moduleSuffixes`.\n\n*   Released:\n    \n    [4.7](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-7.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#noResolve)\n No Resolve - `noResolve`\n\nBy default, TypeScript will examine the initial set of files for `import` and `<reference` directives and add these resolved files to your program.\n\nIf `noResolve` is set, this process doesn’t happen. However, `import` statements are still checked to see if they resolve to a valid module, so you’ll need to make sure this is satisfied by some other means.\n\n*   Released:\n    \n    [1.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#noUncheckedSideEffectImports)\n noUncheckedSideEffectImports - `noUncheckedSideEffectImports`\n\nIn JavaScript it’s possible to `import` a module without actually importing any values from it.\n\nts\n\n`   import \"some-module\";   `\n\nThese imports are often called _side effect imports_ because the only useful behavior they can provide is by executing some side effect (like registering a global variable, or adding a polyfill to a prototype).\n\nBy default, TypeScript will not check these imports for validity. If the import resolves to a valid source file, TypeScript will load and check the file. If no source file is found, TypeScript will silently ignore the import.\n\nThis is surprising behavior, but it partially stems from modeling patterns in the JavaScript ecosystem. For example, this syntax has also been used with special loaders in bundlers to load CSS or other assets. Your bundler might be configured in such a way where you can include specific `.css` files by writing something like the following:\n\ntsx\n\n`   import \"./button-component.css\";  export function Button() {    // ...  }   `\n\nStill, this masks potential typos on side effect imports.\n\nWhen `--noUncheckedSideEffectImports` is enabled, TypeScript will error if it can’t find a source file for a side effect import.\n\nts\n\n`   import \"oops-this-module-does-not-exist\";  //     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  // error: Cannot find module 'oops-this-module-does-not-exist' or its corresponding  //        type declarations.   `\n\nWhen enabling this option, some working code may now receive an error, like in the CSS example above. To work around this, users who want to just write side effect `import`s for assets might be better served by writing what’s called an _ambient module declaration_ with a wildcard specifier. It would go in a global file and look something like the following:\n\nts\n\n`   // ./src/globals.d.ts  // Recognize all CSS files as module imports.  declare module \"*.css\" {}   `\n\nIn fact, you might already have a file like this in your project! For example, running something like `vite init` might create a similar `vite-env.d.ts`.\n\n*   Released:\n    \n    [5.6](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-6.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#paths)\n Paths - `paths`\n\nA series of entries which re-map imports to lookup locations relative to the [`baseUrl`](https://www.typescriptlang.org/tsconfig/#baseUrl)\n if set, or to the tsconfig file itself otherwise. There is a larger coverage of `paths` in [the `moduleResolution` reference page](https://www.typescriptlang.org/docs/handbook/modules/reference.html#paths)\n.\n\n`paths` lets you declare how TypeScript should resolve an import in your `require`/`import`s.\n\n`   {    \"[compilerOptions](https://www.typescriptlang.org/tsconfig#compilerOptions) \": {      \"[paths](https://www.typescriptlang.org/tsconfig#paths) \": {        \"jquery\": [\"./vendor/jquery/dist/jquery\"]      }    }  }   `\n\nThis would allow you to be able to write `import \"jquery\"`, and get all of the correct typing locally.\n\n`   {    \"[compilerOptions](https://www.typescriptlang.org/tsconfig#compilerOptions) \": {      \"[paths](https://www.typescriptlang.org/tsconfig#paths) \": {        \"app/*\": [\"./src/app/*\"],        \"config/*\": [\"./src/app/_config/*\"],        \"environment/*\": [\"./src/environments/*\"],        \"shared/*\": [\"./src/app/_shared/*\"],        \"helpers/*\": [\"./src/helpers/*\"],        \"tests/*\": [\"./src/tests/*\"]      }    }  }   `\n\nIn this case, you can tell the TypeScript file resolver to support a number of custom prefixes to find code.\n\nNote that this feature does not change how import paths are emitted by `tsc`, so `paths` should only be used to inform TypeScript that another tool has this mapping and will use it at runtime or when bundling.\n\n*   Released:\n    \n    [2.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#resolveJsonModule)\n Resolve JSON Module - `resolveJsonModule`\n\nAllows importing modules with a `.json` extension, which is a common practice in node projects. This includes generating a type for the `import` based on the static JSON shape.\n\nTypeScript does not support resolving JSON files by default:\n\nts\n\n`   // @filename: settings.json  {      \"repo\": \"TypeScript\",      \"dry\": false,      \"debug\": false  }  // @filename: index.ts  import settings from \"./settings.json\";  Cannot find module './settings.json'. Consider using '--resolveJsonModule' to import module with '.json' extension.2732Cannot find module './settings.json'. Consider using '--resolveJsonModule' to import module with '.json' extension.  settings.debug === true;  settings.dry === 2;   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwHYDMaBQIIAzASwBtIA7AQwFtJVFIAXJ4igc0QDoArROCrgDeuUGNAAiaJAAOcCagkAVAJ4zIAZQDG0YjKYSANKPESAJtBULQhKqUbHxks5ABGAV3bXb9yLgC++GDgJOTUdKhsLgAeXEyIuMQ0ctBMoIwsbJw28DSSXMAZrBzcfAISANy4uEVZ3C4e7KAAvK2gTNDukFW1JVwWKi1taBVAA)\n\nEnabling the option allows importing JSON, and validating the types in that JSON file.\n\nts\n\n`  // @filename: settings.json  {      \"repo\": \"TypeScript\",      \"dry\": false,      \"debug\": false  }  // @filename: index.ts  import settings from \"./settings.json\";  settings.debug === true;  settings.dry === 2;  This comparison appears to be unintentional because the types 'boolean' and 'number' have no overlap.2367This comparison appears to be unintentional because the types 'boolean' and 'number' have no overlap.`[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYBsB2AUCBNJInADYBukAUqQHYCycAJgK5mQFjgC2L7kVAGM4PPnQBWiLhD5sOAJRLlWAFwCWcOqjotOhcADN1HOgEMeg0IkiqNdAOaIAdFK14A3nlA-QAImIABzg-VD8AFQBPQMgAZSFodUDVPwAab18-ZmhI0NBDMzIbdN9-ZkgAI1YHPIKizgBfGSMTSHNLVHU6coAPZ1VpdR5g6FVrW3snfPgef2dgGzsup1d6PwBuPDxFyZdyqodQAF4T0FVoVkhNneW9nOPTtHWgA)\n\n*   Released:\n    \n    [2.9](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-9.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#resolvePackageJsonExports)\n Resolve package.json Exports - `resolvePackageJsonExports`\n\n`--resolvePackageJsonExports` forces TypeScript to consult [the `exports` field of `package.json` files](https://nodejs.org/api/packages.html#exports)\n if it ever reads from a package in `node_modules`.\n\nThis option defaults to `true` under the `node16`, `nodenext`, and `bundler` options for [`--moduleResolution`](https://www.typescriptlang.org/tsconfig/#moduleResolution)\n.\n\n*   Default:\n    \n    `true` when [`moduleResolution`](https://www.typescriptlang.org/tsconfig/#moduleResolution)\n     is `node16`, `nodenext`, or `bundler`; otherwise `false`\n    \n*   Related:\n    *   [`moduleResolution`](https://www.typescriptlang.org/tsconfig/#moduleResolution)\n        \n    *   [`customConditions`](https://www.typescriptlang.org/tsconfig/#customConditions)\n        \n    *   [`resolvePackageJsonImports`](https://www.typescriptlang.org/tsconfig/#resolvePackageJsonImports)\n        \n*   Released:\n    \n    [5.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#resolvePackageJsonImports)\n Resolve package.json Imports - `resolvePackageJsonImports`\n\n`--resolvePackageJsonImports` forces TypeScript to consult [the `imports` field of `package.json` files](https://nodejs.org/api/packages.html#imports)\n when performing a lookup that starts with `#` from a file whose ancestor directory contains a `package.json`.\n\nThis option defaults to `true` under the `node16`, `nodenext`, and `bundler` options for [`--moduleResolution`](https://www.typescriptlang.org/tsconfig/#moduleResolution)\n.\n\n*   Default:\n    \n    `true` when [`moduleResolution`](https://www.typescriptlang.org/tsconfig/#moduleResolution)\n     is `node16`, `nodenext`, or `bundler`; otherwise `false`\n    \n*   Related:\n    *   [`moduleResolution`](https://www.typescriptlang.org/tsconfig/#moduleResolution)\n        \n    *   [`customConditions`](https://www.typescriptlang.org/tsconfig/#customConditions)\n        \n    *   [`resolvePackageJsonExports`](https://www.typescriptlang.org/tsconfig/#resolvePackageJsonExports)\n        \n*   Released:\n    \n    [5.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#rewriteRelativeImportExtensions)\n rewriteRelativeImportExtensions - `rewriteRelativeImportExtensions`\n\nRewrite `.ts`, `.tsx`, `.mts`, and `.cts` file extensions in relative import paths to their JavaScript equivalent in output files.\n\nFor more information, see the [TypeScript 5.7 release notes](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-7.html#path-rewriting-for-relative-paths)\n.\n\n*   Released:\n    \n    [5.7](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-7.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#rootDir)\n Root Dir - `rootDir`\n\n**Default**: The longest common path of all non-declaration input files. If [`composite`](https://www.typescriptlang.org/tsconfig/#composite)\n is set, the default is instead the directory containing the `tsconfig.json` file.\n\nWhen TypeScript compiles files, it keeps the same directory structure in the output directory as exists in the input directory.\n\nFor example, let’s say you have some input files:\n\n`   MyProj  ├── tsconfig.json  ├── core  │   ├── a.ts  │   ├── b.ts  │   ├── sub  │   │   ├── c.ts  ├── types.d.ts   `\n\nThe inferred value for `rootDir` is the longest common path of all non-declaration input files, which in this case is `core/`.\n\nIf your [`outDir`](https://www.typescriptlang.org/tsconfig/#outDir)\n was `dist`, TypeScript would write this tree:\n\n`   MyProj  ├── dist  │   ├── a.js  │   ├── b.js  │   ├── sub  │   │   ├── c.js   `\n\nHowever, you may have intended for `core` to be part of the output directory structure. By setting `rootDir: \".\"` in `tsconfig.json`, TypeScript would write this tree:\n\n`   MyProj  ├── dist  │   ├── core  │   │   ├── a.js  │   │   ├── b.js  │   │   ├── sub  │   │   │   ├── c.js   `\n\nImportantly, `rootDir` **does not affect which files become part of the compilation**. It has no interaction with the [`include`](https://www.typescriptlang.org/tsconfig/#include)\n, [`exclude`](https://www.typescriptlang.org/tsconfig/#exclude)\n, or [`files`](https://www.typescriptlang.org/tsconfig/#files)\n `tsconfig.json` settings.\n\nNote that TypeScript will never write an output file to a directory outside of [`outDir`](https://www.typescriptlang.org/tsconfig/#outDir)\n, and will never skip emitting a file. For this reason, `rootDir` also enforces that all files which need to be emitted are underneath the `rootDir` path.\n\nFor example, let’s say you had this tree:\n\n`   MyProj  ├── tsconfig.json  ├── core  │   ├── a.ts  │   ├── b.ts  ├── helpers.ts   `\n\nIt would be an error to specify `rootDir` as `core` _and_ [`include`](https://www.typescriptlang.org/tsconfig/#include)\n as `*` because it creates a file (`helpers.ts`) that would need to be emitted _outside_ the [`outDir`](https://www.typescriptlang.org/tsconfig/#outDir)\n (i.e. `../helpers.js`).\n\n*   Default:\n    \n    Computed from the list of input files.\n    \n*   Released:\n    \n    [1.5](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-5.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#rootDirs)\n Root Dirs - `rootDirs`\n\nUsing `rootDirs`, you can inform the compiler that there are many “virtual” directories acting as a single root. This allows the compiler to resolve relative module imports within these “virtual” directories, as if they were merged in to one directory.\n\nFor example:\n\n ``src   └── views       └── view1.ts (can import \"./template1\", \"./view2`)       └── view2.ts (can import \"./template1\", \"./view1`)   generated   └── templates           └── views               └── template1.ts (can import \"./view1\", \"./view2\")``\n\n`   {    \"[compilerOptions](https://www.typescriptlang.org/tsconfig#compilerOptions) \": {      \"[rootDirs](https://www.typescriptlang.org/tsconfig#rootDirs) \": [\"src/views\", \"generated/templates/views\"]    }  }   `\n\nThis does not affect how TypeScript emits JavaScript, it only emulates the assumption that they will be able to work via those relative paths at runtime.\n\n`rootDirs` can be used to provide a separate “type layer” to files that are not TypeScript or JavaScript by providing a home for generated `.d.ts` files in another folder. This technique is useful for bundled applications where you use `import` of files that aren’t necessarily code:\n\nsh\n\n `src   └── index.ts   └── css       └── main.css       └── navigation.css   generated   └── css       └── main.css.d.ts       └── navigation.css.d.ts`\n\n`   {    \"[compilerOptions](https://www.typescriptlang.org/tsconfig#compilerOptions) \": {      \"[rootDirs](https://www.typescriptlang.org/tsconfig#rootDirs) \": [\"src\", \"generated\"]    }  }   `\n\nThis technique lets you generate types ahead of time for the non-code source files. Imports then work naturally based off the source file’s location. For example `./src/index.ts` can import the file `./src/css/main.css` and TypeScript will be aware of the bundler’s behavior for that filetype via the corresponding generated declaration file.\n\nts\n\n`   // @filename: index.ts  import { appClass } from \"./main.css\";   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKVzqIHQDGAzsfgCb4AuxAUPAB4AOA9gE5WiEuLGfJMmAYVjJSoALygARDjwixxAGIBmAKJCATNIDctEKAC0xwgFcqxw-rBQ4SNJlB5yjanWipWHUAG9QA4VFxAF9QSDYWVBl8YDkCEmJdIA)\n\n*   Default:\n    \n    Computed from the list of input files.\n    \n*   Released:\n    \n    [2.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#typeRoots)\n Type Roots - `typeRoots`\n\nBy default all _visible_ ”`@types`” packages are included in your compilation. Packages in `node_modules/@types` of any enclosing folder are considered _visible_. For example, that means packages within `./node_modules/@types/`, `../node_modules/@types/`, `../../node_modules/@types/`, and so on.\n\nIf `typeRoots` is specified, _only_ packages under `typeRoots` will be included. For example:\n\n`   {    \"[compilerOptions](https://www.typescriptlang.org/tsconfig#compilerOptions) \": {      \"[typeRoots](https://www.typescriptlang.org/tsconfig#typeRoots) \": [\"./typings\", \"./vendor/types\"]    }  }   `\n\nThis config file will include _all_ packages under `./typings` and `./vendor/types`, and no packages from `./node_modules/@types`. All paths are relative to the `tsconfig.json`.\n\n*   Related:\n    *   [`types`](https://www.typescriptlang.org/tsconfig/#types)\n        \n*   Released:\n    \n    [2.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#types)\n Types - `types`\n\nBy default all _visible_ ”`@types`” packages are included in your compilation. Packages in `node_modules/@types` of any enclosing folder are considered _visible_. For example, that means packages within `./node_modules/@types/`, `../node_modules/@types/`, `../../node_modules/@types/`, and so on.\n\nIf `types` is specified, only packages listed will be included in the global scope. For instance:\n\n`   {    \"[compilerOptions](https://www.typescriptlang.org/tsconfig#compilerOptions) \": {      \"[types](https://www.typescriptlang.org/tsconfig#types) \": [\"node\", \"jest\", \"express\"]    }  }   `\n\nThis `tsconfig.json` file will _only_ include `./node_modules/@types/node`, `./node_modules/@types/jest` and `./node_modules/@types/express`. Other packages under `node_modules/@types/*` will not be included.\n\n### [](https://www.typescriptlang.org/tsconfig/#what-does-this-affect)\nWhat does this affect?\n\nThis option does not affect how `@types/*` are included in your application code, for example if you had the above `compilerOptions` example with code like:\n\nts\n\n`   import * as moment from \"moment\";  moment().format(\"MMMM Do YYYY, h:mm:ss a\");   `\n\nThe `moment` import would be fully typed.\n\nWhen you have this option set, by not including a module in the `types` array it:\n\n*   Will not add globals to your project (e.g `process` in node, or `expect` in Jest)\n*   Will not have exports appear as auto-import recommendations\n\nThis feature differs from [`typeRoots`](https://www.typescriptlang.org/tsconfig/#typeRoots)\n in that it is about specifying only the exact types you want included, whereas [`typeRoots`](https://www.typescriptlang.org/tsconfig/#typeRoots)\n supports saying you want particular folders.\n\n*   Related:\n    *   [`typeRoots`](https://www.typescriptlang.org/tsconfig/#typeRoots)\n        \n*   Released:\n    \n    [2.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html)\n    \n\n[#](https://www.typescriptlang.org/tsconfig/#Emit_6246)\nEmit\n------------------------------------------------------------\n\n### [#](https://www.typescriptlang.org/tsconfig/#declaration)\n Declaration - `declaration`\n\nGenerate `.d.ts` files for every TypeScript or JavaScript file inside your project. These `.d.ts` files are type definition files which describe the external API of your module. With `.d.ts` files, tools like TypeScript can provide intellisense and accurate types for un-typed code.\n\nWhen `declaration` is set to `true`, running the compiler with this TypeScript code:\n\nts\n\n`   export let helloWorld = \"hi\";   `[Try](https://www.typescriptlang.org/play/#code/KYDwDg9gTgLgBAG2PAFsBCIHVoICZwC8cARCgJYkDcQA)\n\nWill generate an `index.js` file like this:\n\nts\n\n`export let helloWorld = \"hi\";` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAFMAeAHWAJ3VABttTpsyzYB1YsgE1AF5QAiaVTgbiA)\n\nWith a corresponding `helloWorld.d.ts`:\n\nts\n\n`export declare let helloWorld: string;` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgF3QUwCYDFUAbLALlFQDscsAPAOhzvUgCgQIYEUM2xxqAxoQCGAJ2HpUsCi1oAHWKPShiy6FkKFYAdUWEcoALygARNFQmA3EA)\n\nWhen working with `.d.ts` files for JavaScript files you may want to use [`emitDeclarationOnly`](https://www.typescriptlang.org/tsconfig/#emitDeclarationOnly)\n or use [`outDir`](https://www.typescriptlang.org/tsconfig/#outDir)\n to ensure that the JavaScript files are not overwritten.\n\n*   Default:\n    \n    `true` if [`composite`](https://www.typescriptlang.org/tsconfig/#composite)\n    ; `false` otherwise.\n    \n*   Related:\n    *   [`declarationDir`](https://www.typescriptlang.org/tsconfig/#declarationDir)\n        \n    *   [`emitDeclarationOnly`](https://www.typescriptlang.org/tsconfig/#emitDeclarationOnly)\n        \n*   Released:\n    \n    [1.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#declarationDir)\n Declaration Dir - `declarationDir`\n\nOffers a way to configure the root directory for where declaration files are emitted.\n\n`   example  ├── index.ts  ├── package.json  └── tsconfig.json   `\n\nwith this `tsconfig.json`:\n\n`   {    \"[compilerOptions](https://www.typescriptlang.org/tsconfig#compilerOptions) \": {      \"[declaration](https://www.typescriptlang.org/tsconfig#declaration) \": true,      \"[declarationDir](https://www.typescriptlang.org/tsconfig#declarationDir) \": \"./types\"    }  }   `\n\nWould place the d.ts for the `index.ts` in a `types` folder:\n\n`   example  ├── index.js  ├── index.ts  ├── package.json  ├── tsconfig.json  └── types      └── index.d.ts   `\n\n*   Related:\n    *   [`declaration`](https://www.typescriptlang.org/tsconfig/#declaration)\n        \n*   Released:\n    \n    [2.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#declarationMap)\n Declaration Map - `declarationMap`\n\nGenerates a source map for `.d.ts` files which map back to the original `.ts` source file. This will allow editors such as VS Code to go to the original `.ts` file when using features like _Go to Definition_.\n\nYou should strongly consider turning this on if you’re using project references.\n\n*   Released:\n    \n    [2.9](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-9.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#downlevelIteration)\n Downlevel Iteration - `downlevelIteration`\n\nDownleveling is TypeScript’s term for transpiling to an older version of JavaScript. This flag is to enable support for a more accurate implementation of how modern JavaScript iterates through new concepts in older JavaScript runtimes.\n\nECMAScript 6 added several new iteration primitives: the `for / of` loop (`for (el of arr)`), Array spread (`[a, ...b]`), argument spread (`fn(...args)`), and `Symbol.iterator`. `downlevelIteration` allows for these iteration primitives to be used more accurately in ES5 environments if a `Symbol.iterator` implementation is present.\n\n#### [](https://www.typescriptlang.org/tsconfig/#example-effects-on-for--of)\nExample: Effects on `for / of`\n\nWith this TypeScript code:\n\nts\n\n`   const str = \"Hello!\";  for (const s of str) {    console.log(s);  }   `[Try](https://www.typescriptlang.org/play/#code/MYewdgzgLgBNBOMC8MBEAJApgG2yAhKgNwBQAZiIgBSiSwQwhlxTwCUMA3iTDLRCGyYAdHgDmVCG1IBfIA)\n\nWithout `downlevelIteration` enabled, a `for / of` loop on any object is downleveled to a traditional `for` loop:\n\nts\n\n`\"use strict\";  var str = \"Hello!\";  for (var _i = 0, str_1 = str; _i < str_1.length; _i++) {      var s = str_1[_i];      console.log(s);  }` [Try](https://www.typescriptlang.org/play/#code/PTAEAEBcEMCcHMCmkBcoCiBlArAKBBAM4AWA9gO7oC2AlpLgMakB2hkobsoAvKAEQAJRABthpAIR8A3LgBmpLgAomrdoVClZHSLACUoAN65QoFYVLDEAOjHxFhXTIC+QA)\n\nThis is often what people expect, but it’s not 100% compliant with ECMAScript iteration protocol. Certain strings, such as emoji (😜), have a `.length` of 2 (or even more!), but should iterate as 1 unit in a `for-of` loop. See [this blog post by Jonathan New](https://blog.jonnew.com/posts/poo-dot-length-equals-two)\n for a longer explanation.\n\nWhen `downlevelIteration` is enabled, TypeScript will use a helper function that checks for a `Symbol.iterator` implementation (either native or polyfill). If this implementation is missing, you’ll fall back to index-based iteration.\n\nts\n\n`\"use strict\";  var __values = (this && this.__values) || function(o) {      var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;      if (m) return m.call(o);      if (o && typeof o.length === \"number\") return {          next: function () {              if (o && i >= o.length) o = void 0;              return { value: o && o[i++], done: !o };          }      };      throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");  };  var e_1, _a;  var str = \"Hello!\";  try {      for (var str_1 = __values(str), str_1_1 = str_1.next(); !str_1_1.done; str_1_1 = str_1.next()) {          var s = str_1_1.value;          console.log(s);      }  }  catch (e_1_1) { e_1 = { error: e_1_1 }; }  finally {      try {          if (str_1_1 && !str_1_1.done && (_a = str_1.return)) _a.call(str_1);      }      finally { if (e_1) throw e_1.error; }  }` [Try](https://www.typescriptlang.org/play/#code/PTAEAEBcEMCcHMCmkBcoCiBlArAKBBACYD2A7gHYA2iAbopQJKSKzSQCWx5+Y4AzgAsy6ALbtIuAMZc+kULNigAvKABEACXqViAQlUBuXADNiigBTTys+aGJH5kWAEpQAb1yhQlvsWoA6bXgzPidDAF8gA)\n\nYou can use [tslib](https://www.npmjs.com/package/tslib)\n via [`importHelpers`](https://www.typescriptlang.org/tsconfig/#importHelpers)\n to reduce the amount of inline JavaScript too:\n\nts\n\n`\"use strict\";  var __values = (this && this.__values) || function(o) {      var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;      if (m) return m.call(o);      if (o && typeof o.length === \"number\") return {          next: function () {              if (o && i >= o.length) o = void 0;              return { value: o && o[i++], done: !o };          }      };      throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");  };  var e_1, _a;  var str = \"Hello!\";  try {      for (var str_1 = __values(str), str_1_1 = str_1.next(); !str_1_1.done; str_1_1 = str_1.next()) {          var s = str_1_1.value;          console.log(s);      }  }  catch (e_1_1) { e_1 = { error: e_1_1 }; }  finally {      try {          if (str_1_1 && !str_1_1.done && (_a = str_1.return)) _a.call(str_1);      }      finally { if (e_1) throw e_1.error; }  }` [Try](https://www.typescriptlang.org/play/#code/PTAEAEBcEMCcHMCmkBcoCiBlArAKBBACYD2A7gHYA2iAbopQJKSKzSQCWx5+Y47AtgAdisSAAl6glgGceEaQAsy6fu0i4Axl2mRQO2KAC8oAEQTKlYgEITAblwAzEaAAUW8jr2hiDvZFgAlKAA3rigoO7SxNQAdJbwLtIB9gC+QA)\n\n**Note:** enabling `downlevelIteration` does not improve compliance if `Symbol.iterator` is not present in the runtime.\n\n#### [](https://www.typescriptlang.org/tsconfig/#example-effects-on-array-spreads)\nExample: Effects on Array Spreads\n\nThis is an array spread:\n\njs\n\n`   // Make a new array whose elements are 1 followed by the elements of arr2  const arr = [1, ...arr2];   `\n\nBased on the description, it sounds easy to downlevel to ES5:\n\njs\n\n`   // The same, right?  const arr = [1].concat(arr2);   `\n\nHowever, this is observably different in certain rare cases.\n\nFor example, if a source array is missing one or more items (contains a hole), the spread syntax will replace each empty item with `undefined`, whereas `.concat` will leave them intact.\n\njs\n\n`   // Make an array where the element at index 1 is missing  let arrayWithHole = [\"a\", , \"c\"];  let spread = [...arrayWithHole];  let concatenated = [].concat(arrayWithHole);  console.log(arrayWithHole);  // [ 'a', <1 empty item>, 'c' ]  console.log(spread);  // [ 'a', undefined, 'c' ]  console.log(concatenated);  // [ 'a', <1 empty item>, 'c' ]   `\n\nJust as with `for / of`, `downlevelIteration` will use `Symbol.iterator` (if present) to more accurately emulate ES 6 behavior.\n\n*   Related:\n    *   [`importHelpers`](https://www.typescriptlang.org/tsconfig/#importHelpers)\n        \n*   Released:\n    \n    [2.3](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-3.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#emitBOM)\n Emit BOM - `emitBOM`\n\nControls whether TypeScript will emit a [byte order mark (BOM)](https://wikipedia.org/wiki/Byte_order_mark)\n when writing output files. Some runtime environments require a BOM to correctly interpret a JavaScript files; others require that it is not present. The default value of `false` is generally best unless you have a reason to change it.\n\n*   Released:\n    \n    [1.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#emitDeclarationOnly)\n Emit Declaration Only - `emitDeclarationOnly`\n\n_Only_ emit `.d.ts` files; do not emit `.js` files.\n\nThis setting is useful in two cases:\n\n*   You are using a transpiler other than TypeScript to generate your JavaScript.\n*   You are using TypeScript to only generate `d.ts` files for your consumers.\n\n*   Related:\n    *   [`declaration`](https://www.typescriptlang.org/tsconfig/#declaration)\n        \n*   Released:\n    \n    [2.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#importHelpers)\n Import Helpers - `importHelpers`\n\nFor certain downleveling operations, TypeScript uses some helper code for operations like extending class, spreading arrays or objects, and async operations. By default, these helpers are inserted into files which use them. This can result in code duplication if the same helper is used in many different modules.\n\nIf the `importHelpers` flag is on, these helper functions are instead imported from the [tslib](https://www.npmjs.com/package/tslib)\n module. You will need to ensure that the `tslib` module is able to be imported at runtime. This only affects modules; global script files will not attempt to import modules.\n\nFor example, with this TypeScript:\n\nts\n\n`   export function fn(arr: number[]) {    const arr2 = [1, ...arr];  }   `\n\nTurning on [`downlevelIteration`](https://www.typescriptlang.org/tsconfig/#downlevelIteration)\n and `importHelpers` is still false:\n\nts\n\n`var __read = (this && this.__read) || function (o, n) {      var m = typeof Symbol === \"function\" && o[Symbol.iterator];      if (!m) return o;      var i = m.call(o), r, ar = [], e;      try {          while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);      }      catch (error) { e = { error: error }; }      finally {          try {              if (r && !r.done && (m = i[\"return\"])) m.call(i);          }          finally { if (e) throw e.error; }      }      return ar;  };  var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {          if (ar || !(i in from)) {              if (!ar) ar = Array.prototype.slice.call(from, 0, i);              ar[i] = from[i];          }      }      return to.concat(ar || Array.prototype.slice.call(from));  };  export function fn(arr) {      var arr2 = __spreadArray([1], __read(arr), false);  }` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArNmOACYIB2ANiQG4nsYkE86VLFaYSADwAOsAulAAzAK6sAxsNGLWACkIFKrJcgBGAgNoBdAJSgA3plChVoyPL0AmUAF5QZgIwANKAAdKF6FgDcmAC+QA)\n\nThen turning on both [`downlevelIteration`](https://www.typescriptlang.org/tsconfig/#downlevelIteration)\n and `importHelpers`:\n\nts\n\n`import { __read, __spreadArray } from \"tslib\";  export function fn(arr) {      var arr2 = __spreadArray([1], __read(arr), false);  }` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArNmOACYIB2ANiQG4nsYkE86VLFYMIqZAAdYBdNF5SBkceFaxEBArJUkAHjLmgAZgFdWAY2GiTrABSEClVqeQAjAQG0AugEpQAN6YoKAWopDooI4ATKAAvKCeAIwANKAAdJmO3gDcmAC+QA)\n\nYou can use [`noEmitHelpers`](https://www.typescriptlang.org/tsconfig/#noEmitHelpers)\n when you provide your own implementations of these functions.\n\n*   Related:\n    *   [`noEmitHelpers`](https://www.typescriptlang.org/tsconfig/#noEmitHelpers)\n        \n    *   [`downlevelIteration`](https://www.typescriptlang.org/tsconfig/#downlevelIteration)\n        \n*   Released:\n    \n    [2.1](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-1.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#inlineSourceMap)\n Inline Source Map - `inlineSourceMap`\n\nWhen set, instead of writing out a `.js.map` file to provide source maps, TypeScript will embed the source map content in the `.js` files. Although this results in larger JS files, it can be convenient in some scenarios. For example, you might want to debug JS files on a webserver that doesn’t allow `.map` files to be served.\n\nMutually exclusive with [`sourceMap`](https://www.typescriptlang.org/tsconfig/#sourceMap)\n.\n\nFor example, with this TypeScript:\n\nts\n\n`   const helloWorld = \"hi\";  console.log(helloWorld);   `\n\nConverts to this JavaScript:\n\nts\n\n`\"use strict\";  const helloWorld = \"hi\";  console.log(helloWorld);` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAGNYDtJ1RoBTAGzNgHVYAnMgE1AF5QAiaVNgbh30lhkSAOkoBzABSkK1OowCU3IA)\n\nThen enable building it with `inlineSourceMap` enabled there is a comment at the bottom of the file which includes a source-map for the file.\n\nts\n\n`   \"use strict\";  const helloWorld = \"hi\";  console.log(helloWorld);  //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMifQ==   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEEsDsBsYKYGUD2BXATgYwQWQIYAOAUCBAM4AWKA7gKIC2kALsVitOc6JQrLCgDqKDLAAmoALygARJUgyA3Gw7kUsBADoBAcwAUvfkJHiAlIqA)\n\n*   Released:\n    \n    [1.5](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-5.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#inlineSources)\n Inline Sources - `inlineSources`\n\nWhen set, TypeScript will include the original content of the `.ts` file as an embedded string in the source map (using the source map’s `sourcesContent` property). This is often useful in the same cases as [`inlineSourceMap`](https://www.typescriptlang.org/tsconfig/#inlineSourceMap)\n.\n\nRequires either [`sourceMap`](https://www.typescriptlang.org/tsconfig/#sourceMap)\n or [`inlineSourceMap`](https://www.typescriptlang.org/tsconfig/#inlineSourceMap)\n to be set.\n\nFor example, with this TypeScript:\n\nts\n\n`   const helloWorld = \"hi\";  console.log(helloWorld);   `[Try](https://www.typescriptlang.org/play/#code/MYewdgzgLgBAFgUwDZJAdRAJyQExgXhgCI4BLIgbgChRIQkEA6VAcwApEV0tcBKCoA)\n\nBy default converts to this JavaScript:\n\nts\n\n`\"use strict\";  const helloWorld = \"hi\";  console.log(helloWorld);` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAGNYDtJ1RoBTAGzNgHVYAnMgE1AF5QAiaVNgbh30lhkSAOkoBzABSkK1OowCU3IA)\n\nThen enable building it with `inlineSources` and [`inlineSourceMap`](https://www.typescriptlang.org/tsconfig/#inlineSourceMap)\n enabled there is a comment at the bottom of the file which includes a source-map for the file. Note that the end is different from the example in [`inlineSourceMap`](https://www.typescriptlang.org/tsconfig/#inlineSourceMap)\n because the source-map now contains the original source code also.\n\nts\n\n`   \"use strict\";  const helloWorld = \"hi\";  console.log(helloWorld);  //# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDO0FBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBoZWxsb1dvcmxkID0gXCJoaVwiO1xuY29uc29sZS5sb2coaGVsbG9Xb3JsZCk7Il19   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEEsDsBsYKYGUD2BXATgYwQZwFAgQzzTLrYICyAhgA6Fji4AWKA7gKIC2kALviwpouPqBYJYsFAHUUGWABNQAXlAAiFpHUBuQcNwpYCAHTSA5gAoJU2fKUBKHUA)\n\n*   Released:\n    \n    [1.5](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-5.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#mapRoot)\n Map Root - `mapRoot`\n\nSpecify the location where debugger should locate map files instead of generated locations. This string is treated verbatim inside the source-map, for example:\n\n`   {    \"[compilerOptions](https://www.typescriptlang.org/tsconfig#compilerOptions) \": {      \"[sourceMap](https://www.typescriptlang.org/tsconfig#sourceMap) \": true,      \"[mapRoot](https://www.typescriptlang.org/tsconfig#mapRoot) \": \"https://my-website.com/debug/sourcemaps/\"    }  }   `\n\nWould declare that `index.js` will have sourcemaps at `https://my-website.com/debug/sourcemaps/index.js.map`.\n\n*   Released:\n    \n    [1.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#newLine)\n New Line - `newLine`\n\nSpecify the end of line sequence to be used when emitting files: ‘CRLF’ (dos) or ‘LF’ (unix).\n\n*   Default:\n    \n    `lf`\n    \n*   Allowed:\n    *   `crlf`\n        \n    *   `lf`\n        \n*   Released:\n    \n    [1.5](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-5.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#noEmit)\n No Emit - `noEmit`\n\nDo not emit compiler output files like JavaScript source code, source-maps or declarations.\n\nThis makes room for another tool like [Babel](https://babeljs.io/)\n, or [swc](https://github.com/swc-project/swc)\n to handle converting the TypeScript file to a file which can run inside a JavaScript environment.\n\nYou can then use TypeScript as a tool for providing editor integration, and as a source code type-checker.\n\n*   Released:\n    \n    [1.5](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-5.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#noEmitHelpers)\n No Emit Helpers - `noEmitHelpers`\n\nInstead of importing helpers with [`importHelpers`](https://www.typescriptlang.org/tsconfig/#importHelpers)\n, you can provide implementations in the global scope for the helpers you use and completely turn off emitting of helper functions.\n\nFor example, using this `async` function in ES5 requires a `await`\\-like function and `generator`\\-like function to run:\n\nts\n\n`   const getAPI = async (url: string) => {    // Get API    return {};  };   `[Try](https://www.typescriptlang.org/play/#code/MYewdgzgLgBA5gUygQQAoEkYF4YEMICeYwMAFAK4BOANgFwzSUCWYcAlNgHwwDeAUDBgB6ITADiSGGnQCYlJFTC8AvgG4+aoA)\n\nWhich creates quite a lot of JavaScript:\n\nts\n\n`\"use strict\";  var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {      function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }      return new (P || (P = Promise))(function (resolve, reject) {          function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }          function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }          function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }          step((generator = generator.apply(thisArg, _arguments || [])).next());      });  };  var __generator = (this && this.__generator) || function (thisArg, body) {      var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);      return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;      function verb(n) { return function (v) { return step([n, v]); }; }      function step(op) {          if (f) throw new TypeError(\"Generator is already executing.\");          while (g && (g = 0, op[0] && (_ = 0)), _) try {              if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;              if (y = 0, t) op = [op[0] & 2, t.value];              switch (op[0]) {                  case 0: case 1: t = op; break;                  case 4: _.label++; return { value: op[1], done: false };                  case 5: _.label++; y = op[1]; op = [0]; continue;                  case 7: op = _.ops.pop(); _.trys.pop(); continue;                  default:                      if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }                      if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }                      if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }                      if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }                      if (t[2]) _.ops.pop();                      _.trys.pop(); continue;              }              op = body.call(thisArg, _);          } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }          if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };      }  };  var getAPI = function (url) { return __awaiter(void 0, void 0, void 0, function () {      return __generator(this, function (_a) {          // Get API          return [2 /*return*/, {}];      });  }); };` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArJgMawB2k6op6AggAoCSoALyg8kAJ7MGoABQBXAgBtKbAqmZEAlEIB8oAN6ZQoHAHEyoXn0OgCZec30BfANyYXQA)\n\nWhich can be switched out with your own globals via this flag:\n\nts\n\n`\"use strict\";  var getAPI = function (url) { return __awaiter(void 0, void 0, void 0, function () {      return __generator(this, function (_a) {          // Get API          return [2 /*return*/, {}];      });  }); };` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAgughgE4DmApugFyiIDKArNmOAHawoYASJANgA4kGRMAY1hNI6UKXQBBAAoBJUAF5QeSAE8mQ0AAoArgS6VxBVEyIBKZQD5QAb0yhQOAOJlQc+Y9AEyBpvYAvgDcmCFAA)\n\n*   Related:\n    *   [`importHelpers`](https://www.typescriptlang.org/tsconfig/#importHelpers)\n        \n*   Released:\n    \n    [1.5](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-5.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#noEmitOnError)\n No Emit On Error - `noEmitOnError`\n\nDo not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported.\n\nThis defaults to `false`, making it easier to work with TypeScript in a watch-like environment where you may want to see results of changes to your code in another environment before making sure all errors are resolved.\n\n*   Released:\n    \n    [1.4](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-4.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#outDir)\n Out Dir - `outDir`\n\nIf specified, `.js` (as well as `.d.ts`, `.js.map`, etc.) files will be emitted into this directory. The directory structure of the original source files is preserved; see [`rootDir`](https://www.typescriptlang.org/tsconfig/#rootDir)\n if the computed root is not what you intended.\n\nIf not specified, `.js` files will be emitted in the same directory as the `.ts` files they were generated from:\n\nsh\n\n`   $ tsc  example  ├── index.js  └── index.ts   `\n\nWith a `tsconfig.json` like this:\n\n`   {    \"[compilerOptions](https://www.typescriptlang.org/tsconfig#compilerOptions) \": {      \"[outDir](https://www.typescriptlang.org/tsconfig#outDir) \": \"dist\"    }  }   `\n\nRunning `tsc` with these settings moves the files into the specified `dist` folder:\n\nsh\n\n`   $ tsc  example  ├── dist  │   └── index.js  ├── index.ts  └── tsconfig.json   `\n\n*   Related:\n    *   [`out`](https://www.typescriptlang.org/tsconfig/#out)\n        \n    *   [`outFile`](https://www.typescriptlang.org/tsconfig/#outFile)\n        \n*   Released:\n    \n    [1.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#outFile)\n Out File - `outFile`\n\nIf specified, all _global_ (non-module) files will be concatenated into the single output file specified.\n\nIf `module` is `system` or `amd`, all module files will also be concatenated into this file after all global content.\n\nNote: `outFile` cannot be used unless `module` is `None`, `System`, or `AMD`. This option _cannot_ be used to bundle CommonJS or ES6 modules.\n\n*   Related:\n    *   [`out`](https://www.typescriptlang.org/tsconfig/#out)\n        \n    *   [`outDir`](https://www.typescriptlang.org/tsconfig/#outDir)\n        \n*   Released:\n    \n    [1.6](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-6.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#preserveConstEnums)\n Preserve Const Enums - `preserveConstEnums`\n\nDo not erase `const enum` declarations in generated code. `const enum`s provide a way to reduce the overall memory footprint of your application at runtime by emitting the enum value instead of a reference.\n\nFor example with this TypeScript:\n\nts\n\n`   const enum Album {    JimmyEatWorldFutures = 1,    TubRingZooHypothesis = 2,    DogFashionDiscoAdultery = 3,  }  const selectedAlbum = Album.JimmyEatWorldFutures;  if (selectedAlbum === Album.JimmyEatWorldFutures) {    console.log(\"That is a great choice.\");  }   `[Try](https://www.typescriptlang.org/play/#code/MYewdgzgLgBApmArgWxgQQDYCMUwN4BQMMAUgJbLICeAogIZQDqIAThgCYBiiUiLcEGAF4YARgA0RGABVEWAEpkwAcwBaIEAAkqABxBQAFgLKCRAJknEAIiGWc6EA2XBWToNO0QYocFlWEwAMySAL4EBKCQsBBwGHDAPuyYOKgiySgAdOSUtAzMbFw8fAIA3ARkAGYwABQxcQlwSdi4Qq3ozchZFNT0TKwc3Lz8EACU+FKRECBxGRi21QBE0gYMMCYwdDDK-KvABiBkwHAZCyNlIUA)\n\nThe default `const enum` behavior is to convert any `Album.Something` to the corresponding number literal, and to remove a reference to the enum from the JavaScript completely.\n\nts\n\n`\"use strict\";  const selectedAlbum = 1 /* Album.JimmyEatWorldFutures */;  if (selectedAlbum === 1 /* Album.JimmyEatWorldFutures */) {      console.log(\"That is a great choice.\");  }` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAGNYDtJ1QBTPAV2VAEEAbAIwtAG9NRQApVZZAT0QEN0AdVgAnGgBMAYmXRlRxSKAC8oAIwAaVqAAqZOgCVUeAOYAtWLAASPAA6x00RaiWqATFrYARWCan8YVHwvF1wqCTIadGJRHhVQAGYtAF9MHHxCUEhiGmJsaIlaBkpVIooAOk5uPkERcWlZeUUAbkxUADNQAAps3PziQvpGZRHqIeRKrl4BYTFJGTkFSABKZm1cAlhc8ppfLoAiHWhBUBdQflATBRPsOFRsYnL95dbkoA)\n\nWith `preserveConstEnums` set to `true`, the `enum` exists at runtime and the numbers are still emitted.\n\nts\n\n`\"use strict\";  var Album;  (function (Album) {      Album[Album[\"JimmyEatWorldFutures\"] = 1] = \"JimmyEatWorldFutures\";      Album[Album[\"TubRingZooHypothesis\"] = 2] = \"TubRingZooHypothesis\";      Album[Album[\"DogFashionDiscoAdultery\"] = 3] = \"DogFashionDiscoAdultery\";  })(Album || (Album = {}));  const selectedAlbum = 1 /* Album.JimmyEatWorldFutures */;  if (selectedAlbum === 1 /* Album.JimmyEatWorldFutures */) {      console.log(\"That is a great choice.\");  }` [Try](https://www.typescriptlang.org/play/#code/PTAEAEAcCcFMGdbQG6wMIHsB28AuBRLAVwFt4AuUXaI2AKBAngAsMB3fEgS1zoGNseULGIlQAQQA2AI1KgA3nVCgAUlxIkAnvgCGuAOoZokgCYAxIriJx4oALygAjABoloACpFpAJS5YA5gBaGBgAEpqQGLjMCFy2DgBMrsoAIhj+ZjosXNgpcQLiJkSSuEia9qAAzK4AvnT8grigiJKwfKUmUrJiDl2kAHRqGtp6hsbmltYIANx0XABmoAAULW0dfT12vTIDQ1q6BkamFlY2AJQKbgI4GK39kulLAETuzHqgcaA6oP5w73ysLh8WD9J5nWY1IA)\n\nThis essentially makes such `const enums` a source-code feature only, with no runtime traces.\n\n*   Default:\n    \n    `true` if [`isolatedModules`](https://www.typescriptlang.org/tsconfig/#isolatedModules)\n    ; `false` otherwise.\n    \n*   Released:\n    \n    [1.4](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-4.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#removeComments)\n Remove Comments - `removeComments`\n\nStrips all comments from TypeScript files when converting into JavaScript. Defaults to `false`.\n\nFor example, this is a TypeScript file which has a JSDoc comment:\n\nts\n\n`   /** The translation of 'Hello world' into Portuguese */  export const helloWorldPTBR = \"Olá Mundo\";   `\n\nWhen `removeComments` is set to `true`:\n\nts\n\n`export const helloWorldPTBR = \"Olá Mundo\";` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggJwKbKwBu+AwrMsvgHbqQBco6uArvtgFSegAq0+ZrgCGNSABth6VLBqhYAM1AByABL5x42KHixc4gCbLQqOtoAKe9KwDm7SIM7BM+AB4AHK6ADGsyOlABTVgAdT1Dc14AIQAlUABeUAAiAHlxAEPQAFlWGgNYJIBuIA)\n\nWithout setting `removeComments` or having it as `false`:\n\nts\n\n`/** The translation of 'Hello world' into Portuguese */  export const helloWorldPTBR = \"Olá Mundo\";` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggJwKbKwBu+AwrMsvgHbqQBcoAZgIYA2k+2AVD6ABVo+UOlysakdq3SpYNULGagA5AAl87drFDxYudgBMVoVHR0AFfegCuAcxv4uoHsEz4AHgAdroAMbykOigwlqwAOr6RhYCAEIASqAAvKAARADy7ACHoACyNjSGsKkA3EA)\n\nThis means that your comments will show up in the JavaScript code.\n\n*   Released:\n    \n    [1.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#sourceMap)\n Source Map - `sourceMap`\n\nEnables the generation of [sourcemap files](https://developer.mozilla.org/docs/Tools/Debugger/How_to/Use_a_source_map)\n. These files allow debuggers and other tools to display the original TypeScript source code when actually working with the emitted JavaScript files. Source map files are emitted as `.js.map` (or `.jsx.map`) files next to the corresponding `.js` output file.\n\nThe `.js` files will in turn contain a sourcemap comment to indicate where the files are to external tools, for example:\n\nts\n\n`   // helloWorld.ts  export declare const helloWorld = \"hi\";   `\n\nCompiling with `sourceMap` set to `true` creates the following JavaScript file:\n\njs\n\n`   // helloWorld.js  \"use strict\";  Object.defineProperty(exports, \"__esModule\", { value: true });  exports.helloWorld = \"hi\";  //# sourceMappingURL=// helloWorld.js.map   `\n\nAnd this also generates this json map:\n\njson\n\n`   // helloWorld.js.map  {    \"version\": 3,    \"file\": \"ex.js\",    \"sourceRoot\": \"\",    \"sources\": [\"../ex.ts\"],    \"names\": [],    \"mappings\": \";;AAAa,QAAA,UAAU,GAAG,IAAI,CAAA\"  }   `\n\n*   Released:\n    \n    [1.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#sourceRoot)\n Source Root - `sourceRoot`\n\nSpecify the location where a debugger should locate TypeScript files instead of relative source locations. This string is treated verbatim inside the source-map where you can use a path or a URL:\n\n`   {    \"[compilerOptions](https://www.typescriptlang.org/tsconfig#compilerOptions) \": {      \"[sourceMap](https://www.typescriptlang.org/tsconfig#sourceMap) \": true,      \"[sourceRoot](https://www.typescriptlang.org/tsconfig#sourceRoot) \": \"https://my-website.com/debug/source/\"    }  }   `\n\nWould declare that `index.js` will have a source file at `https://my-website.com/debug/source/index.ts`.\n\n*   Released:\n    \n    [1.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#stripInternal)\n Strip Internal - `stripInternal`\n\nDo not emit declarations for code that has an `@internal` annotation in its JSDoc comment. This is an internal compiler option; use at your own risk, because the compiler does not check that the result is valid. If you are searching for a tool to handle additional levels of visibility within your `d.ts` files, look at [api-extractor](https://api-extractor.com/)\n.\n\nts\n\n`   /**   * Days available in a week   * @internal   */  export const daysInAWeek = 7;  /** Calculate how much someone earns in a week */  export function weeklySalary(dayRate: number) {    return daysInAWeek * dayRate;  }   `[Try](https://www.typescriptlang.org/play/#code/PQKhCgAIUgRBDAngZ0vAbvAlgG3gIxwFNIsA7NSAdyKIGsoYABcgFyICcz4dHhwiADwAOAew6tIAY1FlkkgCZJkASTIBBAOq06kALyQA7AG5w4UDADCPKQFc87SAAtRVSAFtbUp5GSj3RLIkRPBcqOSUNPTQ-EJiEpAAZrZkUqxYstQ6OIgAyjyhiAAUSogASvDsAFyQZLbu+JwAlJAA3lCQHESstlyQpaoa2tEwpRXspgC+QA)\n\nWith the flag set to `false` (default):\n\nts\n\n`/**   * Days available in a week   * @internal   */  export declare const daysInAWeek = 7;  /** Calculate how much someone earns in a week */  export declare function weeklySalary(dayRate: number): number;` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgF3QUwCYDFUAbLALlFQDscsAPAOhzvUgCgQIYEUM2xxqAxoQCGAJ2HpUsCmwBUslqFmgAIsICekUMIBuwosIBGxchW2h4WLAGtFy8JWyiKwwneAtaAB1ij0oAWlIfxwNSABJCgBBAHUra1AAXlAAdgBuFjllAGFXAQBXEWxQOHhQZHyBaFBIWGQsaSxQLDEKLUpzSxslD29ffwAzfIoBSWkLeMJ1AGVXMXUAClD1ACUJUlAKfORDLFEASlAAb0VQUSx0fOdQZYjouO7lZbXsDIBfIA)\n\nWith `stripInternal` set to `true` the `d.ts` emitted will be redacted.\n\nts\n\n`/** Calculate how much someone earns in a week */  export declare function weeklySalary(dayRate: number): number;` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcBcCcEsAO8B20CmsUEMA2AoECSACwHsB3AUQFt5oMATAMXl3QC5RVH0APAHSMB0SITBRy1OtHEReAY1zZY2aPDIpCAKm35Q20ABFsAT0ihsAN2xtsAI3bcUl0BXToA1vsPhUGLDwfYHx+RDJYaFAFTRhQRjNIAEkUAEEAdQ9PUABeUAB2AG58HUMAYTwFAFdlDFApUBoqhRJQSDIadE10UHQVFAtUV3cvAxCwiKiAMyqUBXVNNyzcUwBlPBVTAAoE0wAlNU5QFCqae0wASlAAb31QWHRoKqx4xJSMrINX-cPigF8gA)\n\nThe JavaScript output is still the same.\n\n*   Internal\n*   Released:\n    \n    [1.5](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-5.html)\n    \n\n[#](https://www.typescriptlang.org/tsconfig/#JavaScript_Support_6247)\nJavaScript Support\n----------------------------------------------------------------------------------------\n\n### [#](https://www.typescriptlang.org/tsconfig/#allowJs)\n Allow JS - `allowJs`\n\nAllow JavaScript files to be imported inside your project, instead of just `.ts` and `.tsx` files. For example, this JS file:\n\njs\n\n`   // @filename: card.js  export const defaultCardDeck = \"Heart\";   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAxsgTgCYB0AVgM4BQ8AHgA4D2eALjvYmSwfJMgK6xMAwvgIAReNgDWoALygARAAl4+JvIDcQA)\n\nWhen imported into a TypeScript file will raise an error:\n\nts\n\n`   // @filename: index.ts  import { defaultCardDeck } from \"./card\";  console.log(defaultCardDeck);   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAMB2AUCBAGYCWANpAHYCGAtpKgMbXQAmAdAFaJ61ysBXCu0gAPAA4IALonatIRakKkBhFqwAikRgGtQAXlAAiABKQWUowG4CYALQPGAqQ7u3i5KnQagSleaLsMngktJLQUqAA3qDyispqbFq6oAC+oETwtMbswMxs1nh4jHCUiHDCZHAA5gAUcUpkqurJOgCUVkA)\n\nImports fine with `allowJs` enabled:\n\nts\n\n`   // @filename: index.ts  import { defaultCardDeck } from \"./card\";  console.log(defaultCardDeck);   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEDMEsBsFMB2BDAtvAXKAxsgTgCYB0AVgM4BQqA9gQK4JHwAeADtXgC5lEHyTIGnAML4CAEXjYA1qAC8oAEQAJePk6KA3BRCgAtAex1OBvTrDhksWNQDuAKUq6ocJGkyhoiPsyLcK0KjsXKAA3qB8AkKihJIyoAC+oJB41KhKRMC4hFoUFNjUiGTUjDYA5gAUkYKwImJx0gCUmkA)\n\nThis flag can be used as a way to incrementally add TypeScript files into JS projects by allowing the `.ts` and `.tsx` files to live along-side existing JavaScript files.\n\nIt can also be used along-side [`declaration`](https://www.typescriptlang.org/tsconfig/#declaration)\n and [`emitDeclarationOnly`](https://www.typescriptlang.org/tsconfig/#emitDeclarationOnly)\n to [create declarations for JS files](https://www.typescriptlang.org/docs/handbook/declaration-files/dts-from-js.html)\n.\n\n*   Related:\n    *   [`checkJs`](https://www.typescriptlang.org/tsconfig/#checkJs)\n        \n    *   [`emitDeclarationOnly`](https://www.typescriptlang.org/tsconfig/#emitDeclarationOnly)\n        \n*   Released:\n    \n    [1.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-8.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#checkJs)\n Check JS - `checkJs`\n\nWorks in tandem with [`allowJs`](https://www.typescriptlang.org/tsconfig/#allowJs)\n. When `checkJs` is enabled then errors are reported in JavaScript files. This is the equivalent of including `// @ts-check` at the top of all JavaScript files which are included in your project.\n\nFor example, this is incorrect JavaScript according to the `parseFloat` type definition which comes with TypeScript:\n\njs\n\n`   // parseFloat only takes a string  module.exports.pi = parseFloat(3.142);   `\n\nWhen imported into a TypeScript module:\n\nts\n\n`   // @filename: constants.js  module.exports.pi = parseFloat(3.142);  // @filename: index.ts  import { pi } from \"./constants\";  console.log(pi);   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEEMBtoewO4CkDOAoEEBmBLaBTAO0gFt8AuUAYzkJQBdJD6UA6AK3RLgBMBXAq3wAPAA5wATi1aicoALyhRkCSnwAxeJHoAKAMysAjABYATAEoA3GgxhwuAsTKUchHiNYs0OEuKmgAbyU5AF9QLAk4ElAAIlZgGjpGZhQY60SUOEF4AHMdWSsgA)\n\nYou will not get any errors. However, if you turn on `checkJs` then you will get error messages from the JavaScript file.\n\nts\n\n`   // @filename: constants.js  module.exports.pi = parseFloat(3.142);  Argument of type 'number' is not assignable to parameter of type 'string'.2345Argument of type 'number' is not assignable to parameter of type 'string'.  // @filename: index.ts  import { pi } from \"./constants\";  console.log(pi);   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGYAsBWAUCBAIYA2JcA7gFYqgAu0ArpAWOAMYAWk7A1jagbNWEAGYBLEpAB2RALaRU7ONMR0i0uogB0NPHLgATRlO2QAHgAcEW7ZfGgAvKEtEkkAGLkidABQZtAEYsNABKAG48EXAJKVkFVHFpQwttLTxxOWtoOlAAbxcHAF9QUXg5UAAibWBlVXVNRErIusQ4U3IAc197CKA)\n\n*   Related:\n    *   [`allowJs`](https://www.typescriptlang.org/tsconfig/#allowJs)\n        \n    *   [`emitDeclarationOnly`](https://www.typescriptlang.org/tsconfig/#emitDeclarationOnly)\n        \n*   Released:\n    \n    [2.3](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-3.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#maxNodeModuleJsDepth)\n Max Node Module JS Depth - `maxNodeModuleJsDepth`\n\nThe maximum dependency depth to search under `node_modules` and load JavaScript files.\n\nThis flag can only be used when [`allowJs`](https://www.typescriptlang.org/tsconfig/#allowJs)\n is enabled, and is used if you want to have TypeScript infer types for all of the JavaScript inside your `node_modules`.\n\nIdeally this should stay at 0 (the default), and `d.ts` files should be used to explicitly define the shape of modules. However, there are cases where you may want to turn this on at the expense of speed and potential accuracy.\n\n*   Released:\n    \n    [2.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html)\n    \n\n[#](https://www.typescriptlang.org/tsconfig/#Editor_Support_6249)\nEditor Support\n--------------------------------------------------------------------------------\n\n### [#](https://www.typescriptlang.org/tsconfig/#disableSizeLimit)\n Disable Size Limit - `disableSizeLimit`\n\nTo avoid a possible memory bloat issues when working with very large JavaScript projects, there is an upper limit to the amount of memory TypeScript will allocate. Turning this flag on will remove the limit.\n\n*   Released:\n    \n    [2.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#plugins)\n Plugins - `plugins`\n\nList of language service plugins to run inside the editor.\n\nLanguage service plugins are a way to provide additional information to a user based on existing TypeScript files. They can enhance existing messages between TypeScript and an editor, or to provide their own error messages.\n\nFor example:\n\n*   [ts-sql-plugin](https://github.com/xialvjun/ts-sql-plugin#readme)\n     — Adds SQL linting with a template strings SQL builder.\n*   [typescript-styled-plugin](https://github.com/Microsoft/typescript-styled-plugin)\n     — Provides CSS linting inside template strings .\n*   [typescript-eslint-language-service](https://github.com/Quramy/typescript-eslint-language-service)\n     — Provides eslint error messaging and fix-its inside the compiler’s output.\n*   [ts-graphql-plugin](https://github.com/Quramy/ts-graphql-plugin)\n     — Provides validation and auto-completion inside GraphQL query template strings.\n\nVS Code has the ability for a extension to [automatically include language service plugins](https://code.visualstudio.com/api/references/contribution-points#contributes.typescriptServerPlugins)\n, and so you may have some running in your editor without needing to define them in your `tsconfig.json`.\n\n*   Released:\n    \n    [2.2](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html)\n    \n\n[#](https://www.typescriptlang.org/tsconfig/#Interop_Constraints_6252)\nInterop Constraints\n------------------------------------------------------------------------------------------\n\n### [#](https://www.typescriptlang.org/tsconfig/#allowSyntheticDefaultImports)\n Allow Synthetic Default Imports - `allowSyntheticDefaultImports`\n\nWhen set to true, `allowSyntheticDefaultImports` allows you to write an import like:\n\nts\n\n`   import React from \"react\";   `\n\ninstead of:\n\nts\n\n`   import * as React from \"react\";   `\n\nWhen the module **does not** explicitly specify a default export.\n\nFor example, without `allowSyntheticDefaultImports` as true:\n\nts\n\n`   // @filename: utilFunctions.js  const getStringLength = (str) => str.length;  module.exports = {    getStringLength,  };  // @filename: index.ts  import utils from \"./utilFunctions\";  Module '\"/home/runner/work/TypeScript-Website/TypeScript-Website/packages/typescriptlang-org/utilFunctions\"' has no default export.1192Module '\"/home/runner/work/TypeScript-Website/TypeScript-Website/packages/typescriptlang-org/utilFunctions\"' has no default export.  const count = utils.getStringLength(\"Check JS\");   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwCYCsBOdacMAoECAYwAtIyBrAKURLHAEMAbNuAdwaYkkQBZOABMArm0gBJAHYAXGHAAOqAGbtEkPuFUBLSTJYBbSKjFz9AMTEyyFuDMQA6AFaNS4GXClGlbXWS6cgCCMgCeahpaZA6IcqAA5pByAMpy0LoyCQAykFlyFKAAvKAAFHHQAJTFAHygFU4GCQUA3ERERqISkE6QAB5KCHKIxaAA3kSgiclpGVm5+RQANEQAvm3aegbGpqCZIv1Ow0S6vkOg5vojqvBGoABETsCXbNa29o73GzGO8TE28RKL2cSVS6UyOTyzQopXuAGEqLRQHQUvdKi0gA)\n\nThis code raises an error because there isn’t a `default` object which you can import. Even though it feels like it should. For convenience, transpilers like Babel will automatically create a default if one isn’t created. Making the module look a bit more like:\n\njs\n\n`   // @filename: utilFunctions.js  const getStringLength = (str) => str.length;  const allFunctions = {    getStringLength,  };  module.exports = allFunctions;  module.exports.default = allFunctions;   `\n\nThis flag does not affect the JavaScript emitted by TypeScript, it’s only for the type checking. This option brings the behavior of TypeScript in-line with Babel, where extra code is emitted to make using a default export of a module more ergonomic.\n\n*   Default:\n    \n    `true` if [`esModuleInterop`](https://www.typescriptlang.org/tsconfig/#esModuleInterop)\n     is enabled, [`module`](https://www.typescriptlang.org/tsconfig/#module)\n     is `system`, or [`moduleResolution`](https://www.typescriptlang.org/tsconfig/#module-resolution)\n     is `bundler`; `false` otherwise.\n    \n*   Related:\n    *   [`esModuleInterop`](https://www.typescriptlang.org/tsconfig/#esModuleInterop)\n        \n*   Released:\n    \n    [1.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-8.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#erasableSyntaxOnly)\n Erasable Syntax Only - `erasableSyntaxOnly`\n\nNode.js [supports running TypeScript files directly](https://nodejs.org/api/typescript.html#type-stripping)\n as of v23.6; however, only TypeScript-specific syntax that does not have runtime semantics are supported under this mode. In other words, it must be possible to easily _erase_ any TypeScript-specific syntax from a file, leaving behind a valid JavaScript file.\n\nThat means the following constructs are not supported:\n\n*   `enum` declarations\n*   `namespace`s and `module`s with runtime code\n*   parameter properties in classes\n*   Non-ECMAScript `import =` and `export =` assignments\n\nts\n\n``   // ❌ error: An `import ... = require(...)` alias  import foo = require(\"foo\");  // ❌ error: A namespace with runtime code.  namespace container {    foo.method();    export type Bar = string;  }  // ❌ error: An `import =` alias  import Bar = container.Bar;  class Point {    // ❌ error: Parameter properties    constructor(public x: number, public y: number) {}  }  // ❌ error: An `export =` assignment.  export = Point;  // ❌ error: An enum declaration.  enum Direction {    Up,    Down,    Left,    Right,  }   ``\n\nSimilar tools like [ts-blank-space](https://github.com/bloomberg/ts-blank-space)\n or [Amaro](https://github.com/nodejs/amaro)\n (the underlying library for type-stripping in Node.js) have the same limitations. These tools will provide helpful error messages if they encounter code that doesn’t meet these requirements, but you still won’t find out your code doesn’t work until you actually try to run it.\n\nThe `--erasableSyntaxOnly` flag will cause TypeScript to error on most TypeScript-specific constructs that have runtime behavior.\n\nts\n\n`   class C {      constructor(public x: number) { }      //          ~~~~~~~~~~~~~~~~      // error! This syntax is not allowed when 'erasableSyntaxOnly' is enabled.      }  }   `\n\nTypically, you will want to combine this flag with the `--verbatimModuleSyntax`, which ensures that a module contains the appropriate import syntax, and that import elision does not take place.\n\n### [#](https://www.typescriptlang.org/tsconfig/#esModuleInterop)\n ES Module Interop - `esModuleInterop`\n\nBy default (with `esModuleInterop` false or not set) TypeScript treats CommonJS/AMD/UMD modules similar to ES6 modules. In doing this, there are two parts in particular which turned out to be flawed assumptions:\n\n*   a namespace import like `import * as moment from \"moment\"` acts the same as `const moment = require(\"moment\")`\n    \n*   a default import like `import moment from \"moment\"` acts the same as `const moment = require(\"moment\").default`\n    \n\nThis mis-match causes these two issues:\n\n*   the ES6 modules spec states that a namespace import (`import * as x`) can only be an object, by having TypeScript treating it the same as `= require(\"x\")` then TypeScript allowed for the import to be treated as a function and be callable. That’s not valid according to the spec.\n    \n*   while accurate to the ES6 modules spec, most libraries with CommonJS/AMD/UMD modules didn’t conform as strictly as TypeScript’s implementation.\n    \n\nTurning on `esModuleInterop` will fix both of these problems in the code transpiled by TypeScript. The first changes the behavior in the compiler, the second is fixed by two new helper functions which provide a shim to ensure compatibility in the emitted JavaScript:\n\nts\n\n`   import * as fs from \"fs\";  import _ from \"lodash\";  fs.readFileSync(\"file.txt\", \"utf8\");  _.chunk([\"a\", \"b\", \"c\", \"d\"], 2);   `\n\nWith `esModuleInterop` disabled:\n\nts\n\n`\"use strict\";  Object.defineProperty(exports, \"__esModule\", { value: true });  const fs = require(\"fs\");  const lodash_1 = require(\"lodash\");  fs.readFileSync(\"file.txt\", \"utf8\");  lodash_1.default.chunk([\"a\", \"b\", \"c\", \"d\"], 2);` [Try](https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAgigFtA7rALYCWALhmOAKYoCy0AJgK4A2VAkpKVUgA4BcoAGYBDFiioUIhRqyqCAxtEIzIAK3TFCvZKVAAqUCJTCTQpIVAAiISisBuNFp3w9AfWEXrLRsewO0NFsAOngqEQYAMWI2AGUAT0gFAAobGKpg0gAPUisAGmsmUiEADisASkc3YIVsJkgAa2SAbSsRfOsAIw6rBR6GKwBdAoAmSqA)\n\nWith `esModuleInterop` set to `true`:\n\nts\n\n`\"use strict\";  var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {      if (k2 === undefined) k2 = k;      var desc = Object.getOwnPropertyDescriptor(m, k);      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {        desc = { enumerable: true, get: function() { return m[k]; } };      }      Object.defineProperty(o, k2, desc);  }) : (function(o, m, k, k2) {      if (k2 === undefined) k2 = k;      o[k2] = m[k];  }));  var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {      Object.defineProperty(o, \"default\", { enumerable: true, value: v });  }) : function(o, v) {      o[\"default\"] = v;  });  var __importStar = (this && this.__importStar) || (function () {      var ownKeys = function(o) {          ownKeys = Object.getOwnPropertyNames || function (o) {              var ar = [];              for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;              return ar;          };          return ownKeys(o);      };      return function (mod) {          if (mod && mod.__esModule) return mod;          var result = {};          if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);          __setModuleDefault(result, mod);          return result;      };  })();  var __importDefault = (this && this.__importDefault) || function (mod) {      return (mod && mod.__esModule) ? mod : { \"default\": mod };  };  Object.defineProperty(exports, \"__esModule\", { value: true });  const fs = __importStar(require(\"fs\"));  const lodash_1 = __importDefault(require(\"lodash\"));  fs.readFileSync(\"file.txt\", \"utf8\");  lodash_1.default.chunk([\"a\", \"b\", \"c\", \"d\"], 2);` [Try](https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAgigFtA7rALYCWALhmOAKYoCy0AJgK4A2VAkpKVUgA4URCjVlQBcoAMbRCQyACt0xQr2SlQAKlABDFKABmuvUkKgARAdMBuNEpXw1AfX3GzLRjuxW0aAwDp4VFoMAGLEbADKAJ6QEgAU5mFUvqQAHqSmADRmTKR6ABymAJTWDr4S2EyQANaxANqmWplmAEZNphJtDKYAulkATMVAA)\n\n_Note_: The namespace import `import * as fs from \"fs\"` only accounts for properties which [are owned](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty)\n (basically properties set on the object and not via the prototype chain) on the imported object. If the module you’re importing defines its API using inherited properties, you need to use the default import form (`import fs from \"fs\"`), or disable `esModuleInterop`.\n\n_Note_: You can make JS emit terser by enabling [`importHelpers`](https://www.typescriptlang.org/tsconfig/#importHelpers)\n:\n\nts\n\n`\"use strict\";  Object.defineProperty(exports, \"__esModule\", { value: true });  const tslib_1 = require(\"tslib\");  const fs = tslib_1.__importStar(require(\"fs\"));  const lodash_1 = tslib_1.__importDefault(require(\"lodash\"));  fs.readFileSync(\"file.txt\", \"utf8\");  lodash_1.default.chunk([\"a\", \"b\", \"c\", \"d\"], 2);` [Try](https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAgigFtA7rALYCWALhmOAKYoCy0AJgK4A2VAkpKVUgA4URihXslIAJKi1490mcIUasqALlABjaIQWQAVuiEj4pUACpQAQxSgAZletJCoAES2nAbjQHRoAPo2HziyMltjuaGi2AHTwVOYMAGLEbADKAJ6QagAULklUkaQAHqROADTOTKTWABxOAJQePpFq2EyQANaZANpO5qXOAEZ9TmpDDE4AumUATPVAA)\n\nEnabling `esModuleInterop` will also enable [`allowSyntheticDefaultImports`](https://www.typescriptlang.org/tsconfig/#allowSyntheticDefaultImports)\n.\n\n*   Recommended\n*   Default:\n    \n    `true` if [`module`](https://www.typescriptlang.org/tsconfig/#module)\n     is `node16`, `nodenext`, or `preserve`; `false` otherwise.\n    \n*   Related:\n    *   [`allowSyntheticDefaultImports`](https://www.typescriptlang.org/tsconfig/#allowSyntheticDefaultImports)\n        \n*   Released:\n    \n    [2.7](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#forceConsistentCasingInFileNames)\n Force Consistent Casing In File Names - `forceConsistentCasingInFileNames`\n\nTypeScript follows the case sensitivity rules of the file system it’s running on. This can be problematic if some developers are working in a case-sensitive file system and others aren’t. If a file attempts to import `fileManager.ts` by specifying `./FileManager.ts` the file will be found in a case-insensitive file system, but not on a case-sensitive file system.\n\nWhen this option is set, TypeScript will issue an error if a program tries to include a file by a casing different from the casing on disk.\n\n*   Recommended\n*   Default:\n    \n    `true`\n    \n*   Released:\n    \n    [1.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-8.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#isolatedDeclarations)\n isolatedDeclarations - `isolatedDeclarations`\n\nRequire sufficient annotation on exports so other tools can trivially generate declaration files.\n\nFor more information, see the [5.5 release notes](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-5.html#isolated-declarations)\n\n*   Released:\n    \n    [5.5](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-5.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#isolatedModules)\n Isolated Modules - `isolatedModules`\n\nWhile you can use TypeScript to produce JavaScript code from TypeScript code, it’s also common to use other transpilers such as [Babel](https://babeljs.io/)\n to do this. However, other transpilers only operate on a single file at a time, which means they can’t apply code transforms that depend on understanding the full type system. This restriction also applies to TypeScript’s `ts.transpileModule` API which is used by some build tools.\n\nThese limitations can cause runtime problems with some TypeScript features like `const enum`s and `namespace`s. Setting the `isolatedModules` flag tells TypeScript to warn you if you write certain code that can’t be correctly interpreted by a single-file transpilation process.\n\nIt does not change the behavior of your code, or otherwise change the behavior of TypeScript’s checking and emitting process.\n\nSome examples of code which does not work when `isolatedModules` is enabled.\n\n#### [](https://www.typescriptlang.org/tsconfig/#exports-of-non-value-identifiers)\nExports of Non-Value Identifiers\n\nIn TypeScript, you can import a _type_ and then subsequently export it:\n\nts\n\n`   import { someType, someFunction } from \"someModule\";  someFunction();  export { someType, someFunction };   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEDsHsFECd7XgZwFAEsC2AHZAXUAb1BWiwFMAVATxwoBpTyKAxAV0gGN8NpJQAX1AAzJFlAAiMpQCy0ACbsANhUkBuNGhltOPPpAAUASk1oKADzzxCJHbXpMdHbr35D1QA)\n\nBecause there’s no value for `someType`, the emitted `export` will not try to export it (this would be a runtime error in JavaScript):\n\njs\n\n`   export { someFunction };   `\n\nSingle-file transpilers don’t know whether `someType` produces a value or not, so it’s an error to export a name that only refers to a type.\n\n#### [](https://www.typescriptlang.org/tsconfig/#non-module-files)\nNon-Module Files\n\nIf `isolatedModules` is set, namespaces are only allowed in _modules_ (which means it has some form of `import`/`export`). An error occurs if a namespace is found in a non-module file:\n\nts\n\n`   namespace Instantiated {  Namespaces are not allowed in global script files when 'isolatedModules' is enabled. If this file is not intended to be a global script, set 'moduleDetection' to 'force' or add an empty 'export {}' statement.1280Namespaces are not allowed in global script files when 'isolatedModules' is enabled. If this file is not intended to be a global script, set 'moduleDetection' to 'force' or add an empty 'export {}' statement.    export const x = 1;  }   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygIwCYDsWBQIIBLROAGwEMAXSAEwFk4aBXUyRXAO3IFs2AHcgGNIoAJIdElch0qEqtUAG9coUJAAefBJVCC4EnetABedAG5cAXyA)\n\nThis restriction doesn’t apply to `.d.ts` files.\n\n#### [](https://www.typescriptlang.org/tsconfig/#references-to-const-enum-members)\nReferences to `const enum` members\n\nIn TypeScript, when you reference a `const enum` member, the reference is replaced by its actual value in the emitted JavaScript. Changing this TypeScript:\n\nts\n\n`   declare const enum Numbers {    Zero = 0,    One = 1,  }  console.log(Numbers.Zero + Numbers.One);   `[Try](https://www.typescriptlang.org/play/#code/CYUwxgNghgTiAEYD2A7AzgF3iFBXAtvAHIEBGIMa8A3gFDzwBaFS8AvPAAwA098A8igQcAjLwC+tZOiQQQAOghIA5gAoS+cpXnMYrANTEyFNPMEgAlAG4gA)\n\nTo this JavaScript:\n\nts\n\n`\"use strict\";  console.log(0 + 1);` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggJwKbKwBu+AwrMsvgHbqSYAm+AxgDYCGBoLsNk6ULQCuyUADlRAI3y5IoAN6ZQoAFqzYoALygADABploAPI1820AEZDAX0y9+sNvgB0bWAHMAFJOQy5Luq4mgDUEtKykC6m+ACUANxAA)\n\nWithout knowledge of the values of these members, other transpilers can’t replace the references to `Numbers`, which would be a runtime error if left alone (since there are no `Numbers` object at runtime). Because of this, when `isolatedModules` is set, it is an error to reference an ambient `const enum` member.\n\n*   Default:\n    \n    `true` if [`verbatimModuleSyntax`](https://www.typescriptlang.org/tsconfig/#verbatimModuleSyntax)\n    ; `false` otherwise.\n    \n*   Released:\n    \n    [1.5](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-5.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#preserveSymlinks)\n Preserve Symlinks - `preserveSymlinks`\n\nThis is to reflect the same flag in Node.js; which does not resolve the real path of symlinks.\n\nThis flag also exhibits the opposite behavior to Webpack’s `resolve.symlinks` option (i.e. setting TypeScript’s `preserveSymlinks` to true parallels setting Webpack’s `resolve.symlinks` to false, and vice-versa).\n\nWith this enabled, references to modules and packages (e.g. `import`s and `/// <reference type=\"...\" />` directives) are all resolved relative to the location of the symbolic link file, rather than relative to the path that the symbolic link resolves to.\n\n*   Released:\n    \n    [2.5](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-5.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#verbatimModuleSyntax)\n Verbatim Module Syntax - `verbatimModuleSyntax`\n\nBy default, TypeScript does something called _import elision_. Basically, if you write something like\n\nts\n\n`   import { Car } from \"./car\";  export function drive(car: Car) {    // ...  }   `\n\nTypeScript detects that you’re only using an import for types and drops the import entirely. Your output JavaScript might look something like this:\n\njs\n\n`   export function drive(car) {    // ...  }   `\n\nMost of the time this is good, because if `Car` isn’t a value that’s exported from `./car`, we’ll get a runtime error.\n\nBut it does add a layer of complexity for certain edge cases. For example, notice there’s no statement like `import \"./car\";` - the import was dropped entirely. That actually makes a difference for modules that have side-effects or not.\n\nTypeScript’s emit strategy for JavaScript also has another few layers of complexity - import elision isn’t always just driven by how an import is used - it often consults how a value is declared as well. So it’s not always clear whether code like the following\n\nts\n\n`   export { Car } from \"./car\";   `\n\nshould be preserved or dropped. If `Car` is declared with something like a `class`, then it can be preserved in the resulting JavaScript file. But if `Car` is only declared as a `type` alias or `interface`, then the JavaScript file shouldn’t export `Car` at all.\n\nWhile TypeScript might be able to make these emit decisions based on information from across files, not every compiler can.\n\nThe `type` modifier on imports and exports helps with these situations a bit. We can make it explicit whether an import or export is only being used for type analysis, and can be dropped entirely in JavaScript files by using the `type` modifier.\n\nts\n\n`   // This statement can be dropped entirely in JS output  import type * as car from \"./car\";  // The named import/export 'Car' can be dropped in JS output  import { type Car } from \"./car\";  export { type Car } from \"./car\";   `\n\n`type` modifiers are not quite useful on their own - by default, module elision will still drop imports, and nothing forces you to make the distinction between `type` and plain imports and exports. So TypeScript has the flag `--importsNotUsedAsValues` to make sure you use the `type` modifier, `--preserveValueImports` to prevent _some_ module elision behavior, and `--isolatedModules` to make sure that your TypeScript code works across different compilers. Unfortunately, understanding the fine details of those 3 flags is hard, and there are still some edge cases with unexpected behavior.\n\nTypeScript 5.0 introduces a new option called `--verbatimModuleSyntax` to simplify the situation. The rules are much simpler - any imports or exports without a `type` modifier are left around. Anything that uses the `type` modifier is dropped entirely.\n\nts\n\n`   // Erased away entirely.  import type { A } from \"a\";  // Rewritten to 'import { b } from \"bcd\";'  import { b, type c, type d } from \"bcd\";  // Rewritten to 'import {} from \"xyz\";'  import { type xyz } from \"xyz\";   `\n\nWith this new option, what you see is what you get.\n\nThat does have some implications when it comes to module interop though. Under this flag, ECMAScript `import`s and `export`s won’t be rewritten to `require` calls when your settings or file extension implied a different module system. Instead, you’ll get an error. If you need to emit code that uses `require` and `module.exports`, you’ll have to use TypeScript’s module syntax that predates ES2015:\n\n| Input TypeScript | Output JavaScript |\n| --- | --- |\n| ts<br><br>`   import foo = require(\"foo\");   ` | js<br><br>`   const foo = require(\"foo\");   ` |\n| ts<br><br>`   function foo() {}  function bar() {}  function baz() {}  export = {    foo,    bar,    baz,  };   ` | js<br><br>`   function foo() {}  function bar() {}  function baz() {}  module.exports = {    foo,    bar,    baz,  };   ` |\n\nWhile this is a limitation, it does help make some issues more obvious. For example, it’s very common to forget to set the [`type` field in `package.json`](https://nodejs.org/api/packages.html#type)\n under `--module node16`. As a result, developers would start writing CommonJS modules instead of an ES modules without realizing it, giving surprising lookup rules and JavaScript output. This new flag ensures that you’re intentional about the file type you’re using because the syntax is intentionally different.\n\nBecause `--verbatimModuleSyntax` provides a more consistent story than `--importsNotUsedAsValues` and `--preserveValueImports`, those two existing flags are being deprecated in its favor.\n\nFor more details, read up on [the original pull request](https://github.com/microsoft/TypeScript/pull/52203)\n and [its proposal issue](https://github.com/microsoft/TypeScript/issues/51479)\n.\n\n*   Released:\n    \n    [5.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-0.html)\n    \n\n[#](https://www.typescriptlang.org/tsconfig/#Backwards_Compatibility_6253)\nBackwards Compatibility\n--------------------------------------------------------------------------------------------------\n\n### [#](https://www.typescriptlang.org/tsconfig/#charset)\n Charset - `charset`\n\nIn prior versions of TypeScript, this controlled what encoding was used when reading text files from disk. Today, TypeScript assumes UTF-8 encoding, but will correctly detect UTF-16 (BE and LE) or UTF-8 BOMs.\n\n*   Deprecated\n*   Default:\n    \n    `utf8`\n    \n*   Released:\n    \n    [1.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#importsNotUsedAsValues)\n Imports Not Used As Values - `importsNotUsedAsValues`\n\nDeprecated in favor of [`verbatimModuleSyntax`](https://www.typescriptlang.org/tsconfig/#verbatimModuleSyntax)\n.\n\nThis flag controls how `import` works, there are 3 different options:\n\n*   `remove`: The default behavior of dropping `import` statements which only reference types.\n    \n*   `preserve`: Preserves all `import` statements whose values or types are never used. This can cause imports/side-effects to be preserved.\n    \n*   `error`: This preserves all imports (the same as the preserve option), but will error when a value import is only used as a type. This might be useful if you want to ensure no values are being accidentally imported, but still make side-effect imports explicit.\n    \n\nThis flag works because you can use `import type` to explicitly create an `import` statement which should never be emitted into JavaScript.\n\n*   Default:\n    \n    `remove`\n    \n*   Allowed:\n    *   `remove`\n        \n    *   `preserve`\n        \n    *   `error`\n        \n*   Related:\n    *   [`preserveValueImports`](https://www.typescriptlang.org/tsconfig/#preserveValueImports)\n        \n    *   [`verbatimModuleSyntax`](https://www.typescriptlang.org/tsconfig/#verbatimModuleSyntax)\n        \n*   Released:\n    \n    [3.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#keyofStringsOnly)\n Keyof Strings Only - `keyofStringsOnly`\n\nThis flag changes the `keyof` type operator to return `string` instead of `string | number` when applied to a type with a string index signature.\n\nThis flag is used to help people keep this behavior from [before TypeScript 2.9’s release](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-9.html#support-number-and-symbol-named-properties-with-keyof-and-mapped-types)\n.\n\n*   Deprecated\n*   Released:\n    \n    [2.9](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-9.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#noImplicitUseStrict)\n No Implicit Use Strict - `noImplicitUseStrict`\n\nYou shouldn’t need this. By default, when emitting a module file to a non-ES6 target, TypeScript emits a `\"use strict\";` prologue at the top of the file. This setting disables the prologue.\n\n*   Released:\n    \n    [1.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-8.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#noStrictGenericChecks)\n No Strict Generic Checks - `noStrictGenericChecks`\n\nTypeScript will unify type parameters when comparing two generic functions.\n\nts\n\n`   type A = <T, U>(x: T, y: U) => [T, U];  type B = <S>(x: S, y: S) => [S, S];  function f(a: A, b: B) {    b = a; // Ok    a = b; // Error  Type 'B' is not assignable to type 'A'.   Types of parameters 'y' and 'y' are incompatible.     Type 'U' is not assignable to type 'T'.       'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.2322Type 'B' is not assignable to type 'A'.   Types of parameters 'y' and 'y' are incompatible.     Type 'U' is not assignable to type 'T'.       'T' could be instantiated with an arbitrary type which could be unrelated to 'U'.  }   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFA4C4CeADpKAIKgC8oAPACoA0oAqgHwAUAHqk6IahYBKam1ABtPiwC6AbgIkyAIWp0Aypx6g1zAdpFUx4ndrl4AZgFcAdgGN8ASzjXQ5jgENU5ZgCNUSkQBvHFBQH1V3WVAQUAB5AGsQ0HdVHyiYgFFYBBwAXyA)\n\nThis flag can be used to remove that check.\n\n*   Released:\n    \n    [2.5](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-5.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#out)\n Out - `out`\n\nUse [`outFile`](https://www.typescriptlang.org/tsconfig/#outFile)\n instead.\n\nThe `out` option computes the final file location in a way that is not predictable or consistent. This option is retained for backward compatibility only and is deprecated.\n\n*   Deprecated\n*   Related:\n    *   [`outDir`](https://www.typescriptlang.org/tsconfig/#outDir)\n        \n    *   [`outFile`](https://www.typescriptlang.org/tsconfig/#outFile)\n        \n*   Released:\n    \n    [1.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#preserveValueImports)\n Preserve Value Imports - `preserveValueImports`\n\nDeprecated in favor of [`verbatimModuleSyntax`](https://www.typescriptlang.org/tsconfig/#verbatimModuleSyntax)\n.\n\nThere are some cases where TypeScript can’t detect that you’re using an import. For example, take the following code:\n\nts\n\n`   import { Animal } from \"./animal.js\";  eval(\"console.log(new Animal().isDangerous())\");   `\n\nor code using ‘Compiles to HTML’ languages like Svelte or Vue. `preserveValueImports` will prevent TypeScript from removing the import, even if it appears unused.\n\nWhen combined with [`isolatedModules`](https://www.typescriptlang.org/tsconfig/#isolatedModules)\n: imported types _must_ be marked as type-only because compilers that process single files at a time have no way of knowing whether imports are values that appear unused, or a type that must be removed in order to avoid a runtime crash.\n\n*   Related:\n    *   [`isolatedModules`](https://www.typescriptlang.org/tsconfig/#isolatedModules)\n        \n    *   [`importsNotUsedAsValues`](https://www.typescriptlang.org/tsconfig/#importsNotUsedAsValues)\n        \n    *   [`verbatimModuleSyntax`](https://www.typescriptlang.org/tsconfig/#verbatimModuleSyntax)\n        \n*   Released:\n    \n    [4.5](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-5.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#suppressExcessPropertyErrors)\n Suppress Excess Property Errors - `suppressExcessPropertyErrors`\n\nThis disables reporting of excess property errors, such as the one shown in the following example:\n\nts\n\n`  type Point = { x: number; y: number };  const p: Point = { x: 1, y: 3, m: 10 };  Object literal may only specify known properties, and 'm' does not exist in type 'Point'.2353Object literal may only specify known properties, and 'm' does not exist in type 'Point'.`[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1oFABcBPAB0lAAU4BLAOz1AF5QBvUAD1WoFcBbAIxgDcoAhx79ooAL4CcAYzjVEdIqgo06jFu1ABGADTDUGA91Q6ADFIFA)\n\nThis flag was added to help people migrate to the stricter checking of new object literals in [TypeScript 1.6](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-6.html#stricter-object-literal-assignment-checks)\n.\n\nWe don’t recommend using this flag in a modern codebase, you can suppress one-off cases where you need it using `// @ts-ignore`.\n\n*   Released:\n    \n    [1.6](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-6.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#suppressImplicitAnyIndexErrors)\n Suppress Implicit Any Index Errors - `suppressImplicitAnyIndexErrors`\n\nTurning `suppressImplicitAnyIndexErrors` on suppresses reporting the error about implicit anys when indexing into objects, as shown in the following example:\n\nts\n\n`  const obj = { x: 10 };  console.log(obj[\"foo\"]);  Element implicitly has an 'any' type because expression of type '\"foo\"' can't be used to index type '{ x: number; }'.   Property 'foo' does not exist on type '{ x: number; }'.7053Element implicitly has an 'any' type because expression of type '\"foo\"' can't be used to index type '{ x: number; }'.   Property 'foo' does not exist on type '{ x: number; }'.`[Try](https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoWATgK4CmAUCBAM7mKKmX30IobZ76yQATSgA8AoqVLRS9YgDMAhsno064emQxZiZKrTDhKEqTNAB2AAwBWAMzV00SOtDQARgCtQAXlABvUMOIARnNQAF8AbjsHemhkSgA6ZGgAcwAKVzcAbQAiWWhobIBdAEpwoA)\n\nUsing `suppressImplicitAnyIndexErrors` is quite a drastic approach. It is recommended to use a `@ts-ignore` comment instead:\n\nts\n\n`   const obj = { x: 10 };  // @ts-ignore  console.log(obj[\"foo\"]);   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEDsHsEkFsAOAbAlgY1QFwIKQJ4BcoWATgK4CmAUCBAM5kZbFlXXrSSOjQBGAK1ABeUAG9QAD2IBGAAygAvgG5aYcFnoBaVAHMYpGp27RklAHTJougBT8BAbQBEAM2jQnAXQCUyoA)\n\n*   Related:\n    *   [`noImplicitAny`](https://www.typescriptlang.org/tsconfig/#noImplicitAny)\n        \n*   Released:\n    \n    [1.4](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-4.html)\n    \n\n[#](https://www.typescriptlang.org/tsconfig/#Language_and_Environment_6254)\nLanguage and Environment\n----------------------------------------------------------------------------------------------------\n\n### [#](https://www.typescriptlang.org/tsconfig/#emitDecoratorMetadata)\n Emit Decorator Metadata - `emitDecoratorMetadata`\n\nEnables experimental support for emitting type metadata for decorators which works with the module [`reflect-metadata`](https://www.npmjs.com/package/reflect-metadata)\n.\n\nFor example, here is the TypeScript\n\nts\n\n`   function LogMethod(    target: any,    propertyKey: string | symbol,    descriptor: PropertyDescriptor  ) {    console.log(target);    console.log(propertyKey);    console.log(descriptor);  }  class Demo {    @LogMethod    public foo(bar: number) {      // do nothing    }  }  const demo = new Demo();   `[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQAZgK7pGZInqgAyJA5gLKRMACxIATABQ1QoHAh6CAXKGzoAngBopoWAhLwEmVQGlIqpVUzJ0PUAB9QVVSgBGJXJumjIVIsliUEJQAFXX1DQh8-AJoASlAAby1SdCo3SAA6XF5xWXlMGIBuJPZU3AysnnEdPURDE1VC4pS0zOyvSKR-MkaAXxoaIlxsKipQQhQSBK1wbn5BEVEtWAZnXCQiUDoSEnFnbEDQdAYXRDjE6WkQUFFJ9BJhJGstPr6BksxryAnQAF5DyAA7mMvjtCkA)\n\nWith `emitDecoratorMetadata` not set to true (default) the emitted JavaScript is:\n\nts\n\n`\"use strict\";  var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;      if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;      return c > 3 && r && Object.defineProperty(target, key, r), r;  };  function LogMethod(target, propertyKey, descriptor) {      console.log(target);      console.log(propertyKey);      console.log(descriptor);  }  class Demo {      foo(bar) {          // do nothing      }  }  __decorate([      LogMethod  ], Demo.prototype, \"foo\", null);  const demo = new Demo();` [Try](https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQIEVAFiQO4CiKSmNAZgK7oimJCXSgAMiQDmAWUiZmAEwAUNUKBwIp8gFyhs6AJ4AaNaFgIS8BJkMBpSIb1VMydFNAAfUFUMoARiS4puqKkFREyLCUCHoACpbWtoQRUTE0AJSgAN5mpOhUQZAAdLjSypramBkA3HmihbglZVLKFlaItg6GtfUFRaXlYalI0WS9AL40NES42FRUoIQoJDlm4JKy8kpmsHz+uEhEoDwkJMr+2LGg6HwBiFm56ur0iqvoJApI7mZTUzMNTCgMIrUAAXhukBYS0gK2UtSAA)\n\nWith `emitDecoratorMetadata` set to true the emitted JavaScript is:\n\nts\n\n`\"use strict\";  var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;      if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;      return c > 3 && r && Object.defineProperty(target, key, r), r;  };  var __metadata = (this && this.__metadata) || function (k, v) {      if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);  };  function LogMethod(target, propertyKey, descriptor) {      console.log(target);      console.log(propertyKey);      console.log(descriptor);  }  class Demo {      foo(bar) {          // do nothing      }  }  __decorate([      LogMethod,      __metadata(\"design:type\", Function),      __metadata(\"design:paramtypes\", [Number]),      __metadata(\"design:returntype\", void 0)  ], Demo.prototype, \"foo\", null);  const demo = new Demo();` [Try](https://www.typescriptlang.org/play/#code/PTAEAEFMA8AdIE4EsC2kB2AXAhgGwCKQDGA9gtpmQM4BQIEVAFiQO4CiKSmdYUnmhUuUoIAspBwATCthoAzAK7oimJCXSgAMiQDm4zM0kAKGqFA4EOiQC5Q2dAE8ANKdCwEJeAkwOA0pAdbKkxkdB1QAB9QKgcUACMSXBczSUgqImRYEVsABQ8vH0J0zJEaAEpQAG9XUnQqRMgAOlxdIwsrTDKAbhr1etwmlp0jd09EH38Hbt66hubW1OKkLLJpgF8aGiJcbCoqUEIUEirXcG09CUNXWAU43CQiUDkSEiM47ARbdAV4xArqsxmeiSY7oEgGJBhVwbDZbPqYUCpI6gAC8oHQkBYB0gRyM3SAA)\n\n*   Related:\n    *   [`experimentalDecorators`](https://www.typescriptlang.org/tsconfig/#experimentalDecorators)\n        \n*   Released:\n    \n    [1.5](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-5.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#experimentalDecorators)\n Experimental Decorators - `experimentalDecorators`\n\nEnables [experimental support for decorators](https://github.com/tc39/proposal-decorators)\n, which is a version of decorators that predates the TC39 standardization process.\n\nDecorators are a language feature which hasn’t yet been fully ratified into the JavaScript specification. This means that the implementation version in TypeScript may differ from the implementation in JavaScript when it it decided by TC39.\n\nYou can find out more about decorator support in TypeScript in [the handbook](https://www.typescriptlang.org/docs/handbook/decorators.html)\n.\n\n*   Related:\n    *   [`emitDecoratorMetadata`](https://www.typescriptlang.org/tsconfig/#emitDecoratorMetadata)\n        \n*   Released:\n    \n    [1.5](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-5.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#jsx)\n JSX - `jsx`\n\nControls how JSX constructs are emitted in JavaScript files. This only affects output of JS files that started in `.tsx` files.\n\n*   `react-jsx`: Emit `.js` files with the JSX changed to `_jsx` calls optimized for production\n*   `react-jsxdev`: Emit `.js` files with the JSX changed to `_jsx` calls for development only\n*   `preserve`: Emit `.jsx` files with the JSX unchanged\n*   `react-native`: Emit `.js` files with the JSX unchanged\n*   `react`: Emit `.js` files with JSX changed to the equivalent `React.createElement` calls\n\n### [](https://www.typescriptlang.org/tsconfig/#for-example)\nFor example\n\nThis sample code:\n\ntsx\n\n`   export const HelloWorld = () => <h1>Hello world</h1>;   `\n\nReact: `\"react-jsx\"`[\\[1\\]](https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html)\n\ntsx\n\n`import { jsx as _jsx } from \"react/jsx-runtime\";  export const HelloWorld = () => _jsx(\"h1\", { children: \"Hello world\" });` [Try](https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wCgB6cuAWlrQFcZbrSATJNAGxSLhAlb1OSOACkAygA04Ab1Jw4wAHYwkUTOhEBRYSCQrZAX3mKVajWhEBJFVGUBnYGh1I9K+7JMKA2vYBccPYwdkoA5gC6AShKAJ4A3CbGxpRwAAL2ABYQAO5aIMAwFFSpShBaUDhQ9kVpAFb2AB4BROhM9Q2kSA2QsHBoEEpBcAASSJycEADq0JyscAC8cAAUAJQLAHxwADwZAIzro+MQcNkzrFvke+txQA)\n\nReact dev transform: `\"react-jsxdev\"`[\\[1\\]](https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html)\n\ntsx\n\n`import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";  const _jsxFileName = \"/home/runner/work/TypeScript-Website/TypeScript-Website/packages/typescriptlang-org/index.tsx\";  export const HelloWorld = () => _jsxDEV(\"h1\", { children: \"Hello world\" }, void 0, false, { fileName: _jsxFileName, lineNumber: 9, columnNumber: 32 }, this);` [Try](https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wCgB6cuAWlrQFcZbrSATJNAGxSLhAlb1OSOACkAygA04Ab1Jw4wAHYwkUTOhEBRYSCQrZAX3mKVajWhEBJFVGUBnYGh1I9K+7JMKA2vYBccPYwdkoA5gC6AShKAJ4A3CbGxpRwAAL2ABYQAO5aIMAwFFSpShBaUDhQ9kVpAFb2AB4BROhM9Q3sAG6kSA2QsHBoEEpBcAASSJycEADq0JyscAC8cAAUAJTLAHxwADwZAIxbE1MQcNnzrLvkh1txQA)\n\nPreserve: `\"preserve\"`\n\ntsx\n\n`import React from 'react';  export const HelloWorld = () => <h1>Hello world</h1>;` [Try](https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wCgB6cuAWlrQFcZbrSATJNAGxSLhAlb1OSOACkAygA04Ab1Jw4wAHYwkUTOhEBRYSCQrZAX3mKVajWhEBJFVGUBnYGh1I9K+7JMKA2vYBccPYwdkoA5gC6AShKAJ4A3CbGxpRwAAL2ABYQAO5aIMAwFFSpShBaUDhQ9kVpAFb2AB4BYET2agBuSKRIDZCwcGgQSkFwABJInJwQAOrQnKxwALxwABQAlEsAfHAAPBkAjJvjkxBw2XOsO+QHm3FAA)\n\nReact Native: `\"react-native\"`\n\ntsx\n\n`import React from 'react';  export const HelloWorld = () => <h1>Hello world</h1>;` [Try](https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wCgB6cuAWlrQFcZbrSATJNAGxSLhAlb1OSOACkAygA04Ab1Jw4wAHYwkUTOhEBRYSCQrZAX3mKVajWhEBJFVGUBnYGh1I9K+7JMKA2vYBccPYwdkoA5gC6AShKAJ4A3CbGxpRwAAL2ABYQAO5aIMAwFFSpShBaUDhQ9kVpAFb2AB4BROhMSigwwABuSKRIDZCwcGgQSkFwABJInJwQAOrQnKxwALxwABQAlKsAfHAAPBkAjDtTMxBw2Yus++THO3FAA)\n\nLegacy React runtime: `\"react\"`\n\ntsx\n\n`import React from 'react';  export const HelloWorld = () => React.createElement(\"h1\", null, \"Hello world\");` [Try](https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wCgB6cuAWlrQFcZbrSATJNAGxSLhAlb1OSOACkAygA04Ab1Jw4wAHYwkUTOhEBRYSCQrZAX3mKVajWhEBJFVGUBnYGh1I9K+7JMKA2vYBccPYwdkoA5gC6AShKAJ4A3CbGxpRwAAL2ABYQAO5aIMAwFFSpShBaUDhQ9qRIAB6QsHBoEEpBcAASSJycEADq0JyscAC8cAAUAJQjAHxwADwZAIzTnd0QcNkDrHPkS9NxQA)\n\nThis option can be used on a per-file basis too using an `@jsxRuntime` comment.\n\nAlways use the classic runtime (`\"react\"`) for this file:\n\ntsx\n\n`   /* @jsxRuntime classic */  export const HelloWorld = () => <h1>Hello world</h1>;   `\n\nAlways use the automatic runtime (`\"react-jsx\"`) for this file:\n\ntsx\n\n`   /* @jsxRuntime automatic */  export const HelloWorld = () => <h1>Hello world</h1>;   `\n\n*   Allowed:\n    *   `preserve`\n        \n    *   `react`\n        \n    *   `react-native`\n        \n    *   `react-jsx`\n        \n    *   `react-jsxdev`\n        \n*   Related:\n    *   [`jsxFactory`](https://www.typescriptlang.org/tsconfig/#jsxFactory)\n        \n    *   [`jsxFragmentFactory`](https://www.typescriptlang.org/tsconfig/#jsxFragmentFactory)\n        \n    *   [`jsxImportSource`](https://www.typescriptlang.org/tsconfig/#jsxImportSource)\n        \n*   Released:\n    \n    [1.6](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-6.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#jsxFactory)\n JSX Factory - `jsxFactory`\n\nChanges the function called in `.js` files when compiling JSX Elements using the classic JSX runtime. The most common change is to use `\"h\"` or `\"preact.h\"` instead of the default `\"React.createElement\"` if using `preact`.\n\nFor example, this TSX file:\n\ntsx\n\n`   import { h } from \"preact\";  const HelloWorld = () => <div>Hello</div>;   `\n\nWith `jsxFactory: \"h\"` looks like:\n\ntsx\n\n`const preact_1 = require(\"preact\");  const HelloWorld = () => (0, preact_1.h)(\"div\", null, \"Hello\");` [Try](https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wCgB6cuAWlrQFcZbqKqABAZwAsIB3AURDAYrOJx4ChMGEgAmAMWAAbJAC44wAHaykADwB0AKw6i2x3fPQxoAT3VdTmiPyg4oJymJgooAcyQw6kgcmnoinmwgELL0KupouFGaxqSkoJCwcADecFwANHDyUCi+IEia8AC+cNi4cABEYERW9QDcqQmaHPAAEkhKShAA6tBKsnAAvHAAFACUkwB8cAA8ssAAbgt9AxDL5GubrUA)\n\nThis option can be used on a per-file basis too similar to [Babel’s `/** @jsx h */` directive](https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#custom)\n.\n\ntsx\n\n`   /** @jsx h */  import { h } from \"preact\";  Cannot find module 'preact' or its corresponding type declarations.2307Cannot find module 'preact' or its corresponding type declarations.  const HelloWorld = () => <div>Hello</div>;   `[Try](https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wCgB6cuAWlrQFcZbqKAqVuAAQCsBnADzgALOK3KlQkWHADewuAF842XHABEYIuhhqA3KVJoIAO17wAEkgA2ViAHVoVgCZwAvHAAUASjcA+OAA8TsAAbr6WNhAB5MFhukA)\n\nThe factory chosen will also affect where the `JSX` namespace is looked up (for type checking information) before falling back to the global one.\n\nIf the factory is defined as `React.createElement` (the default), the compiler will check for `React.JSX` before checking for a global `JSX`. If the factory is defined as `h`, it will check for `h.JSX` before a global `JSX`.\n\n*   Default:\n    \n    `React.createElement`\n    \n*   Allowed:\n    *   Any identifier or dotted identifier.\n        \n*   Related:\n    *   [`jsx`](https://www.typescriptlang.org/tsconfig/#jsx)\n        \n    *   [`jsxFragmentFactory`](https://www.typescriptlang.org/tsconfig/#jsxFragmentFactory)\n        \n    *   [`jsxImportSource`](https://www.typescriptlang.org/tsconfig/#jsxImportSource)\n        \n*   Released:\n    \n    [2.2](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-2.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#jsxFragmentFactory)\n JSX Fragment Factory - `jsxFragmentFactory`\n\nSpecify the JSX fragment factory function to use when targeting react JSX emit with [`jsxFactory`](https://www.typescriptlang.org/tsconfig/#jsxFactory)\n compiler option is specified, e.g. `Fragment`.\n\nFor example with this TSConfig:\n\n`   {    \"[compilerOptions](https://www.typescriptlang.org/tsconfig#compilerOptions) \": {      \"[target](https://www.typescriptlang.org/tsconfig#target) \": \"esnext\",      \"[module](https://www.typescriptlang.org/tsconfig#module) \": \"commonjs\",      \"[jsx](https://www.typescriptlang.org/tsconfig#jsx) \": \"react\",      \"[jsxFactory](https://www.typescriptlang.org/tsconfig#jsxFactory) \": \"h\",      \"[jsxFragmentFactory](https://www.typescriptlang.org/tsconfig#jsxFragmentFactory) \": \"Fragment\"    }  }   `\n\nThis TSX file:\n\ntsx\n\n`   import { h, Fragment } from \"preact\";  const HelloWorld = () => (    <>      <div>Hello</div>    </>  );   `\n\nWould look like:\n\ntsx\n\n`const preact_1 = require(\"preact\");  const HelloWorld = () => ((0, preact_1.h)(preact_1.Fragment, null,      (0, preact_1.h)(\"div\", null, \"Hello\")));` [Try](https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wCgB6cuAWlrQFcZbqKqABAZwAsIB3AURDAYrOJx4ChMGEgAmAMWAAbJAC44wAHaykADwB0AKw6i2x3fPQxoAT3VdT5+VBQBzEEk0xLGW+uduHl6mmhD8UDhQJpRiMChQrkgw6kgcmnoiMWwgELL0KupouDmaxqSkoJCwcADecFwANHAB7p7wAL5w2LhwAERgRFa9ANzlRZoc8AASSEpKEADq0EqycAC8cAAUAJTrAHxbpHBwADx7R8enssAAbnszcxAn5Nd3F8-n28NAA)\n\nThis option can be used on a per-file basis too similar to [Babel’s `/* @jsxFrag h */` directive](https://babeljs.io/docs/en/babel-plugin-transform-react-jsx#fragments)\n.\n\nFor example:\n\ntsx\n\n`   /** @jsx h */  /** @jsxFrag Fragment */  import { h, Fragment } from \"preact\";  Cannot find module 'preact' or its corresponding type declarations.2307Cannot find module 'preact' or its corresponding type declarations.  const HelloWorld = () => (    <>      <div>Hello</div>    </>  );   `[Try](https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wCgB6cuAWlrQFcZbqKAqVuAAQCsBnADzgALOK3JsOPAQDEoKAOZxZCkEgB28MaVKhIsOAG9hAGiVz5qjXAC+cbLjgAiMEXQxHAbm1oIa3vAAJJAAbYIgAdWhggBM4AF44AAoASniAPiTSODgAHjSs7Nzo4AA3NKDQiBzyYrKC6vzkjyA)\n\n*   Default:\n    \n    `React.Fragment`\n    \n*   Related:\n    *   [`jsx`](https://www.typescriptlang.org/tsconfig/#jsx)\n        \n    *   [`jsxFactory`](https://www.typescriptlang.org/tsconfig/#jsxFactory)\n        \n    *   [`jsxImportSource`](https://www.typescriptlang.org/tsconfig/#jsxImportSource)\n        \n*   Released:\n    \n    [4.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#jsxImportSource)\n JSX Import Source - `jsxImportSource`\n\nDeclares the module specifier to be used for importing the `jsx` and `jsxs` factory functions when using [`jsx`](https://www.typescriptlang.org/tsconfig/#jsx)\n as `\"react-jsx\"` or `\"react-jsxdev\"` which were introduced in TypeScript 4.1.\n\nWith [React 17](https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html)\n the library supports a new form of JSX transformation via a separate import.\n\nFor example with this code:\n\ntsx\n\n`   import React from \"react\";  function App() {    return <h1>Hello World</h1>;  }   `\n\nUsing this TSConfig:\n\n`   {    \"[compilerOptions](https://www.typescriptlang.org/tsconfig#compilerOptions) \": {      \"[target](https://www.typescriptlang.org/tsconfig#target) \": \"esnext\",      \"[module](https://www.typescriptlang.org/tsconfig#module) \": \"commonjs\",      \"[jsx](https://www.typescriptlang.org/tsconfig#jsx) \": \"react-jsx\"    }  }   `\n\nThe emitted JavaScript from TypeScript is:\n\ntsx\n\n`\"use strict\";  Object.defineProperty(exports, \"__esModule\", { value: true });  const jsx_runtime_1 = require(\"react/jsx-runtime\");  function App() {      return (0, jsx_runtime_1.jsx)(\"h1\", { children: \"Hello World\" });  }` [Try](https://www.typescriptlang.org/play/#code/PTAEAEGcAsHsHcCiBbAlgFwFAggO1ogE6GyGTZjgBWkAHgFyiECmAhgMboC0NtFEyWABMArgBtmjdrGSDcNfuHStCAc2bpGzSLma0sQ5uzErmoQaImgAUgGUAGqADemUKFS50zQgDMOZxAlkZk9nAF9Xd09vP3YzAElPQg9IVHZA5mDPSGdItwBtSEZIdGTcVQBdRlZcAE8AbkiIiNRkAAdSdFAAJTZOUB8SZFAAIhYOdBHGzB8RXE5UWFxQAEE2toAKAEpctxZ0EUJlgB5oAEYAPgAJZjExWFAAdVIxIWPgc4vGsKA)\n\nFor example if you wanted to use `\"jsxImportSource\": \"preact\"`, you need a tsconfig like:\n\n`   {    \"[compilerOptions](https://www.typescriptlang.org/tsconfig#compilerOptions) \": {      \"[target](https://www.typescriptlang.org/tsconfig#target) \": \"esnext\",      \"[module](https://www.typescriptlang.org/tsconfig#module) \": \"commonjs\",      \"[jsx](https://www.typescriptlang.org/tsconfig#jsx) \": \"react-jsx\",      \"[jsxImportSource](https://www.typescriptlang.org/tsconfig#jsxImportSource) \": \"preact\",      \"[types](https://www.typescriptlang.org/tsconfig#types) \": [\"preact\"]    }  }   `\n\nWhich generates code like:\n\ntsx\n\n`function App() {      return (0, jsx_runtime_1.jsx)(\"h1\", { children: \"Hello World\" });  }` [Try](https://www.typescriptlang.org/play/#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wCgB6cuAWlrQFcZbqKqABAZwAsIB3AURDAYrOGwBWHAB4BJcNBgBlCPShokALjhgi6EZTEwAnmCQctO4vvaSpW3Rmq3RbGCigBzJDC1mAdkhS1mIgEAAm9AA2mnBouKF+ki5+EPxQOFAcpKSBkLBwmPR+GMAQfnAAgmBgABQAlHAA3qRwcEQwquUAPFwAjAB8ABJIkZEQcADq0JFhXeR9-QDcpAC+QA)\n\nAlternatively, you can use a per-file pragma to set this option, for example:\n\ntsx\n\n`   /** @jsxImportSource preact */  export function App() {    return <h1>Hello World</h1>;  }   `\n\nWould add `preact/jsx-runtime` as an import for the `_jsx` factory.\n\n_Note:_ In order for this to work like you would expect, your `tsx` file must include an `export` or `import` so that it is considered a module.\n\n*   Default:\n    \n    `react`\n    \n*   Related:\n    *   [`jsx`](https://www.typescriptlang.org/tsconfig/#jsx)\n        \n    *   [`jsxFactory`](https://www.typescriptlang.org/tsconfig/#jsxFactory)\n        \n*   Released:\n    \n    [4.1](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#lib)\n Lib - `lib`\n\nTypeScript includes a default set of type definitions for built-in JS APIs (like `Math`), as well as type definitions for things found in browser environments (like `document`). TypeScript also includes APIs for newer JS features matching the [`target`](https://www.typescriptlang.org/tsconfig/#target)\n you specify; for example the definition for `Map` is available if [`target`](https://www.typescriptlang.org/tsconfig/#target)\n is `ES6` or newer.\n\nYou may want to change these for a few reasons:\n\n*   Your program doesn’t run in a browser, so you don’t want the `\"dom\"` type definitions\n*   Your runtime platform provides certain JavaScript API objects (maybe through polyfills), but doesn’t yet support the full syntax of a given ECMAScript version\n*   You have polyfills or native implementations for some, but not all, of a higher level ECMAScript version\n\nIn TypeScript 4.5, lib files can be overridden by npm modules, find out more [in the blog](https://devblogs.microsoft.com/typescript/announcing-typescript-4-5-beta/#supporting-lib-from-node_modules)\n.\n\n### [](https://www.typescriptlang.org/tsconfig/#high-level-libraries)\nHigh Level libraries\n\n| Name | Contents |\n| --- | --- |\n| `ES5` | Core definitions for all ES5 functionality |\n| `ES2015` | Additional APIs available in ES2015 (also known as ES6) - `array.find`, `Promise`, `Proxy`, `Symbol`, `Map`, `Set`, `Reflect`, etc. |\n| `ES6` | Alias for “ES2015” |\n| `ES2016` | Additional APIs available in ES2016 - `array.include`, etc. |\n| `ES7` | Alias for “ES2016” |\n| `ES2017` | Additional APIs available in ES2017 - `Object.entries`, `Object.values`, `Atomics`, `SharedArrayBuffer`, `date.formatToParts`, typed arrays, etc. |\n| `ES2018` | Additional APIs available in ES2018 - `async` iterables, `promise.finally`, `Intl.PluralRules`, `regexp.groups`, etc. |\n| `ES2019` | Additional APIs available in ES2019 - `array.flat`, `array.flatMap`, `Object.fromEntries`, `string.trimStart`, `string.trimEnd`, etc. |\n| `ES2020` | Additional APIs available in ES2020 - `string.matchAll`, etc. |\n| `ES2021` | Additional APIs available in ES2021 - `promise.any`, `string.replaceAll` etc. |\n| `ES2022` | Additional APIs available in ES2022 - `array.at`, `RegExp.hasIndices`, etc. |\n| `ES2023` | Additional APIs available in ES2023 - `array.with`, `array.findLast`, `array.findLastIndex`, `array.toSorted`, `array.toReversed`, etc. |\n| `ESNext` | Additional APIs available in ESNext - This changes as the JavaScript specification evolves |\n| `DOM` | [DOM](https://developer.mozilla.org/docs/Glossary/DOM)<br> definitions - `window`, `document`, etc. |\n| `WebWorker` | APIs available in [WebWorker](https://developer.mozilla.org/docs/Web/API/Web_Workers_API/Using_web_workers)<br> contexts |\n| `ScriptHost` | APIs for the [Windows Script Hosting System](https://wikipedia.org/wiki/Windows_Script_Host) |\n\n### [](https://www.typescriptlang.org/tsconfig/#individual-library-components)\nIndividual library components\n\n| Name |\n| --- |\n| `DOM.Iterable` |\n| `ES2015.Core` |\n| `ES2015.Collection` |\n| `ES2015.Generator` |\n| `ES2015.Iterable` |\n| `ES2015.Promise` |\n| `ES2015.Proxy` |\n| `ES2015.Reflect` |\n| `ES2015.Symbol` |\n| `ES2015.Symbol.WellKnown` |\n| `ES2016.Array.Include` |\n| `ES2017.object` |\n| `ES2017.Intl` |\n| `ES2017.SharedMemory` |\n| `ES2017.String` |\n| `ES2017.TypedArrays` |\n| `ES2018.Intl` |\n| `ES2018.Promise` |\n| `ES2018.RegExp` |\n| `ES2019.Array` |\n| `ES2019.Object` |\n| `ES2019.String` |\n| `ES2019.Symbol` |\n| `ES2020.String` |\n| `ES2020.Symbol.wellknown` |\n| `ES2021.Promise` |\n| `ES2021.String` |\n| `ES2021.WeakRef` |\n| `ESNext.AsyncIterable` |\n| `ESNext.Array` |\n| `ESNext.Intl` |\n| `ESNext.Symbol` |\n\nThis list may be out of date, you can see the full list in the [TypeScript source code](https://github.com/microsoft/TypeScript/tree/main/src/lib)\n.\n\n*   Related:\n    *   [`noLib`](https://www.typescriptlang.org/tsconfig/#noLib)\n        \n*   Released:\n    \n    [2.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#libReplacement)\n Lib Replacement - `libReplacement`\n\nTypeScript 4.5 introduced the possibility of substituting the default `lib` files with custom ones. All built-in library files would first try to be resolved from packages named `@typescript/lib-*`. For example, you could lock your `dom` libraries onto a specific version of [the `@types/web` package](https://www.npmjs.com/package/@types/web?activeTab=readme)\n with the following `package.json`:\n\njson\n\n`   {    \"devDependencies\": {      \"@typescript/lib-dom\": \"npm:@types/web@0.0.199\"    }  }   `\n\nWhen installed, a package called `@typescript/lib-dom` should exist, and TypeScript would always look there when searching for `lib.dom.d.ts`.\n\nThe `--libReplacement` flag allows you to disable this behavior. If you’re not using any `@typescript/lib-*` packages, you can now disable those package lookups with `--libReplacement false`. In the future, `--libReplacement false` may become the default, so if you currently rely on the behavior you should consider explicitly enabling it with `--libReplacement true`.\n\n*   Default:\n    \n    `true`\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#moduleDetection)\n Module Detection - `moduleDetection`\n\nThis setting controls how TypeScript determines whether a file is a [script or a module](https://www.typescriptlang.org/docs/handbook/modules/theory.html#scripts-and-modules-in-javascript)\n.\n\nThere are three choices:\n\n*   `\"auto\"` (default) - TypeScript will not only look for import and export statements, but it will also check whether the `\"type\"` field in a `package.json` is set to `\"module\"` when running with [`module`](https://www.typescriptlang.org/tsconfig/#module)\n    : `nodenext` or `node16`, and check whether the current file is a JSX file when running under [`jsx`](https://www.typescriptlang.org/tsconfig/#jsx)\n    : `react-jsx`.\n    \n*   `\"legacy\"` - The same behavior as 4.6 and prior, usings import and export statements to determine whether a file is a module.\n    \n*   `\"force\"` - Ensures that every non-declaration file is treated as a module.\n    \n\n*   Default:\n    \n    \"auto\": Treat files with imports, exports, import.meta, jsx (with jsx: react-jsx), or esm format (with module: node16+) as modules.\n    \n*   Allowed:\n    *   `legacy`\n        \n    *   `auto`\n        \n    *   `force`\n        \n*   Released:\n    \n    [4.7](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-7.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#noLib)\n No Lib - `noLib`\n\nDisables the automatic inclusion of any library files. If this option is set, `lib` is ignored.\n\nTypeScript _cannot_ compile anything without a set of interfaces for key primitives like: `Array`, `Boolean`, `Function`, `IArguments`, `Number`, `Object`, `RegExp`, and `String`. It is expected that if you use `noLib` you will be including your own type definitions for these.\n\n*   Related:\n    *   [`lib`](https://www.typescriptlang.org/tsconfig/#lib)\n        \n*   Released:\n    \n    [1.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#reactNamespace)\n React Namespace - `reactNamespace`\n\nUse [`jsxFactory`](https://www.typescriptlang.org/tsconfig/#jsxFactory)\n instead. Specify the object invoked for `createElement` when targeting `react` for TSX files.\n\n*   Default:\n    \n    `React`\n    \n*   Released:\n    \n    [1.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-8.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#target)\n Target - `target`\n\nModern browsers support all ES6 features, so `ES6` is a good choice. You might choose to set a lower target if your code is deployed to older environments, or a higher target if your code is guaranteed to run in newer environments.\n\nThe `target` setting changes which JS features are downleveled and which are left intact. For example, an arrow function `() => this` will be turned into an equivalent `function` expression if `target` is ES5 or lower.\n\nChanging `target` also changes the default value of [`lib`](https://www.typescriptlang.org/tsconfig/#lib)\n. You may “mix and match” `target` and `lib` settings as desired, but you could just set `target` for convenience.\n\nFor developer platforms like Node there are baselines for the `target`, depending on the type of platform and its version. You can find a set of community organized TSConfigs at [tsconfig/bases](https://github.com/tsconfig/bases#centralized-recommendations-for-tsconfig-bases)\n, which has configurations for common platforms and their versions.\n\nThe special `ESNext` value refers to the highest version your version of TypeScript supports. This setting should be used with caution, since it doesn’t mean the same thing between different TypeScript versions and can make upgrades less predictable.\n\n*   Default:\n    \n    `ES5`\n    \n*   Allowed:\n    *   `es3`\n        \n    *   `es5`\n        \n    *   `es6`/`es2015`\n        \n    *   `es2016`\n        \n    *   `es2017`\n        \n    *   `es2018`\n        \n    *   `es2019`\n        \n    *   `es2020`\n        \n    *   `es2021`\n        \n    *   `es2022`\n        \n    *   `es2023`\n        \n    *   `es2024`\n        \n    *   `esnext`\n        \n*   Released:\n    \n    [1.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#useDefineForClassFields)\n Use Define For Class Fields - `useDefineForClassFields`\n\nThis flag is used as part of migrating to the upcoming standard version of class fields. TypeScript introduced class fields many years before it was ratified in TC39. The latest version of the upcoming specification has a different runtime behavior to TypeScript’s implementation but the same syntax.\n\nThis flag switches to the upcoming ECMA runtime behavior.\n\nYou can read more about the transition in [the 3.7 release notes](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier)\n.\n\n*   Default:\n    \n    `true` if [`target`](https://www.typescriptlang.org/tsconfig/#target)\n     is `ES2022` or higher, including `ESNext`; `false` otherwise.\n    \n*   Released:\n    \n    [3.7](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html)\n    \n\n[#](https://www.typescriptlang.org/tsconfig/#Compiler_Diagnostics_6251)\nCompiler Diagnostics\n--------------------------------------------------------------------------------------------\n\n### [#](https://www.typescriptlang.org/tsconfig/#diagnostics)\n Diagnostics - `diagnostics`\n\nUsed to output diagnostic information for debugging. This command is a subset of [`extendedDiagnostics`](https://www.typescriptlang.org/tsconfig/#extendedDiagnostics)\n which are more user-facing results, and easier to interpret.\n\nIf you have been asked by a TypeScript compiler engineer to give the results using this flag in a compile, in which there is no harm in using [`extendedDiagnostics`](https://www.typescriptlang.org/tsconfig/#extendedDiagnostics)\n instead.\n\n*   Deprecated\n*   Related:\n    *   [`extendedDiagnostics`](https://www.typescriptlang.org/tsconfig/#extendedDiagnostics)\n        \n*   Released:\n    \n    [1.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#explainFiles)\n Explain Files - `explainFiles`\n\nPrint names of files which TypeScript sees as a part of your project and the reason they are part of the compilation.\n\nFor example, with this project of just a single `index.ts` file\n\nsh\n\n`   example  ├── index.ts  ├── package.json  └── tsconfig.json   `\n\nUsing a `tsconfig.json` which has `explainFiles` set to true:\n\njson\n\n`   {    \"compilerOptions\": {      \"target\": \"es5\",      \"module\": \"commonjs\",      \"explainFiles\": true    }  }   `\n\nRunning TypeScript against this folder would have output like this:\n\n`   ❯ tsc  node_modules/typescript/lib/lib.d.ts    Default library for target 'es5'  node_modules/typescript/lib/lib.es5.d.ts    Library referenced via 'es5' from file 'node_modules/typescript/lib/lib.d.ts'  node_modules/typescript/lib/lib.dom.d.ts    Library referenced via 'dom' from file 'node_modules/typescript/lib/lib.d.ts'  node_modules/typescript/lib/lib.webworker.importscripts.d.ts    Library referenced via 'webworker.importscripts' from      file 'node_modules/typescript/lib/lib.d.ts'  node_modules/typescript/lib/lib.scripthost.d.ts    Library referenced via 'scripthost'      from file 'node_modules/typescript/lib/lib.d.ts'  index.ts    Matched by include pattern '**/*' in 'tsconfig.json'   `\n\nThe output above show:\n\n*   The initial lib.d.ts lookup based on [`target`](https://www.typescriptlang.org/tsconfig/#target)\n    , and the chain of `.d.ts` files which are referenced\n*   The `index.ts` file located via the default pattern of [`include`](https://www.typescriptlang.org/tsconfig/#include)\n    \n\nThis option is intended for debugging how a file has become a part of your compile.\n\n*   Released:\n    \n    [4.2](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-2.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#extendedDiagnostics)\n Extended Diagnostics - `extendedDiagnostics`\n\nYou can use this flag to discover where TypeScript is spending its time when compiling. This is a tool used for understanding the performance characteristics of your codebase overall.\n\nYou can learn more about how to measure and understand the output in the performance [section of the wiki](https://github.com/microsoft/TypeScript/wiki/Performance)\n.\n\n*   Related:\n    *   [`diagnostics`](https://www.typescriptlang.org/tsconfig/#diagnostics)\n        \n*   Released:\n    \n    [2.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#generateCpuProfile)\n Generate CPU Profile - `generateCpuProfile`\n\nThis option gives you the chance to have TypeScript emit a v8 CPU profile during the compiler run. The CPU profile can provide insight into why your builds may be slow.\n\nThis option can only be used from the CLI via: `--generateCpuProfile tsc-output.cpuprofile`.\n\nsh\n\n`   npm run tsc --generateCpuProfile tsc-output.cpuprofile   `\n\nThis file can be opened in a chromium based browser like Chrome or Edge Developer in [the CPU profiler](https://developers.google.com/web/tools/chrome-devtools/rendering-tools/js-execution)\n section. You can learn more about understanding the compilers performance in the [TypeScript wiki section on performance](https://github.com/microsoft/TypeScript/wiki/Performance)\n.\n\n*   Default:\n    \n    `profile.cpuprofile`\n    \n*   Released:\n    \n    [3.7](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#generateTrace)\n generateTrace - `generateTrace`\n\nGenerates an event trace and a list of types.\n\n*   Released:\n    \n    [4.1](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#listEmittedFiles)\n List Emitted Files - `listEmittedFiles`\n\nPrint names of generated files part of the compilation to the terminal.\n\nThis flag is useful in two cases:\n\n*   You want to transpile TypeScript as a part of a build chain in the terminal where the filenames are processed in the next command.\n*   You are not sure that TypeScript has included a file you expected, as a part of debugging the [file inclusion settings](https://www.typescriptlang.org/tsconfig/#Project_Files_0)\n    .\n\nFor example:\n\n`   example  ├── index.ts  ├── package.json  └── tsconfig.json   `\n\nWith:\n\n`   {    \"[compilerOptions](https://www.typescriptlang.org/tsconfig#compilerOptions) \": {      \"[declaration](https://www.typescriptlang.org/tsconfig#declaration) \": true,      \"[listEmittedFiles](https://www.typescriptlang.org/tsconfig#listEmittedFiles) \": true    }  }   `\n\nWould echo paths like:\n\n`   $ npm run tsc  path/to/example/index.js  path/to/example/index.d.ts   `\n\nNormally, TypeScript would return silently on success.\n\n*   Released:\n    \n    [2.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#listFiles)\n List Files - `listFiles`\n\nPrint names of files part of the compilation. This is useful when you are not sure that TypeScript has included a file you expected.\n\nFor example:\n\n`   example  ├── index.ts  ├── package.json  └── tsconfig.json   `\n\nWith:\n\n`   {    \"[compilerOptions](https://www.typescriptlang.org/tsconfig#compilerOptions) \": {      \"[listFiles](https://www.typescriptlang.org/tsconfig#listFiles) \": true    }  }   `\n\nWould echo paths like:\n\n`   $ npm run tsc  path/to/example/node_modules/typescript/lib/lib.d.ts  path/to/example/node_modules/typescript/lib/lib.es5.d.ts  path/to/example/node_modules/typescript/lib/lib.dom.d.ts  path/to/example/node_modules/typescript/lib/lib.webworker.importscripts.d.ts  path/to/example/node_modules/typescript/lib/lib.scripthost.d.ts  path/to/example/index.ts   `\n\nNote if using TypeScript 4.2, prefer [`explainFiles`](https://www.typescriptlang.org/tsconfig/#explainFiles)\n which offers an explanation of why a file was added too.\n\n*   Related:\n    *   [`explainFiles`](https://www.typescriptlang.org/tsconfig/#explainFiles)\n        \n*   Released:\n    \n    [1.5](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-5.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#noCheck)\n noCheck - `noCheck`\n\nDisable full type checking (only critical parse and emit errors will be reported).\n\n*   Released:\n    \n    [5.6](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-5-6.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#traceResolution)\n Trace Resolution - `traceResolution`\n\nWhen you are trying to debug why a module isn’t being included. You can set `traceResolution` to `true` to have TypeScript print information about its resolution process for each processed file.\n\n*   Released:\n    \n    [2.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html)\n    \n\n[#](https://www.typescriptlang.org/tsconfig/#Projects_6255)\nProjects\n--------------------------------------------------------------------\n\n### [#](https://www.typescriptlang.org/tsconfig/#composite)\n Composite - `composite`\n\nThe `composite` option enforces certain constraints which make it possible for build tools (including TypeScript itself, under `--build` mode) to quickly determine if a project has been built yet.\n\nWhen this setting is on:\n\n*   The [`rootDir`](https://www.typescriptlang.org/tsconfig/#rootDir)\n     setting, if not explicitly set, defaults to the directory containing the `tsconfig.json` file.\n    \n*   All implementation files must be matched by an [`include`](https://www.typescriptlang.org/tsconfig/#include)\n     pattern or listed in the [`files`](https://www.typescriptlang.org/tsconfig/#files)\n     array. If this constraint is violated, `tsc` will inform you which files weren’t specified.\n    \n*   [`declaration`](https://www.typescriptlang.org/tsconfig/#declaration)\n     defaults to `true`\n    \n\nYou can find documentation on TypeScript projects in [the handbook](https://www.typescriptlang.org/docs/handbook/project-references.html)\n.\n\n*   Related:\n    *   [`incremental`](https://www.typescriptlang.org/tsconfig/#incremental)\n        \n    *   [`tsBuildInfoFile`](https://www.typescriptlang.org/tsconfig/#tsBuildInfoFile)\n        \n*   Released:\n    \n    [3.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#disableReferencedProjectLoad)\n Disable Referenced Project Load - `disableReferencedProjectLoad`\n\nIn multi-project TypeScript programs, TypeScript will load all of the available projects into memory in order to provide accurate results for editor responses which require a full knowledge graph like ‘Find All References’.\n\nIf your project is large, you can use the flag `disableReferencedProjectLoad` to disable the automatic loading of all projects. Instead, projects are loaded dynamically as you open files through your editor.\n\n*   Released:\n    \n    [4.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#disableSolutionSearching)\n Disable Solution Searching - `disableSolutionSearching`\n\nWhen working with [composite TypeScript projects](https://www.typescriptlang.org/docs/handbook/project-references.html)\n, this option provides a way to declare that you do not want a project to be included when using features like _find all references_ or _jump to definition_ in an editor.\n\nThis flag is something you can use to increase responsiveness in large composite projects.\n\n*   Released:\n    \n    [3.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#disableSourceOfProjectReferenceRedirect)\n Disable Source Project Reference Redirect - `disableSourceOfProjectReferenceRedirect`\n\nWhen working with [composite TypeScript projects](https://www.typescriptlang.org/docs/handbook/project-references.html)\n, this option provides a way to go [back to the pre-3.7](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#build-free-editing-with-project-references)\n behavior where d.ts files were used to as the boundaries between modules. In 3.7 the source of truth is now your TypeScript files.\n\n*   Released:\n    \n    [3.7](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#incremental)\n Incremental - `incremental`\n\nTells TypeScript to save information about the project graph from the last compilation to files stored on disk. This creates a series of `.tsbuildinfo` files in the same folder as your compilation output. They are not used by your JavaScript at runtime and can be safely deleted. You can read more about the flag in the [3.4 release notes](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#faster-subsequent-builds-with-the---incremental-flag)\n.\n\nTo control which folders you want to the files to be built to, use the config option [`tsBuildInfoFile`](https://www.typescriptlang.org/tsconfig/#tsBuildInfoFile)\n.\n\n*   Default:\n    \n    `true` if [`composite`](https://www.typescriptlang.org/tsconfig/#composite)\n    ; `false` otherwise.\n    \n*   Related:\n    *   [`composite`](https://www.typescriptlang.org/tsconfig/#composite)\n        \n    *   [`tsBuildInfoFile`](https://www.typescriptlang.org/tsconfig/#tsBuildInfoFile)\n        \n*   Released:\n    \n    [3.4](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#tsBuildInfoFile)\n TS Build Info File - `tsBuildInfoFile`\n\nThis setting lets you specify a file for storing incremental compilation information as a part of composite projects which enables faster building of larger TypeScript codebases. You can read more about composite projects [in the handbook](https://www.typescriptlang.org/docs/handbook/project-references.html)\n.\n\nThe default depends on a combination of other settings:\n\n*   If `outFile` is set, the default is `<outFile>.tsbuildinfo`.\n*   If `rootDir` and `outDir` are set, then the file is `<outDir>/<relative path to config from rootDir>/<config name>.tsbuildinfo` For example, if `rootDir` is `src`, `outDir` is `dest`, and the config is `./tsconfig.json`, then the default is `./tsconfig.tsbuildinfo` as the relative path from `src/` to `./tsconfig.json` is `../`.\n*   If `outDir` is set, then the default is `<outDir>/<config name>.tsbuildInfo`\n*   Otherwise, the default is `<config name>.tsbuildInfo`\n\n*   Default:\n    \n    `.tsbuildinfo`\n    \n*   Related:\n    *   [`incremental`](https://www.typescriptlang.org/tsconfig/#incremental)\n        \n    *   [`composite`](https://www.typescriptlang.org/tsconfig/#composite)\n        \n*   Released:\n    \n    [3.4](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html)\n    \n\n[#](https://www.typescriptlang.org/tsconfig/#Output_Formatting_6256)\nOutput Formatting\n--------------------------------------------------------------------------------------\n\n### [#](https://www.typescriptlang.org/tsconfig/#noErrorTruncation)\n No Error Truncation - `noErrorTruncation`\n\nDo not truncate error messages.\n\nWith `false`, the default.\n\nts\n\n`  var x: {    propertyWithAnExceedinglyLongName1: string;    propertyWithAnExceedinglyLongName2: string;    propertyWithAnExceedinglyLongName3: string;    propertyWithAnExceedinglyLongName4: string;    propertyWithAnExceedinglyLongName5: string;    propertyWithAnExceedinglyLongName6: string;    propertyWithAnExceedinglyLongName7: string;    propertyWithAnExceedinglyLongName8: string;  };  // String representation of type of 'x' should be truncated in error message  var s: string = x;  Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; propertyWithAnExceedinglyLongName6: string; propertyWithAnExceedinglyLongName7: string; propert...' is not assignable to type 'string'.   Variable 'x' is used before being assigned.2322   2454Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; propertyWithAnExceedinglyLongName6: string; propertyWithAnExceedinglyLongName7: string; propert...' is not assignable to type 'string'.   Variable 'x' is used before being assigned.`[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vQFgKy4BQAbgIbSgAeqA3kaKAA7xMwAuAngOoCW7ACwCCAOwCiVAMaRIAE14iA5gBtOAGThKAcmQC2kAIypE7aAsUBuBs1Yce-YeKkz5S1Ru17IaY6fNXGFjg2aC4+QVEJaTlzd01FHX0MXzMlAJtgu3DHKJdY9XjEyFwU-2sgkLCHSOcYtwLPfXxStPLbUPsIp2jXFQaErwA2Fss2zI7smp78jwH9AHYR9Iqs6u68+tmigA4logBfKyIQUABlPyVQaEgWSERIEXYydl5NUDgAM1AuNnevgHIqP9QIgBHAAK7KWSgABGkG+0HBIkkzzkoAUoBg8Eo+kQiDIikgpAoIJGoAAvNQLEA)\n\nWith `true`\n\nts\n\n`  var x: {    propertyWithAnExceedinglyLongName1: string;    propertyWithAnExceedinglyLongName2: string;    propertyWithAnExceedinglyLongName3: string;    propertyWithAnExceedinglyLongName4: string;    propertyWithAnExceedinglyLongName5: string;    propertyWithAnExceedinglyLongName6: string;    propertyWithAnExceedinglyLongName7: string;    propertyWithAnExceedinglyLongName8: string;  };  // String representation of type of 'x' should be truncated in error message  var s: string = x;  Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; propertyWithAnExceedinglyLongName6: string; propertyWithAnExceedinglyLongName7: string; propertyWithAnExceedinglyLongName8: string; }' is not assignable to type 'string'.   Variable 'x' is used before being assigned.2322   2454Type '{ propertyWithAnExceedinglyLongName1: string; propertyWithAnExceedinglyLongName2: string; propertyWithAnExceedinglyLongName3: string; propertyWithAnExceedinglyLongName4: string; propertyWithAnExceedinglyLongName5: string; propertyWithAnExceedinglyLongName6: string; propertyWithAnExceedinglyLongName7: string; propertyWithAnExceedinglyLongName8: string; }' is not assignable to type 'string'.   Variable 'x' is used before being assigned.`[Try](https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygEwGY1vQFgKy4BQIEAdnAKKwIAq0ArmQMYCGALgJZxmruOQiAN1bRQAD1QBvIqFAAHePJjsAngHVO7ABYBBMpXHNIkACacyAcwA2qgDI9LAOVYBbSAEZUifhcsBuWQUlFQ0tPQMjE3MrWwcrF3c0b18rQLlFOGVoNU0dfUNjMz84x0TIDBToP3TgrNC8iMLokvsyt0hcKpqgzOzc8IKo4ti2hI78brTekJyw-MiimJsx5w6ANimAmfq5xqGl1vi19wB2Ldq+hsHFltHj8oAOC6IAX0CSMABlVMtQaEgikgiEgZHYHG4ZFAcAAZqA1MpoXCAOTiZGgRDaOAMaymUAAI0g8MYLA4ZlAFlAMHgYnciEQrEsghEYhQGN+oAAvBJ-EA)\n\n*   Released:\n    \n    [1.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-0.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#preserveWatchOutput)\n Preserve Watch Output - `preserveWatchOutput`\n\nWhether to keep outdated console output in watch mode instead of clearing the screen every time a change happened.\n\n*   Internal\n*   Released:\n    \n    [2.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-8.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#pretty)\n Pretty - `pretty`\n\nStylize errors and messages using color and context, this is on by default — offers you a chance to have less terse, single colored messages from the compiler.\n\n*   Default:\n    \n    `true`\n    \n*   Released:\n    \n    [1.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-8.html)\n    \n\n[#](https://www.typescriptlang.org/tsconfig/#Completeness_6257)\nCompleteness\n----------------------------------------------------------------------------\n\n### [#](https://www.typescriptlang.org/tsconfig/#skipDefaultLibCheck)\n Skip Default Lib Check - `skipDefaultLibCheck`\n\nUse [`skipLibCheck`](https://www.typescriptlang.org/tsconfig/#skipLibCheck)\n instead. Skip type checking of default library declaration files.\n\n*   Released:\n    \n    [1.6](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-1-6.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#skipLibCheck)\n Skip Lib Check - `skipLibCheck`\n\nSkip type checking of declaration files.\n\nThis can save time during compilation at the expense of type-system accuracy. For example, two libraries could define two copies of the same `type` in an inconsistent way. Rather than doing a full check of all `d.ts` files, TypeScript will type check the code you specifically refer to in your app’s source code.\n\nA common case where you might think to use `skipLibCheck` is when there are two copies of a library’s types in your `node_modules`. In these cases, you should consider using a feature like [yarn’s resolutions](https://yarnpkg.com/lang/en/docs/selective-version-resolutions/)\n to ensure there is only one copy of that dependency in your tree or investigate how to ensure there is only one copy by understanding the dependency resolution to fix the issue without additional tooling.\n\nAnother possibility is when you are migrating between TypeScript releases and the changes cause breakages in node\\_modules and the JS standard libraries which you do not want to deal with during the TypeScript update.\n\nNote, that if these issues come from the TypeScript standard library you can replace the library using [TypeScript 4.5’s lib replacement](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-5.html#supporting-lib-from-node_modules)\n technique.\n\n*   Recommended\n*   Released:\n    \n    [2.0](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html)\n    \n\n[#](https://www.typescriptlang.org/tsconfig/#Command_line_Options_6171)\nCommand Line\n------------------------------------------------------------------------------------\n\n[#](https://www.typescriptlang.org/tsconfig/#Watch_and_Build_Modes_6250)\nWatch Options\n--------------------------------------------------------------------------------------\n\nTypeScript 3.8 shipped a new strategy for watching directories, which is crucial for efficiently picking up changes to `node_modules`.\n\nOn operating systems like Linux, TypeScript installs directory watchers (as opposed to file watchers) on `node_modules` and many of its subdirectories to detect changes in dependencies. This is because the number of available file watchers is often eclipsed by the number of files in `node_modules`, whereas there are way fewer directories to track.\n\nBecause every project might work better under different strategies, and this new approach might not work well for your workflows, TypeScript 3.8 introduces a new `watchOptions` field which allows users to tell the compiler/language service which watching strategies should be used to keep track of files and directories.\n\n### [#](https://www.typescriptlang.org/tsconfig/#assumeChangesOnlyAffectDirectDependencies)\n Assume Changes Only Affect Direct Dependencies - `assumeChangesOnlyAffectDirectDependencies`\n\nWhen this option is enabled, TypeScript will avoid rechecking/rebuilding all truly possibly-affected files, and only recheck/rebuild files that have changed as well as files that directly import them.\n\nThis can be considered a ‘fast & loose’ implementation of the watching algorithm, which can drastically reduce incremental rebuild times at the expense of having to run the full build occasionally to get all compiler error messages.\n\n*   Released:\n    \n    [3.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html)\n    \n\n[](https://www.typescriptlang.org/tsconfig/#watch-options)\nWatch Options\n------------------------------------------------------------------------\n\nYou can configure the how TypeScript `--watch` works. This section is mainly for handling case where `fs.watch` and `fs.watchFile` have additional constraints like on Linux. You can read more at [Configuring Watch](https://www.typescriptlang.org/docs/handbook/configuring-watch.html)\n.\n\n### [#](https://www.typescriptlang.org/tsconfig/#watch-watchFile)\n Watch File - `watchFile`\n\nThe strategy for how individual files are watched.\n\n*   `fixedPollingInterval`: Check every file for changes several times a second at a fixed interval.\n*   `priorityPollingInterval`: Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.\n*   `dynamicPriorityPolling`: Use a dynamic queue where less-frequently modified files will be checked less often.\n*   `useFsEvents` (the default): Attempt to use the operating system/file system’s native events for file changes.\n*   `useFsEventsOnParentDirectory`: Attempt to use the operating system/file system’s native events to listen for changes on a file’s parent directory\n\n*   Allowed:\n    *   `fixedpollinginterval`\n        \n    *   `prioritypollinginterval`\n        \n    *   `dynamicprioritypolling`\n        \n    *   `fixedchunksizepolling`\n        \n    *   `usefsevents`\n        \n    *   `usefseventsonparentdirectory`\n        \n*   Released:\n    \n    [3.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#watch-watchDirectory)\n Watch Directory - `watchDirectory`\n\nThe strategy for how entire directory trees are watched under systems that lack recursive file-watching functionality.\n\n*   `fixedPollingInterval`: Check every directory for changes several times a second at a fixed interval.\n*   `dynamicPriorityPolling`: Use a dynamic queue where less-frequently modified directories will be checked less often.\n*   `useFsEvents` (the default): Attempt to use the operating system/file system’s native events for directory changes.\n\n*   Allowed:\n    *   `usefsevents`\n        \n    *   `fixedpollinginterval`\n        \n    *   `dynamicprioritypolling`\n        \n    *   `fixedchunksizepolling`\n        \n*   Released:\n    \n    [3.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#watch-fallbackPolling)\n Fallback Polling - `fallbackPolling`\n\nWhen using file system events, this option specifies the polling strategy that gets used when the system runs out of native file watchers and/or doesn’t support native file watchers.\n\n*   `fixedPollingInterval`: Check every file for changes several times a second at a fixed interval.\n*   `priorityPollingInterval`: Check every file for changes several times a second, but use heuristics to check certain types of files less frequently than others.\n*   `dynamicPriorityPolling`: Use a dynamic queue where less-frequently modified files will be checked less often.\n*   `synchronousWatchDirectory`: Disable deferred watching on directories. Deferred watching is useful when lots of file changes might occur at once (e.g. a change in `node_modules` from running `npm install`), but you might want to disable it with this flag for some less-common setups.\n\n*   Allowed:\n    *   `fixedinterval`\n        \n    *   `priorityinterval`\n        \n    *   `dynamicpriority`\n        \n    *   `fixedchunksize`\n        \n*   Released:\n    \n    [3.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#watch-synchronousWatchDirectory)\n Synchronous Watch Directory - `synchronousWatchDirectory`\n\nSynchronously call callbacks and update the state of directory watchers on platforms that don\\`t support recursive watching natively. Instead of giving a small timeout to allow for potentially multiple edits to occur on a file.\n\n`   {    \"watchOptions\": {      \"[synchronousWatchDirectory](https://www.typescriptlang.org/tsconfig#synchronousWatchDirectory) \": true    }  }   `\n\n*   Released:\n    \n    [3.8](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#watch-excludeDirectories)\n Exclude Directories - `excludeDirectories`\n\nYou can use [`excludeFiles`](https://www.typescriptlang.org/tsconfig/#excludeFiles)\n to drastically reduce the number of files which are watched during `--watch`. This can be a useful way to reduce the number of open file which TypeScript tracks on Linux.\n\n`   {    \"watchOptions\": {      \"[excludeDirectories](https://www.typescriptlang.org/tsconfig#excludeDirectories) \": [\"**/node_modules\", \"_build\", \"temp/*\"]    }  }   `\n\n*   Released:\n    \n    [4.2](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-2.html)\n    \n\n### [#](https://www.typescriptlang.org/tsconfig/#watch-excludeFiles)\n Exclude Files - `excludeFiles`\n\nYou can use `excludeFiles` to remove a set of specific files from the files which are watched.\n\n`   {    \"watchOptions\": {      \"[excludeFiles](https://www.typescriptlang.org/tsconfig#excludeFiles) \": [\"temp/file.ts\"]    }  }   `\n\n*   Released:\n    \n    [4.2](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-2.html)\n    \n\n[](https://www.typescriptlang.org/tsconfig/#type-acquisition)\nType Acquisition\n------------------------------------------------------------------------------\n\nType Acquisition is only important for JavaScript projects. In TypeScript projects you need to include the types in your projects explicitly. However, for JavaScript projects, the TypeScript tooling will download types for your modules in the background and outside of your node\\_modules folder.\n\n### [#](https://www.typescriptlang.org/tsconfig/#type-enable)\n Enable - `enable`\n\nDisables automatic type acquisition in JavaScript projects:\n\njson\n\n`   {    \"typeAcquisition\": {      \"enable\": false    }  }   `\n\n### [#](https://www.typescriptlang.org/tsconfig/#type-include)\n Include - `include`\n\nIf you have a JavaScript project where TypeScript needs additional guidance to understand global dependencies, or have disabled the built-in inference via [`disableFilenameBasedTypeAcquisition`](https://www.typescriptlang.org/tsconfig/#disableFilenameBasedTypeAcquisition)\n.\n\nYou can use `include` to specify which types should be used from DefinitelyTyped:\n\njson\n\n`   {    \"typeAcquisition\": {      \"include\": [\"jquery\"]    }  }   `\n\n### [#](https://www.typescriptlang.org/tsconfig/#type-exclude)\n Exclude - `exclude`\n\nOffers a config for disabling the type-acquisition for a certain module in JavaScript projects. This can be useful for projects which include other libraries in testing infrastructure which aren’t needed in the main application.\n\njson\n\n`   {    \"typeAcquisition\": {      \"exclude\": [\"jest\", \"mocha\"]    }  }   `\n\n### [#](https://www.typescriptlang.org/tsconfig/#type-disableFilenameBasedTypeAcquisition)\n Disable Filename Based Type Acquisition - `disableFilenameBasedTypeAcquisition`\n\nTypeScript’s type acquisition can infer what types should be added based on filenames in a project. This means that having a file like `jquery.js` in your project would automatically download the types for JQuery from DefinitelyTyped.\n\nYou can disable this via `disableFilenameBasedTypeAcquisition`.\n\njson\n\n`   {    \"typeAcquisition\": {      \"disableFilenameBasedTypeAcquisition\": true    }  }   `\n\n*   Released:\n    \n    [4.1](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-4-1.html)\n    \n\nMSG","metadata":{"og:description":"From allowJs to useDefineForClassFields the TSConfig reference includes information about all of the active compiler flags setting up a TypeScript project.","twitter:site":"typescriptlang","viewport":"width=device-width, initial-scale=1, shrink-to-fit=no","ogDescription":"From allowJs to useDefineForClassFields the TSConfig reference includes information about all of the active compiler flags setting up a TypeScript project.","theme-color":"#3178C6","title":"TypeScript: TSConfig Reference - Docs on every TSConfig option","og:title":"TSConfig Reference - Docs on every TSConfig option","ogTitle":"TSConfig Reference - Docs on every TSConfig option","description":"From allowJs to useDefineForClassFields the TSConfig reference includes information about all of the active compiler flags setting up a TypeScript project.","language":"en","generator":"Gatsby 5.13.5","favicon":"https://www.typescriptlang.org/favicon-32x32.png?v=8944a05a8b601855de116c8a56d3b3ae","scrapeId":"7f23cf0e-d79b-4248-ae69-bb4f4400a565","sourceURL":"https://www.typescriptlang.org/tsconfig/","url":"https://www.typescriptlang.org/tsconfig/","statusCode":200}}]}